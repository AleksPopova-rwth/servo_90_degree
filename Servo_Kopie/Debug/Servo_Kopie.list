
Servo_Kopie.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054b8  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08005668  08005668  00006668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056cc  080056cc  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  080056cc  080056cc  000066cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080056d4  080056d4  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056d4  080056d4  000066d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080056d8  080056d8  000066d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080056dc  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000705c  2**0
                  CONTENTS
 10 .bss          000009a0  2000005c  2000005c  0000705c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200009fc  200009fc  0000705c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014c16  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002709  00000000  00000000  0001bca2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011e8  00000000  00000000  0001e3b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e1f  00000000  00000000  0001f598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026857  00000000  00000000  000203b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013f09  00000000  00000000  00046c0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eee51  00000000  00000000  0005ab17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00149968  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005288  00000000  00000000  001499ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  0014ec34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000005c 	.word	0x2000005c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005650 	.word	0x08005650

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000060 	.word	0x20000060
 80001ec:	08005650 	.word	0x08005650

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <Degree5_Init>:
#include <stdlib.h>
#include <setjmp.h>

jmp_buf env;

void Degree5_Init(Degree5* controller, ADC_HandleTypeDef* adc1, ADC_HandleTypeDef* adc2, TIM_HandleTypeDef* tim, UART_HandleTypeDef* uart) {
 8000580:	b480      	push	{r7}
 8000582:	b085      	sub	sp, #20
 8000584:	af00      	add	r7, sp, #0
 8000586:	60f8      	str	r0, [r7, #12]
 8000588:	60b9      	str	r1, [r7, #8]
 800058a:	607a      	str	r2, [r7, #4]
 800058c:	603b      	str	r3, [r7, #0]
    controller->hadc1 = adc1;
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	68ba      	ldr	r2, [r7, #8]
 8000592:	601a      	str	r2, [r3, #0]
    controller->hadc2 = adc2;
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	687a      	ldr	r2, [r7, #4]
 8000598:	605a      	str	r2, [r3, #4]
    controller->htim = tim;
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	683a      	ldr	r2, [r7, #0]
 800059e:	609a      	str	r2, [r3, #8]
    controller->huart = uart;
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	69ba      	ldr	r2, [r7, #24]
 80005a4:	60da      	str	r2, [r3, #12]
    controller->current_pwm = 750; // Initial position
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	f240 22ee 	movw	r2, #750	@ 0x2ee
 80005ac:	821a      	strh	r2, [r3, #16]
}
 80005ae:	bf00      	nop
 80005b0:	3714      	adds	r7, #20
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr

080005ba <Degree5_ReadADC>:

uint32_t Degree5_ReadADC(ADC_HandleTypeDef* adc) {
 80005ba:	b580      	push	{r7, lr}
 80005bc:	b084      	sub	sp, #16
 80005be:	af00      	add	r7, sp, #0
 80005c0:	6078      	str	r0, [r7, #4]
    uint32_t raw_value = 0;
 80005c2:	2300      	movs	r3, #0
 80005c4:	60fb      	str	r3, [r7, #12]
    HAL_ADC_Start(adc);
 80005c6:	6878      	ldr	r0, [r7, #4]
 80005c8:	f001 f812 	bl	80015f0 <HAL_ADC_Start>
    if (HAL_ADC_PollForConversion(adc, HAL_MAX_DELAY) == HAL_OK) {
 80005cc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80005d0:	6878      	ldr	r0, [r7, #4]
 80005d2:	f001 f8df 	bl	8001794 <HAL_ADC_PollForConversion>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d103      	bne.n	80005e4 <Degree5_ReadADC+0x2a>
        raw_value = HAL_ADC_GetValue(adc);
 80005dc:	6878      	ldr	r0, [r7, #4]
 80005de:	f001 f964 	bl	80018aa <HAL_ADC_GetValue>
 80005e2:	60f8      	str	r0, [r7, #12]
    }
    return raw_value;
 80005e4:	68fb      	ldr	r3, [r7, #12]
}
 80005e6:	4618      	mov	r0, r3
 80005e8:	3710      	adds	r7, #16
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}

080005ee <Degree5_SetServoPosition>:

void Degree5_SetServoPosition(Degree5* controller, uint16_t target_pwm) {
 80005ee:	b580      	push	{r7, lr}
 80005f0:	b088      	sub	sp, #32
 80005f2:	af00      	add	r7, sp, #0
 80005f4:	6078      	str	r0, [r7, #4]
 80005f6:	460b      	mov	r3, r1
 80005f8:	807b      	strh	r3, [r7, #2]
    uint32_t step_count = 0;
 80005fa:	2300      	movs	r3, #0
 80005fc:	61fb      	str	r3, [r7, #28]
    const uint16_t tolerance = 20; // Tolerance for ADC similarity
 80005fe:	2314      	movs	r3, #20
 8000600:	837b      	strh	r3, [r7, #26]
//
//    	char msg[50];
//    	sprintf(msg, "Stopped: ADC1=%lu, ADC2=%lu\r\n", raw1, raw2);
//    	HAL_UART_Transmit(controller->huart, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);

    	if (controller->current_pwm < target_pwm) {
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	8a1b      	ldrh	r3, [r3, #16]
 8000606:	887a      	ldrh	r2, [r7, #2]
 8000608:	429a      	cmp	r2, r3
 800060a:	d943      	bls.n	8000694 <Degree5_SetServoPosition+0xa6>
    		while (controller->current_pwm < target_pwm)
 800060c:	e03c      	b.n	8000688 <Degree5_SetServoPosition+0x9a>
    		{
    			controller->current_pwm++;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	8a1b      	ldrh	r3, [r3, #16]
 8000612:	3301      	adds	r3, #1
 8000614:	b29a      	uxth	r2, r3
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	821a      	strh	r2, [r3, #16]
    			controller->htim->Instance->CCR1 = controller->current_pwm;
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	8a1a      	ldrh	r2, [r3, #16]
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	689b      	ldr	r3, [r3, #8]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	635a      	str	r2, [r3, #52]	@ 0x34
    			HAL_Delay(1); // Adjust speed of transition
 8000626:	2001      	movs	r0, #1
 8000628:	f000 ff7a 	bl	8001520 <HAL_Delay>
    			step_count++;
 800062c:	69fb      	ldr	r3, [r7, #28]
 800062e:	3301      	adds	r3, #1
 8000630:	61fb      	str	r3, [r7, #28]

            // Check ADC values every 20 steps
    			if (step_count >= 10) {
 8000632:	69fb      	ldr	r3, [r7, #28]
 8000634:	2b09      	cmp	r3, #9
 8000636:	d927      	bls.n	8000688 <Degree5_SetServoPosition+0x9a>
    				uint32_t raw1 = Degree5_ReadADC(controller->hadc1);
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4618      	mov	r0, r3
 800063e:	f7ff ffbc 	bl	80005ba <Degree5_ReadADC>
 8000642:	60f8      	str	r0, [r7, #12]
    				uint32_t raw2 = Degree5_ReadADC(controller->hadc2);
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	685b      	ldr	r3, [r3, #4]
 8000648:	4618      	mov	r0, r3
 800064a:	f7ff ffb6 	bl	80005ba <Degree5_ReadADC>
 800064e:	60b8      	str	r0, [r7, #8]
    				   if ((raw1 > 2048 && raw2 <= 2048) || (raw2 > 2048 && raw1 <= 2048)) {
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000656:	d903      	bls.n	8000660 <Degree5_SetServoPosition+0x72>
 8000658:	68bb      	ldr	r3, [r7, #8]
 800065a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800065e:	d965      	bls.n	800072c <Degree5_SetServoPosition+0x13e>
 8000660:	68bb      	ldr	r3, [r7, #8]
 8000662:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000666:	d903      	bls.n	8000670 <Degree5_SetServoPosition+0x82>
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800066e:	d95d      	bls.n	800072c <Degree5_SetServoPosition+0x13e>
    					   break; // Stop movement if new ADC values require action
    				   }
    				   else if (abs((int32_t)(raw1 - raw2)) <= tolerance)
 8000670:	68fa      	ldr	r2, [r7, #12]
 8000672:	68bb      	ldr	r3, [r7, #8]
 8000674:	1ad3      	subs	r3, r2, r3
 8000676:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800067a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800067e:	8b7b      	ldrh	r3, [r7, #26]
 8000680:	429a      	cmp	r2, r3
 8000682:	dd50      	ble.n	8000726 <Degree5_SetServoPosition+0x138>
    				   {
    				   break;
    				   }
                // Stop if ADC values are close
    				step_count = 0; // Reset step counter
 8000684:	2300      	movs	r3, #0
 8000686:	61fb      	str	r3, [r7, #28]
    		while (controller->current_pwm < target_pwm)
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	8a1b      	ldrh	r3, [r3, #16]
 800068c:	887a      	ldrh	r2, [r7, #2]
 800068e:	429a      	cmp	r2, r3
 8000690:	d8bd      	bhi.n	800060e <Degree5_SetServoPosition+0x20>
                // Stop if ADC values are close
    				step_count = 0; // Reset step counter
    			}
    		}
    	}
    }
 8000692:	e04b      	b.n	800072c <Degree5_SetServoPosition+0x13e>
    	else if (controller->current_pwm > target_pwm) {
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	8a1b      	ldrh	r3, [r3, #16]
 8000698:	887a      	ldrh	r2, [r7, #2]
 800069a:	429a      	cmp	r2, r3
 800069c:	d246      	bcs.n	800072c <Degree5_SetServoPosition+0x13e>
    		while (controller->current_pwm > target_pwm) {
 800069e:	e03c      	b.n	800071a <Degree5_SetServoPosition+0x12c>
    			controller->current_pwm--;
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	8a1b      	ldrh	r3, [r3, #16]
 80006a4:	3b01      	subs	r3, #1
 80006a6:	b29a      	uxth	r2, r3
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	821a      	strh	r2, [r3, #16]
    			controller->htim->Instance->CCR1 = controller->current_pwm;
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	8a1a      	ldrh	r2, [r3, #16]
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	689b      	ldr	r3, [r3, #8]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	635a      	str	r2, [r3, #52]	@ 0x34
    			HAL_Delay(1); // Adjust speed of transition
 80006b8:	2001      	movs	r0, #1
 80006ba:	f000 ff31 	bl	8001520 <HAL_Delay>
    			step_count++;
 80006be:	69fb      	ldr	r3, [r7, #28]
 80006c0:	3301      	adds	r3, #1
 80006c2:	61fb      	str	r3, [r7, #28]
    			if (step_count >= 10) {
 80006c4:	69fb      	ldr	r3, [r7, #28]
 80006c6:	2b09      	cmp	r3, #9
 80006c8:	d927      	bls.n	800071a <Degree5_SetServoPosition+0x12c>
    				uint32_t raw1 = Degree5_ReadADC(controller->hadc1);
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	4618      	mov	r0, r3
 80006d0:	f7ff ff73 	bl	80005ba <Degree5_ReadADC>
 80006d4:	6178      	str	r0, [r7, #20]
    				uint32_t raw2 = Degree5_ReadADC(controller->hadc2);
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	685b      	ldr	r3, [r3, #4]
 80006da:	4618      	mov	r0, r3
 80006dc:	f7ff ff6d 	bl	80005ba <Degree5_ReadADC>
 80006e0:	6138      	str	r0, [r7, #16]
    				if ((raw1 > 2048 && raw2 <= 2048) || (raw2 > 2048 && raw1 <= 2048)) {
 80006e2:	697b      	ldr	r3, [r7, #20]
 80006e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80006e8:	d903      	bls.n	80006f2 <Degree5_SetServoPosition+0x104>
 80006ea:	693b      	ldr	r3, [r7, #16]
 80006ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80006f0:	d91c      	bls.n	800072c <Degree5_SetServoPosition+0x13e>
 80006f2:	693b      	ldr	r3, [r7, #16]
 80006f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80006f8:	d903      	bls.n	8000702 <Degree5_SetServoPosition+0x114>
 80006fa:	697b      	ldr	r3, [r7, #20]
 80006fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000700:	d914      	bls.n	800072c <Degree5_SetServoPosition+0x13e>
 				   else if (abs((int32_t)(raw1 - raw2)) <= tolerance)
 8000702:	697a      	ldr	r2, [r7, #20]
 8000704:	693b      	ldr	r3, [r7, #16]
 8000706:	1ad3      	subs	r3, r2, r3
 8000708:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800070c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000710:	8b7b      	ldrh	r3, [r7, #26]
 8000712:	429a      	cmp	r2, r3
 8000714:	dd09      	ble.n	800072a <Degree5_SetServoPosition+0x13c>
    				step_count = 0; // Reset step counter
 8000716:	2300      	movs	r3, #0
 8000718:	61fb      	str	r3, [r7, #28]
    		while (controller->current_pwm > target_pwm) {
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	8a1b      	ldrh	r3, [r3, #16]
 800071e:	887a      	ldrh	r2, [r7, #2]
 8000720:	429a      	cmp	r2, r3
 8000722:	d3bd      	bcc.n	80006a0 <Degree5_SetServoPosition+0xb2>
    }
 8000724:	e002      	b.n	800072c <Degree5_SetServoPosition+0x13e>
    				   break;
 8000726:	bf00      	nop
 8000728:	e000      	b.n	800072c <Degree5_SetServoPosition+0x13e>
 					   break;
 800072a:	bf00      	nop
    }
 800072c:	bf00      	nop
 800072e:	3720      	adds	r7, #32
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}

08000734 <Degree5_ReadADCAndControlServo>:

void Degree5_ReadADCAndControlServo(Degree5* controller) {
 8000734:	b580      	push	{r7, lr}
 8000736:	b092      	sub	sp, #72	@ 0x48
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
    uint32_t raw1 = 0, raw2 = 0;
 800073c:	2300      	movs	r3, #0
 800073e:	643b      	str	r3, [r7, #64]	@ 0x40
 8000740:	2300      	movs	r3, #0
 8000742:	63fb      	str	r3, [r7, #60]	@ 0x3c
    char msg[50];
    const uint16_t tolerance = 20; // Tolerance for ADC similarity
 8000744:	2314      	movs	r3, #20
 8000746:	877b      	strh	r3, [r7, #58]	@ 0x3a

    // Read from ADC1
    raw1 = Degree5_ReadADC(controller->hadc1);
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4618      	mov	r0, r3
 800074e:	f7ff ff34 	bl	80005ba <Degree5_ReadADC>
 8000752:	6438      	str	r0, [r7, #64]	@ 0x40
    sprintf(msg, "ADC1: %lu\r\n", raw1);
 8000754:	f107 0308 	add.w	r3, r7, #8
 8000758:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800075a:	492d      	ldr	r1, [pc, #180]	@ (8000810 <Degree5_ReadADCAndControlServo+0xdc>)
 800075c:	4618      	mov	r0, r3
 800075e:	f004 fad7 	bl	8004d10 <siprintf>
    //HAL_UART_Transmit(controller->huart, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, (raw1 > 2048) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000762:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000764:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000768:	bf94      	ite	ls
 800076a:	2301      	movls	r3, #1
 800076c:	2300      	movhi	r3, #0
 800076e:	b2db      	uxtb	r3, r3
 8000770:	461a      	mov	r2, r3
 8000772:	2101      	movs	r1, #1
 8000774:	4827      	ldr	r0, [pc, #156]	@ (8000814 <Degree5_ReadADCAndControlServo+0xe0>)
 8000776:	f002 f8b5 	bl	80028e4 <HAL_GPIO_WritePin>

    HAL_Delay(100);
 800077a:	2064      	movs	r0, #100	@ 0x64
 800077c:	f000 fed0 	bl	8001520 <HAL_Delay>

    // Read from ADC2
    raw2 = Degree5_ReadADC(controller->hadc2);
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	685b      	ldr	r3, [r3, #4]
 8000784:	4618      	mov	r0, r3
 8000786:	f7ff ff18 	bl	80005ba <Degree5_ReadADC>
 800078a:	63f8      	str	r0, [r7, #60]	@ 0x3c
    sprintf(msg, "ADC2: %lu\r\n", raw2);
 800078c:	f107 0308 	add.w	r3, r7, #8
 8000790:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000792:	4921      	ldr	r1, [pc, #132]	@ (8000818 <Degree5_ReadADCAndControlServo+0xe4>)
 8000794:	4618      	mov	r0, r3
 8000796:	f004 fabb 	bl	8004d10 <siprintf>
    //HAL_UART_Transmit(controller->huart, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, (raw2 > 2048) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 800079a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800079c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80007a0:	bf94      	ite	ls
 80007a2:	2301      	movls	r3, #1
 80007a4:	2300      	movhi	r3, #0
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	461a      	mov	r2, r3
 80007aa:	2180      	movs	r1, #128	@ 0x80
 80007ac:	4819      	ldr	r0, [pc, #100]	@ (8000814 <Degree5_ReadADCAndControlServo+0xe0>)
 80007ae:	f002 f899 	bl	80028e4 <HAL_GPIO_WritePin>

    HAL_Delay(100);
 80007b2:	2064      	movs	r0, #100	@ 0x64
 80007b4:	f000 feb4 	bl	8001520 <HAL_Delay>

    // Determine target PWM based on ADC values
    uint16_t target_pwm = 750;
 80007b8:	f240 23ee 	movw	r3, #750	@ 0x2ee
 80007bc:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    if (raw1 > raw2) {
 80007c0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80007c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80007c4:	429a      	cmp	r2, r3
 80007c6:	d903      	bls.n	80007d0 <Degree5_ReadADCAndControlServo+0x9c>
        target_pwm = 250;
 80007c8:	23fa      	movs	r3, #250	@ 0xfa
 80007ca:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80007ce:	e007      	b.n	80007e0 <Degree5_ReadADCAndControlServo+0xac>
    } else if (raw1 < raw2) {
 80007d0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80007d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80007d4:	429a      	cmp	r2, r3
 80007d6:	d203      	bcs.n	80007e0 <Degree5_ReadADCAndControlServo+0xac>
        target_pwm = 1250;
 80007d8:	f240 43e2 	movw	r3, #1250	@ 0x4e2
 80007dc:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    }

    if (abs((int32_t)(raw1 - raw2)) >= tolerance) {
 80007e0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80007e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80007e4:	1ad3      	subs	r3, r2, r3
 80007e6:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80007ea:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80007ee:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80007f0:	429a      	cmp	r2, r3
 80007f2:	db05      	blt.n	8000800 <Degree5_ReadADCAndControlServo+0xcc>
    // Gradually move servo to the target position
    	Degree5_SetServoPosition(controller, target_pwm);
 80007f4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80007f8:	4619      	mov	r1, r3
 80007fa:	6878      	ldr	r0, [r7, #4]
 80007fc:	f7ff fef7 	bl	80005ee <Degree5_SetServoPosition>
    }
    HAL_Delay(100);
 8000800:	2064      	movs	r0, #100	@ 0x64
 8000802:	f000 fe8d 	bl	8001520 <HAL_Delay>
}
 8000806:	bf00      	nop
 8000808:	3748      	adds	r7, #72	@ 0x48
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	08005668 	.word	0x08005668
 8000814:	40020400 	.word	0x40020400
 8000818:	08005674 	.word	0x08005674

0800081c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b088      	sub	sp, #32
 8000820:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000822:	f000 fe0b 	bl	800143c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000826:	f000 f82d 	bl	8000884 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800082a:	f000 fa55 	bl	8000cd8 <MX_GPIO_Init>
  MX_ETH_Init();
 800082e:	f000 f937 	bl	8000aa0 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000832:	f000 f9f9 	bl	8000c28 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000836:	f000 fa21 	bl	8000c7c <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 800083a:	f000 f88d 	bl	8000958 <MX_ADC1_Init>
  MX_ADC2_Init();
 800083e:	f000 f8dd 	bl	80009fc <MX_ADC2_Init>
  MX_TIM2_Init();
 8000842:	f000 f97b 	bl	8000b3c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000846:	2100      	movs	r1, #0
 8000848:	480a      	ldr	r0, [pc, #40]	@ (8000874 <main+0x58>)
 800084a:	f002 feb3 	bl	80035b4 <HAL_TIM_PWM_Start>
  HAL_ADC_Start(&hadc1);
 800084e:	480a      	ldr	r0, [pc, #40]	@ (8000878 <main+0x5c>)
 8000850:	f000 fece 	bl	80015f0 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc2);
 8000854:	4809      	ldr	r0, [pc, #36]	@ (800087c <main+0x60>)
 8000856:	f000 fecb 	bl	80015f0 <HAL_ADC_Start>

  //Degree90 degree90Controller;
  //Degree90_Init(&degree90Controller, &hadc1, &hadc2, &htim2, &huart3);

  Degree5 degree5Controller;
  Degree5_Init(&degree5Controller, &hadc1, &hadc2, &htim2, &huart3);
 800085a:	1d38      	adds	r0, r7, #4
 800085c:	4b08      	ldr	r3, [pc, #32]	@ (8000880 <main+0x64>)
 800085e:	9300      	str	r3, [sp, #0]
 8000860:	4b04      	ldr	r3, [pc, #16]	@ (8000874 <main+0x58>)
 8000862:	4a06      	ldr	r2, [pc, #24]	@ (800087c <main+0x60>)
 8000864:	4904      	ldr	r1, [pc, #16]	@ (8000878 <main+0x5c>)
 8000866:	f7ff fe8b 	bl	8000580 <Degree5_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

      //Degree90_ReadADCAndControlServo(&degree90Controller);
      Degree5_ReadADCAndControlServo(&degree5Controller);
 800086a:	1d3b      	adds	r3, r7, #4
 800086c:	4618      	mov	r0, r3
 800086e:	f7ff ff61 	bl	8000734 <Degree5_ReadADCAndControlServo>
 8000872:	e7fa      	b.n	800086a <main+0x4e>
 8000874:	20000330 	.word	0x20000330
 8000878:	200001f0 	.word	0x200001f0
 800087c:	20000238 	.word	0x20000238
 8000880:	20000378 	.word	0x20000378

08000884 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b094      	sub	sp, #80	@ 0x50
 8000888:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800088a:	f107 0320 	add.w	r3, r7, #32
 800088e:	2230      	movs	r2, #48	@ 0x30
 8000890:	2100      	movs	r1, #0
 8000892:	4618      	mov	r0, r3
 8000894:	f004 fa5c 	bl	8004d50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000898:	f107 030c 	add.w	r3, r7, #12
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	605a      	str	r2, [r3, #4]
 80008a2:	609a      	str	r2, [r3, #8]
 80008a4:	60da      	str	r2, [r3, #12]
 80008a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a8:	2300      	movs	r3, #0
 80008aa:	60bb      	str	r3, [r7, #8]
 80008ac:	4b28      	ldr	r3, [pc, #160]	@ (8000950 <SystemClock_Config+0xcc>)
 80008ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008b0:	4a27      	ldr	r2, [pc, #156]	@ (8000950 <SystemClock_Config+0xcc>)
 80008b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80008b8:	4b25      	ldr	r3, [pc, #148]	@ (8000950 <SystemClock_Config+0xcc>)
 80008ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008c0:	60bb      	str	r3, [r7, #8]
 80008c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008c4:	2300      	movs	r3, #0
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	4b22      	ldr	r3, [pc, #136]	@ (8000954 <SystemClock_Config+0xd0>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a21      	ldr	r2, [pc, #132]	@ (8000954 <SystemClock_Config+0xd0>)
 80008ce:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80008d2:	6013      	str	r3, [r2, #0]
 80008d4:	4b1f      	ldr	r3, [pc, #124]	@ (8000954 <SystemClock_Config+0xd0>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008dc:	607b      	str	r3, [r7, #4]
 80008de:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008e0:	2301      	movs	r3, #1
 80008e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008e4:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80008e8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ea:	2302      	movs	r3, #2
 80008ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008ee:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80008f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008f4:	2304      	movs	r3, #4
 80008f6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80008f8:	23a8      	movs	r3, #168	@ 0xa8
 80008fa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008fc:	2302      	movs	r3, #2
 80008fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000900:	2307      	movs	r3, #7
 8000902:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000904:	f107 0320 	add.w	r3, r7, #32
 8000908:	4618      	mov	r0, r3
 800090a:	f002 f913 	bl	8002b34 <HAL_RCC_OscConfig>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000914:	f000 fa8e 	bl	8000e34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000918:	230f      	movs	r3, #15
 800091a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800091c:	2302      	movs	r3, #2
 800091e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000920:	2300      	movs	r3, #0
 8000922:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000924:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000928:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 800092a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800092e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000930:	f107 030c 	add.w	r3, r7, #12
 8000934:	2105      	movs	r1, #5
 8000936:	4618      	mov	r0, r3
 8000938:	f002 fb74 	bl	8003024 <HAL_RCC_ClockConfig>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000942:	f000 fa77 	bl	8000e34 <Error_Handler>
  }
}
 8000946:	bf00      	nop
 8000948:	3750      	adds	r7, #80	@ 0x50
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40023800 	.word	0x40023800
 8000954:	40007000 	.word	0x40007000

08000958 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b084      	sub	sp, #16
 800095c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800095e:	463b      	mov	r3, r7
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]
 8000964:	605a      	str	r2, [r3, #4]
 8000966:	609a      	str	r2, [r3, #8]
 8000968:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800096a:	4b21      	ldr	r3, [pc, #132]	@ (80009f0 <MX_ADC1_Init+0x98>)
 800096c:	4a21      	ldr	r2, [pc, #132]	@ (80009f4 <MX_ADC1_Init+0x9c>)
 800096e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8000970:	4b1f      	ldr	r3, [pc, #124]	@ (80009f0 <MX_ADC1_Init+0x98>)
 8000972:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000976:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000978:	4b1d      	ldr	r3, [pc, #116]	@ (80009f0 <MX_ADC1_Init+0x98>)
 800097a:	2200      	movs	r2, #0
 800097c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800097e:	4b1c      	ldr	r3, [pc, #112]	@ (80009f0 <MX_ADC1_Init+0x98>)
 8000980:	2200      	movs	r2, #0
 8000982:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000984:	4b1a      	ldr	r3, [pc, #104]	@ (80009f0 <MX_ADC1_Init+0x98>)
 8000986:	2200      	movs	r2, #0
 8000988:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800098a:	4b19      	ldr	r3, [pc, #100]	@ (80009f0 <MX_ADC1_Init+0x98>)
 800098c:	2200      	movs	r2, #0
 800098e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000992:	4b17      	ldr	r3, [pc, #92]	@ (80009f0 <MX_ADC1_Init+0x98>)
 8000994:	2200      	movs	r2, #0
 8000996:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000998:	4b15      	ldr	r3, [pc, #84]	@ (80009f0 <MX_ADC1_Init+0x98>)
 800099a:	4a17      	ldr	r2, [pc, #92]	@ (80009f8 <MX_ADC1_Init+0xa0>)
 800099c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800099e:	4b14      	ldr	r3, [pc, #80]	@ (80009f0 <MX_ADC1_Init+0x98>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80009a4:	4b12      	ldr	r3, [pc, #72]	@ (80009f0 <MX_ADC1_Init+0x98>)
 80009a6:	2201      	movs	r2, #1
 80009a8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80009aa:	4b11      	ldr	r3, [pc, #68]	@ (80009f0 <MX_ADC1_Init+0x98>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009b2:	4b0f      	ldr	r3, [pc, #60]	@ (80009f0 <MX_ADC1_Init+0x98>)
 80009b4:	2201      	movs	r2, #1
 80009b6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009b8:	480d      	ldr	r0, [pc, #52]	@ (80009f0 <MX_ADC1_Init+0x98>)
 80009ba:	f000 fdd5 	bl	8001568 <HAL_ADC_Init>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80009c4:	f000 fa36 	bl	8000e34 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80009c8:	2303      	movs	r3, #3
 80009ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80009cc:	2301      	movs	r3, #1
 80009ce:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80009d0:	2300      	movs	r3, #0
 80009d2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009d4:	463b      	mov	r3, r7
 80009d6:	4619      	mov	r1, r3
 80009d8:	4805      	ldr	r0, [pc, #20]	@ (80009f0 <MX_ADC1_Init+0x98>)
 80009da:	f000 ff73 	bl	80018c4 <HAL_ADC_ConfigChannel>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80009e4:	f000 fa26 	bl	8000e34 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009e8:	bf00      	nop
 80009ea:	3710      	adds	r7, #16
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	200001f0 	.word	0x200001f0
 80009f4:	40012000 	.word	0x40012000
 80009f8:	0f000001 	.word	0x0f000001

080009fc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b084      	sub	sp, #16
 8000a00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a02:	463b      	mov	r3, r7
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
 8000a08:	605a      	str	r2, [r3, #4]
 8000a0a:	609a      	str	r2, [r3, #8]
 8000a0c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000a0e:	4b21      	ldr	r3, [pc, #132]	@ (8000a94 <MX_ADC2_Init+0x98>)
 8000a10:	4a21      	ldr	r2, [pc, #132]	@ (8000a98 <MX_ADC2_Init+0x9c>)
 8000a12:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8000a14:	4b1f      	ldr	r3, [pc, #124]	@ (8000a94 <MX_ADC2_Init+0x98>)
 8000a16:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000a1a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000a1c:	4b1d      	ldr	r3, [pc, #116]	@ (8000a94 <MX_ADC2_Init+0x98>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8000a22:	4b1c      	ldr	r3, [pc, #112]	@ (8000a94 <MX_ADC2_Init+0x98>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000a28:	4b1a      	ldr	r3, [pc, #104]	@ (8000a94 <MX_ADC2_Init+0x98>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000a2e:	4b19      	ldr	r3, [pc, #100]	@ (8000a94 <MX_ADC2_Init+0x98>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a36:	4b17      	ldr	r3, [pc, #92]	@ (8000a94 <MX_ADC2_Init+0x98>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a3c:	4b15      	ldr	r3, [pc, #84]	@ (8000a94 <MX_ADC2_Init+0x98>)
 8000a3e:	4a17      	ldr	r2, [pc, #92]	@ (8000a9c <MX_ADC2_Init+0xa0>)
 8000a40:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a42:	4b14      	ldr	r3, [pc, #80]	@ (8000a94 <MX_ADC2_Init+0x98>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000a48:	4b12      	ldr	r3, [pc, #72]	@ (8000a94 <MX_ADC2_Init+0x98>)
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000a4e:	4b11      	ldr	r3, [pc, #68]	@ (8000a94 <MX_ADC2_Init+0x98>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a56:	4b0f      	ldr	r3, [pc, #60]	@ (8000a94 <MX_ADC2_Init+0x98>)
 8000a58:	2201      	movs	r2, #1
 8000a5a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000a5c:	480d      	ldr	r0, [pc, #52]	@ (8000a94 <MX_ADC2_Init+0x98>)
 8000a5e:	f000 fd83 	bl	8001568 <HAL_ADC_Init>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8000a68:	f000 f9e4 	bl	8000e34 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000a6c:	2304      	movs	r3, #4
 8000a6e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000a70:	2301      	movs	r3, #1
 8000a72:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000a74:	2300      	movs	r3, #0
 8000a76:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000a78:	463b      	mov	r3, r7
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4805      	ldr	r0, [pc, #20]	@ (8000a94 <MX_ADC2_Init+0x98>)
 8000a7e:	f000 ff21 	bl	80018c4 <HAL_ADC_ConfigChannel>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8000a88:	f000 f9d4 	bl	8000e34 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000a8c:	bf00      	nop
 8000a8e:	3710      	adds	r7, #16
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	20000238 	.word	0x20000238
 8000a98:	40012100 	.word	0x40012100
 8000a9c:	0f000001 	.word	0x0f000001

08000aa0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000aa4:	4b1f      	ldr	r3, [pc, #124]	@ (8000b24 <MX_ETH_Init+0x84>)
 8000aa6:	4a20      	ldr	r2, [pc, #128]	@ (8000b28 <MX_ETH_Init+0x88>)
 8000aa8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000aaa:	4b20      	ldr	r3, [pc, #128]	@ (8000b2c <MX_ETH_Init+0x8c>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000ab0:	4b1e      	ldr	r3, [pc, #120]	@ (8000b2c <MX_ETH_Init+0x8c>)
 8000ab2:	2280      	movs	r2, #128	@ 0x80
 8000ab4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000ab6:	4b1d      	ldr	r3, [pc, #116]	@ (8000b2c <MX_ETH_Init+0x8c>)
 8000ab8:	22e1      	movs	r2, #225	@ 0xe1
 8000aba:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000abc:	4b1b      	ldr	r3, [pc, #108]	@ (8000b2c <MX_ETH_Init+0x8c>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000ac2:	4b1a      	ldr	r3, [pc, #104]	@ (8000b2c <MX_ETH_Init+0x8c>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000ac8:	4b18      	ldr	r3, [pc, #96]	@ (8000b2c <MX_ETH_Init+0x8c>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000ace:	4b15      	ldr	r3, [pc, #84]	@ (8000b24 <MX_ETH_Init+0x84>)
 8000ad0:	4a16      	ldr	r2, [pc, #88]	@ (8000b2c <MX_ETH_Init+0x8c>)
 8000ad2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000ad4:	4b13      	ldr	r3, [pc, #76]	@ (8000b24 <MX_ETH_Init+0x84>)
 8000ad6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000ada:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000adc:	4b11      	ldr	r3, [pc, #68]	@ (8000b24 <MX_ETH_Init+0x84>)
 8000ade:	4a14      	ldr	r2, [pc, #80]	@ (8000b30 <MX_ETH_Init+0x90>)
 8000ae0:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000ae2:	4b10      	ldr	r3, [pc, #64]	@ (8000b24 <MX_ETH_Init+0x84>)
 8000ae4:	4a13      	ldr	r2, [pc, #76]	@ (8000b34 <MX_ETH_Init+0x94>)
 8000ae6:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000ae8:	4b0e      	ldr	r3, [pc, #56]	@ (8000b24 <MX_ETH_Init+0x84>)
 8000aea:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000aee:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000af0:	480c      	ldr	r0, [pc, #48]	@ (8000b24 <MX_ETH_Init+0x84>)
 8000af2:	f001 f9fb 	bl	8001eec <HAL_ETH_Init>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000afc:	f000 f99a 	bl	8000e34 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000b00:	2238      	movs	r2, #56	@ 0x38
 8000b02:	2100      	movs	r1, #0
 8000b04:	480c      	ldr	r0, [pc, #48]	@ (8000b38 <MX_ETH_Init+0x98>)
 8000b06:	f004 f923 	bl	8004d50 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000b0a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b38 <MX_ETH_Init+0x98>)
 8000b0c:	2221      	movs	r2, #33	@ 0x21
 8000b0e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000b10:	4b09      	ldr	r3, [pc, #36]	@ (8000b38 <MX_ETH_Init+0x98>)
 8000b12:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000b16:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000b18:	4b07      	ldr	r3, [pc, #28]	@ (8000b38 <MX_ETH_Init+0x98>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	20000280 	.word	0x20000280
 8000b28:	40028000 	.word	0x40028000
 8000b2c:	200008a4 	.word	0x200008a4
 8000b30:	20000150 	.word	0x20000150
 8000b34:	200000b0 	.word	0x200000b0
 8000b38:	20000078 	.word	0x20000078

08000b3c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b08e      	sub	sp, #56	@ 0x38
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b42:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b46:	2200      	movs	r2, #0
 8000b48:	601a      	str	r2, [r3, #0]
 8000b4a:	605a      	str	r2, [r3, #4]
 8000b4c:	609a      	str	r2, [r3, #8]
 8000b4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b50:	f107 0320 	add.w	r3, r7, #32
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b5a:	1d3b      	adds	r3, r7, #4
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]
 8000b64:	60da      	str	r2, [r3, #12]
 8000b66:	611a      	str	r2, [r3, #16]
 8000b68:	615a      	str	r2, [r3, #20]
 8000b6a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b6c:	4b2d      	ldr	r3, [pc, #180]	@ (8000c24 <MX_TIM2_Init+0xe8>)
 8000b6e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b72:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8000b74:	4b2b      	ldr	r3, [pc, #172]	@ (8000c24 <MX_TIM2_Init+0xe8>)
 8000b76:	2253      	movs	r2, #83	@ 0x53
 8000b78:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b7a:	4b2a      	ldr	r3, [pc, #168]	@ (8000c24 <MX_TIM2_Init+0xe8>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8000b80:	4b28      	ldr	r3, [pc, #160]	@ (8000c24 <MX_TIM2_Init+0xe8>)
 8000b82:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000b86:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b88:	4b26      	ldr	r3, [pc, #152]	@ (8000c24 <MX_TIM2_Init+0xe8>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b8e:	4b25      	ldr	r3, [pc, #148]	@ (8000c24 <MX_TIM2_Init+0xe8>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b94:	4823      	ldr	r0, [pc, #140]	@ (8000c24 <MX_TIM2_Init+0xe8>)
 8000b96:	f002 fc65 	bl	8003464 <HAL_TIM_Base_Init>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000ba0:	f000 f948 	bl	8000e34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ba4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ba8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000baa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000bae:	4619      	mov	r1, r3
 8000bb0:	481c      	ldr	r0, [pc, #112]	@ (8000c24 <MX_TIM2_Init+0xe8>)
 8000bb2:	f002 fe89 	bl	80038c8 <HAL_TIM_ConfigClockSource>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000bbc:	f000 f93a 	bl	8000e34 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000bc0:	4818      	ldr	r0, [pc, #96]	@ (8000c24 <MX_TIM2_Init+0xe8>)
 8000bc2:	f002 fc9e 	bl	8003502 <HAL_TIM_PWM_Init>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000bcc:	f000 f932 	bl	8000e34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bd8:	f107 0320 	add.w	r3, r7, #32
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4811      	ldr	r0, [pc, #68]	@ (8000c24 <MX_TIM2_Init+0xe8>)
 8000be0:	f003 fa56 	bl	8004090 <HAL_TIMEx_MasterConfigSynchronization>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000bea:	f000 f923 	bl	8000e34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bee:	2360      	movs	r3, #96	@ 0x60
 8000bf0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bfe:	1d3b      	adds	r3, r7, #4
 8000c00:	2200      	movs	r2, #0
 8000c02:	4619      	mov	r1, r3
 8000c04:	4807      	ldr	r0, [pc, #28]	@ (8000c24 <MX_TIM2_Init+0xe8>)
 8000c06:	f002 fd9d 	bl	8003744 <HAL_TIM_PWM_ConfigChannel>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000c10:	f000 f910 	bl	8000e34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000c14:	4803      	ldr	r0, [pc, #12]	@ (8000c24 <MX_TIM2_Init+0xe8>)
 8000c16:	f000 fa95 	bl	8001144 <HAL_TIM_MspPostInit>

}
 8000c1a:	bf00      	nop
 8000c1c:	3738      	adds	r7, #56	@ 0x38
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	20000330 	.word	0x20000330

08000c28 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c2c:	4b11      	ldr	r3, [pc, #68]	@ (8000c74 <MX_USART3_UART_Init+0x4c>)
 8000c2e:	4a12      	ldr	r2, [pc, #72]	@ (8000c78 <MX_USART3_UART_Init+0x50>)
 8000c30:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c32:	4b10      	ldr	r3, [pc, #64]	@ (8000c74 <MX_USART3_UART_Init+0x4c>)
 8000c34:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c38:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c74 <MX_USART3_UART_Init+0x4c>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c40:	4b0c      	ldr	r3, [pc, #48]	@ (8000c74 <MX_USART3_UART_Init+0x4c>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c46:	4b0b      	ldr	r3, [pc, #44]	@ (8000c74 <MX_USART3_UART_Init+0x4c>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c4c:	4b09      	ldr	r3, [pc, #36]	@ (8000c74 <MX_USART3_UART_Init+0x4c>)
 8000c4e:	220c      	movs	r2, #12
 8000c50:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c52:	4b08      	ldr	r3, [pc, #32]	@ (8000c74 <MX_USART3_UART_Init+0x4c>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c58:	4b06      	ldr	r3, [pc, #24]	@ (8000c74 <MX_USART3_UART_Init+0x4c>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c5e:	4805      	ldr	r0, [pc, #20]	@ (8000c74 <MX_USART3_UART_Init+0x4c>)
 8000c60:	f003 fa92 	bl	8004188 <HAL_UART_Init>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000c6a:	f000 f8e3 	bl	8000e34 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	20000378 	.word	0x20000378
 8000c78:	40004800 	.word	0x40004800

08000c7c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000c80:	4b14      	ldr	r3, [pc, #80]	@ (8000cd4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c82:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000c86:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000c88:	4b12      	ldr	r3, [pc, #72]	@ (8000cd4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c8a:	2204      	movs	r2, #4
 8000c8c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000c8e:	4b11      	ldr	r3, [pc, #68]	@ (8000cd4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c90:	2202      	movs	r2, #2
 8000c92:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000c94:	4b0f      	ldr	r3, [pc, #60]	@ (8000cd4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000c9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000cd4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c9c:	2202      	movs	r2, #2
 8000c9e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000ca0:	4b0c      	ldr	r3, [pc, #48]	@ (8000cd4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000ca6:	4b0b      	ldr	r3, [pc, #44]	@ (8000cd4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000cac:	4b09      	ldr	r3, [pc, #36]	@ (8000cd4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000cb2:	4b08      	ldr	r3, [pc, #32]	@ (8000cd4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000cb8:	4b06      	ldr	r3, [pc, #24]	@ (8000cd4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000cbe:	4805      	ldr	r0, [pc, #20]	@ (8000cd4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cc0:	f001 fe29 	bl	8002916 <HAL_PCD_Init>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000cca:	f000 f8b3 	bl	8000e34 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000cce:	bf00      	nop
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	200003c0 	.word	0x200003c0

08000cd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b08c      	sub	sp, #48	@ 0x30
 8000cdc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cde:	f107 031c 	add.w	r3, r7, #28
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
 8000ce6:	605a      	str	r2, [r3, #4]
 8000ce8:	609a      	str	r2, [r3, #8]
 8000cea:	60da      	str	r2, [r3, #12]
 8000cec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cee:	2300      	movs	r3, #0
 8000cf0:	61bb      	str	r3, [r7, #24]
 8000cf2:	4b4c      	ldr	r3, [pc, #304]	@ (8000e24 <MX_GPIO_Init+0x14c>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf6:	4a4b      	ldr	r2, [pc, #300]	@ (8000e24 <MX_GPIO_Init+0x14c>)
 8000cf8:	f043 0304 	orr.w	r3, r3, #4
 8000cfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cfe:	4b49      	ldr	r3, [pc, #292]	@ (8000e24 <MX_GPIO_Init+0x14c>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d02:	f003 0304 	and.w	r3, r3, #4
 8000d06:	61bb      	str	r3, [r7, #24]
 8000d08:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	617b      	str	r3, [r7, #20]
 8000d0e:	4b45      	ldr	r3, [pc, #276]	@ (8000e24 <MX_GPIO_Init+0x14c>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d12:	4a44      	ldr	r2, [pc, #272]	@ (8000e24 <MX_GPIO_Init+0x14c>)
 8000d14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d1a:	4b42      	ldr	r3, [pc, #264]	@ (8000e24 <MX_GPIO_Init+0x14c>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d22:	617b      	str	r3, [r7, #20]
 8000d24:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	613b      	str	r3, [r7, #16]
 8000d2a:	4b3e      	ldr	r3, [pc, #248]	@ (8000e24 <MX_GPIO_Init+0x14c>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2e:	4a3d      	ldr	r2, [pc, #244]	@ (8000e24 <MX_GPIO_Init+0x14c>)
 8000d30:	f043 0301 	orr.w	r3, r3, #1
 8000d34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d36:	4b3b      	ldr	r3, [pc, #236]	@ (8000e24 <MX_GPIO_Init+0x14c>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3a:	f003 0301 	and.w	r3, r3, #1
 8000d3e:	613b      	str	r3, [r7, #16]
 8000d40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	60fb      	str	r3, [r7, #12]
 8000d46:	4b37      	ldr	r3, [pc, #220]	@ (8000e24 <MX_GPIO_Init+0x14c>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4a:	4a36      	ldr	r2, [pc, #216]	@ (8000e24 <MX_GPIO_Init+0x14c>)
 8000d4c:	f043 0302 	orr.w	r3, r3, #2
 8000d50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d52:	4b34      	ldr	r3, [pc, #208]	@ (8000e24 <MX_GPIO_Init+0x14c>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d56:	f003 0302 	and.w	r3, r3, #2
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	60bb      	str	r3, [r7, #8]
 8000d62:	4b30      	ldr	r3, [pc, #192]	@ (8000e24 <MX_GPIO_Init+0x14c>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d66:	4a2f      	ldr	r2, [pc, #188]	@ (8000e24 <MX_GPIO_Init+0x14c>)
 8000d68:	f043 0308 	orr.w	r3, r3, #8
 8000d6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d6e:	4b2d      	ldr	r3, [pc, #180]	@ (8000e24 <MX_GPIO_Init+0x14c>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d72:	f003 0308 	and.w	r3, r3, #8
 8000d76:	60bb      	str	r3, [r7, #8]
 8000d78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	607b      	str	r3, [r7, #4]
 8000d7e:	4b29      	ldr	r3, [pc, #164]	@ (8000e24 <MX_GPIO_Init+0x14c>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d82:	4a28      	ldr	r2, [pc, #160]	@ (8000e24 <MX_GPIO_Init+0x14c>)
 8000d84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d8a:	4b26      	ldr	r3, [pc, #152]	@ (8000e24 <MX_GPIO_Init+0x14c>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d92:	607b      	str	r3, [r7, #4]
 8000d94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000d96:	2200      	movs	r2, #0
 8000d98:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000d9c:	4822      	ldr	r0, [pc, #136]	@ (8000e28 <MX_GPIO_Init+0x150>)
 8000d9e:	f001 fda1 	bl	80028e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000da2:	2200      	movs	r2, #0
 8000da4:	2140      	movs	r1, #64	@ 0x40
 8000da6:	4821      	ldr	r0, [pc, #132]	@ (8000e2c <MX_GPIO_Init+0x154>)
 8000da8:	f001 fd9c 	bl	80028e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000dac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000db0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000db2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000db6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db8:	2300      	movs	r3, #0
 8000dba:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000dbc:	f107 031c 	add.w	r3, r7, #28
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	481b      	ldr	r0, [pc, #108]	@ (8000e30 <MX_GPIO_Init+0x158>)
 8000dc4:	f001 fbe2 	bl	800258c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000dc8:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000dcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dda:	f107 031c 	add.w	r3, r7, #28
 8000dde:	4619      	mov	r1, r3
 8000de0:	4811      	ldr	r0, [pc, #68]	@ (8000e28 <MX_GPIO_Init+0x150>)
 8000de2:	f001 fbd3 	bl	800258c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000de6:	2340      	movs	r3, #64	@ 0x40
 8000de8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dea:	2301      	movs	r3, #1
 8000dec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	2300      	movs	r3, #0
 8000df0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df2:	2300      	movs	r3, #0
 8000df4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000df6:	f107 031c 	add.w	r3, r7, #28
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	480b      	ldr	r0, [pc, #44]	@ (8000e2c <MX_GPIO_Init+0x154>)
 8000dfe:	f001 fbc5 	bl	800258c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000e02:	2380      	movs	r3, #128	@ 0x80
 8000e04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e06:	2300      	movs	r3, #0
 8000e08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000e0e:	f107 031c 	add.w	r3, r7, #28
 8000e12:	4619      	mov	r1, r3
 8000e14:	4805      	ldr	r0, [pc, #20]	@ (8000e2c <MX_GPIO_Init+0x154>)
 8000e16:	f001 fbb9 	bl	800258c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e1a:	bf00      	nop
 8000e1c:	3730      	adds	r7, #48	@ 0x30
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	40023800 	.word	0x40023800
 8000e28:	40020400 	.word	0x40020400
 8000e2c:	40021800 	.word	0x40021800
 8000e30:	40020800 	.word	0x40020800

08000e34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e38:	b672      	cpsid	i
}
 8000e3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e3c:	bf00      	nop
 8000e3e:	e7fd      	b.n	8000e3c <Error_Handler+0x8>

08000e40 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e46:	2300      	movs	r3, #0
 8000e48:	607b      	str	r3, [r7, #4]
 8000e4a:	4b10      	ldr	r3, [pc, #64]	@ (8000e8c <HAL_MspInit+0x4c>)
 8000e4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e4e:	4a0f      	ldr	r2, [pc, #60]	@ (8000e8c <HAL_MspInit+0x4c>)
 8000e50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e54:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e56:	4b0d      	ldr	r3, [pc, #52]	@ (8000e8c <HAL_MspInit+0x4c>)
 8000e58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e5e:	607b      	str	r3, [r7, #4]
 8000e60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	603b      	str	r3, [r7, #0]
 8000e66:	4b09      	ldr	r3, [pc, #36]	@ (8000e8c <HAL_MspInit+0x4c>)
 8000e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e6a:	4a08      	ldr	r2, [pc, #32]	@ (8000e8c <HAL_MspInit+0x4c>)
 8000e6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e70:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e72:	4b06      	ldr	r3, [pc, #24]	@ (8000e8c <HAL_MspInit+0x4c>)
 8000e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e7a:	603b      	str	r3, [r7, #0]
 8000e7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e7e:	bf00      	nop
 8000e80:	370c      	adds	r7, #12
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	40023800 	.word	0x40023800

08000e90 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b08c      	sub	sp, #48	@ 0x30
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e98:	f107 031c 	add.w	r3, r7, #28
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	605a      	str	r2, [r3, #4]
 8000ea2:	609a      	str	r2, [r3, #8]
 8000ea4:	60da      	str	r2, [r3, #12]
 8000ea6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a2e      	ldr	r2, [pc, #184]	@ (8000f68 <HAL_ADC_MspInit+0xd8>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d128      	bne.n	8000f04 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	61bb      	str	r3, [r7, #24]
 8000eb6:	4b2d      	ldr	r3, [pc, #180]	@ (8000f6c <HAL_ADC_MspInit+0xdc>)
 8000eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eba:	4a2c      	ldr	r2, [pc, #176]	@ (8000f6c <HAL_ADC_MspInit+0xdc>)
 8000ebc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ec0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ec2:	4b2a      	ldr	r3, [pc, #168]	@ (8000f6c <HAL_ADC_MspInit+0xdc>)
 8000ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ec6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000eca:	61bb      	str	r3, [r7, #24]
 8000ecc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ece:	2300      	movs	r3, #0
 8000ed0:	617b      	str	r3, [r7, #20]
 8000ed2:	4b26      	ldr	r3, [pc, #152]	@ (8000f6c <HAL_ADC_MspInit+0xdc>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed6:	4a25      	ldr	r2, [pc, #148]	@ (8000f6c <HAL_ADC_MspInit+0xdc>)
 8000ed8:	f043 0301 	orr.w	r3, r3, #1
 8000edc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ede:	4b23      	ldr	r3, [pc, #140]	@ (8000f6c <HAL_ADC_MspInit+0xdc>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee2:	f003 0301 	and.w	r3, r3, #1
 8000ee6:	617b      	str	r3, [r7, #20]
 8000ee8:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000eea:	2308      	movs	r3, #8
 8000eec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000eee:	2303      	movs	r3, #3
 8000ef0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef6:	f107 031c 	add.w	r3, r7, #28
 8000efa:	4619      	mov	r1, r3
 8000efc:	481c      	ldr	r0, [pc, #112]	@ (8000f70 <HAL_ADC_MspInit+0xe0>)
 8000efe:	f001 fb45 	bl	800258c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000f02:	e02c      	b.n	8000f5e <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a1a      	ldr	r2, [pc, #104]	@ (8000f74 <HAL_ADC_MspInit+0xe4>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d127      	bne.n	8000f5e <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	613b      	str	r3, [r7, #16]
 8000f12:	4b16      	ldr	r3, [pc, #88]	@ (8000f6c <HAL_ADC_MspInit+0xdc>)
 8000f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f16:	4a15      	ldr	r2, [pc, #84]	@ (8000f6c <HAL_ADC_MspInit+0xdc>)
 8000f18:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f1e:	4b13      	ldr	r3, [pc, #76]	@ (8000f6c <HAL_ADC_MspInit+0xdc>)
 8000f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f22:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000f26:	613b      	str	r3, [r7, #16]
 8000f28:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	60fb      	str	r3, [r7, #12]
 8000f2e:	4b0f      	ldr	r3, [pc, #60]	@ (8000f6c <HAL_ADC_MspInit+0xdc>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f32:	4a0e      	ldr	r2, [pc, #56]	@ (8000f6c <HAL_ADC_MspInit+0xdc>)
 8000f34:	f043 0301 	orr.w	r3, r3, #1
 8000f38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000f6c <HAL_ADC_MspInit+0xdc>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3e:	f003 0301 	and.w	r3, r3, #1
 8000f42:	60fb      	str	r3, [r7, #12]
 8000f44:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000f46:	2310      	movs	r3, #16
 8000f48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f52:	f107 031c 	add.w	r3, r7, #28
 8000f56:	4619      	mov	r1, r3
 8000f58:	4805      	ldr	r0, [pc, #20]	@ (8000f70 <HAL_ADC_MspInit+0xe0>)
 8000f5a:	f001 fb17 	bl	800258c <HAL_GPIO_Init>
}
 8000f5e:	bf00      	nop
 8000f60:	3730      	adds	r7, #48	@ 0x30
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40012000 	.word	0x40012000
 8000f6c:	40023800 	.word	0x40023800
 8000f70:	40020000 	.word	0x40020000
 8000f74:	40012100 	.word	0x40012100

08000f78 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b08e      	sub	sp, #56	@ 0x38
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
 8000f8c:	60da      	str	r2, [r3, #12]
 8000f8e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a55      	ldr	r2, [pc, #340]	@ (80010ec <HAL_ETH_MspInit+0x174>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	f040 80a4 	bne.w	80010e4 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	623b      	str	r3, [r7, #32]
 8000fa0:	4b53      	ldr	r3, [pc, #332]	@ (80010f0 <HAL_ETH_MspInit+0x178>)
 8000fa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa4:	4a52      	ldr	r2, [pc, #328]	@ (80010f0 <HAL_ETH_MspInit+0x178>)
 8000fa6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000faa:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fac:	4b50      	ldr	r3, [pc, #320]	@ (80010f0 <HAL_ETH_MspInit+0x178>)
 8000fae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000fb4:	623b      	str	r3, [r7, #32]
 8000fb6:	6a3b      	ldr	r3, [r7, #32]
 8000fb8:	2300      	movs	r3, #0
 8000fba:	61fb      	str	r3, [r7, #28]
 8000fbc:	4b4c      	ldr	r3, [pc, #304]	@ (80010f0 <HAL_ETH_MspInit+0x178>)
 8000fbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc0:	4a4b      	ldr	r2, [pc, #300]	@ (80010f0 <HAL_ETH_MspInit+0x178>)
 8000fc2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000fc6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fc8:	4b49      	ldr	r3, [pc, #292]	@ (80010f0 <HAL_ETH_MspInit+0x178>)
 8000fca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fcc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000fd0:	61fb      	str	r3, [r7, #28]
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	61bb      	str	r3, [r7, #24]
 8000fd8:	4b45      	ldr	r3, [pc, #276]	@ (80010f0 <HAL_ETH_MspInit+0x178>)
 8000fda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fdc:	4a44      	ldr	r2, [pc, #272]	@ (80010f0 <HAL_ETH_MspInit+0x178>)
 8000fde:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000fe2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fe4:	4b42      	ldr	r3, [pc, #264]	@ (80010f0 <HAL_ETH_MspInit+0x178>)
 8000fe6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000fec:	61bb      	str	r3, [r7, #24]
 8000fee:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	617b      	str	r3, [r7, #20]
 8000ff4:	4b3e      	ldr	r3, [pc, #248]	@ (80010f0 <HAL_ETH_MspInit+0x178>)
 8000ff6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff8:	4a3d      	ldr	r2, [pc, #244]	@ (80010f0 <HAL_ETH_MspInit+0x178>)
 8000ffa:	f043 0304 	orr.w	r3, r3, #4
 8000ffe:	6313      	str	r3, [r2, #48]	@ 0x30
 8001000:	4b3b      	ldr	r3, [pc, #236]	@ (80010f0 <HAL_ETH_MspInit+0x178>)
 8001002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001004:	f003 0304 	and.w	r3, r3, #4
 8001008:	617b      	str	r3, [r7, #20]
 800100a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800100c:	2300      	movs	r3, #0
 800100e:	613b      	str	r3, [r7, #16]
 8001010:	4b37      	ldr	r3, [pc, #220]	@ (80010f0 <HAL_ETH_MspInit+0x178>)
 8001012:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001014:	4a36      	ldr	r2, [pc, #216]	@ (80010f0 <HAL_ETH_MspInit+0x178>)
 8001016:	f043 0301 	orr.w	r3, r3, #1
 800101a:	6313      	str	r3, [r2, #48]	@ 0x30
 800101c:	4b34      	ldr	r3, [pc, #208]	@ (80010f0 <HAL_ETH_MspInit+0x178>)
 800101e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001020:	f003 0301 	and.w	r3, r3, #1
 8001024:	613b      	str	r3, [r7, #16]
 8001026:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001028:	2300      	movs	r3, #0
 800102a:	60fb      	str	r3, [r7, #12]
 800102c:	4b30      	ldr	r3, [pc, #192]	@ (80010f0 <HAL_ETH_MspInit+0x178>)
 800102e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001030:	4a2f      	ldr	r2, [pc, #188]	@ (80010f0 <HAL_ETH_MspInit+0x178>)
 8001032:	f043 0302 	orr.w	r3, r3, #2
 8001036:	6313      	str	r3, [r2, #48]	@ 0x30
 8001038:	4b2d      	ldr	r3, [pc, #180]	@ (80010f0 <HAL_ETH_MspInit+0x178>)
 800103a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103c:	f003 0302 	and.w	r3, r3, #2
 8001040:	60fb      	str	r3, [r7, #12]
 8001042:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001044:	2300      	movs	r3, #0
 8001046:	60bb      	str	r3, [r7, #8]
 8001048:	4b29      	ldr	r3, [pc, #164]	@ (80010f0 <HAL_ETH_MspInit+0x178>)
 800104a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104c:	4a28      	ldr	r2, [pc, #160]	@ (80010f0 <HAL_ETH_MspInit+0x178>)
 800104e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001052:	6313      	str	r3, [r2, #48]	@ 0x30
 8001054:	4b26      	ldr	r3, [pc, #152]	@ (80010f0 <HAL_ETH_MspInit+0x178>)
 8001056:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001058:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800105c:	60bb      	str	r3, [r7, #8]
 800105e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001060:	2332      	movs	r3, #50	@ 0x32
 8001062:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001064:	2302      	movs	r3, #2
 8001066:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001068:	2300      	movs	r3, #0
 800106a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800106c:	2303      	movs	r3, #3
 800106e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001070:	230b      	movs	r3, #11
 8001072:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001074:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001078:	4619      	mov	r1, r3
 800107a:	481e      	ldr	r0, [pc, #120]	@ (80010f4 <HAL_ETH_MspInit+0x17c>)
 800107c:	f001 fa86 	bl	800258c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001080:	2386      	movs	r3, #134	@ 0x86
 8001082:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001084:	2302      	movs	r3, #2
 8001086:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001088:	2300      	movs	r3, #0
 800108a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800108c:	2303      	movs	r3, #3
 800108e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001090:	230b      	movs	r3, #11
 8001092:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001094:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001098:	4619      	mov	r1, r3
 800109a:	4817      	ldr	r0, [pc, #92]	@ (80010f8 <HAL_ETH_MspInit+0x180>)
 800109c:	f001 fa76 	bl	800258c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80010a0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010a4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a6:	2302      	movs	r3, #2
 80010a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010aa:	2300      	movs	r3, #0
 80010ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ae:	2303      	movs	r3, #3
 80010b0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010b2:	230b      	movs	r3, #11
 80010b4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80010b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010ba:	4619      	mov	r1, r3
 80010bc:	480f      	ldr	r0, [pc, #60]	@ (80010fc <HAL_ETH_MspInit+0x184>)
 80010be:	f001 fa65 	bl	800258c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80010c2:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80010c6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c8:	2302      	movs	r3, #2
 80010ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010cc:	2300      	movs	r3, #0
 80010ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d0:	2303      	movs	r3, #3
 80010d2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010d4:	230b      	movs	r3, #11
 80010d6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010dc:	4619      	mov	r1, r3
 80010de:	4808      	ldr	r0, [pc, #32]	@ (8001100 <HAL_ETH_MspInit+0x188>)
 80010e0:	f001 fa54 	bl	800258c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80010e4:	bf00      	nop
 80010e6:	3738      	adds	r7, #56	@ 0x38
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	40028000 	.word	0x40028000
 80010f0:	40023800 	.word	0x40023800
 80010f4:	40020800 	.word	0x40020800
 80010f8:	40020000 	.word	0x40020000
 80010fc:	40020400 	.word	0x40020400
 8001100:	40021800 	.word	0x40021800

08001104 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001104:	b480      	push	{r7}
 8001106:	b085      	sub	sp, #20
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001114:	d10d      	bne.n	8001132 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	60fb      	str	r3, [r7, #12]
 800111a:	4b09      	ldr	r3, [pc, #36]	@ (8001140 <HAL_TIM_Base_MspInit+0x3c>)
 800111c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800111e:	4a08      	ldr	r2, [pc, #32]	@ (8001140 <HAL_TIM_Base_MspInit+0x3c>)
 8001120:	f043 0301 	orr.w	r3, r3, #1
 8001124:	6413      	str	r3, [r2, #64]	@ 0x40
 8001126:	4b06      	ldr	r3, [pc, #24]	@ (8001140 <HAL_TIM_Base_MspInit+0x3c>)
 8001128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800112a:	f003 0301 	and.w	r3, r3, #1
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001132:	bf00      	nop
 8001134:	3714      	adds	r7, #20
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	40023800 	.word	0x40023800

08001144 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b088      	sub	sp, #32
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114c:	f107 030c 	add.w	r3, r7, #12
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	60da      	str	r2, [r3, #12]
 800115a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001164:	d11d      	bne.n	80011a2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	60bb      	str	r3, [r7, #8]
 800116a:	4b10      	ldr	r3, [pc, #64]	@ (80011ac <HAL_TIM_MspPostInit+0x68>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116e:	4a0f      	ldr	r2, [pc, #60]	@ (80011ac <HAL_TIM_MspPostInit+0x68>)
 8001170:	f043 0301 	orr.w	r3, r3, #1
 8001174:	6313      	str	r3, [r2, #48]	@ 0x30
 8001176:	4b0d      	ldr	r3, [pc, #52]	@ (80011ac <HAL_TIM_MspPostInit+0x68>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117a:	f003 0301 	and.w	r3, r3, #1
 800117e:	60bb      	str	r3, [r7, #8]
 8001180:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001182:	2320      	movs	r3, #32
 8001184:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001186:	2302      	movs	r3, #2
 8001188:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118a:	2300      	movs	r3, #0
 800118c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118e:	2300      	movs	r3, #0
 8001190:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001192:	2301      	movs	r3, #1
 8001194:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001196:	f107 030c 	add.w	r3, r7, #12
 800119a:	4619      	mov	r1, r3
 800119c:	4804      	ldr	r0, [pc, #16]	@ (80011b0 <HAL_TIM_MspPostInit+0x6c>)
 800119e:	f001 f9f5 	bl	800258c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80011a2:	bf00      	nop
 80011a4:	3720      	adds	r7, #32
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	40023800 	.word	0x40023800
 80011b0:	40020000 	.word	0x40020000

080011b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b08a      	sub	sp, #40	@ 0x28
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011bc:	f107 0314 	add.w	r3, r7, #20
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	609a      	str	r2, [r3, #8]
 80011c8:	60da      	str	r2, [r3, #12]
 80011ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a19      	ldr	r2, [pc, #100]	@ (8001238 <HAL_UART_MspInit+0x84>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d12c      	bne.n	8001230 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	613b      	str	r3, [r7, #16]
 80011da:	4b18      	ldr	r3, [pc, #96]	@ (800123c <HAL_UART_MspInit+0x88>)
 80011dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011de:	4a17      	ldr	r2, [pc, #92]	@ (800123c <HAL_UART_MspInit+0x88>)
 80011e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80011e6:	4b15      	ldr	r3, [pc, #84]	@ (800123c <HAL_UART_MspInit+0x88>)
 80011e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80011ee:	613b      	str	r3, [r7, #16]
 80011f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	60fb      	str	r3, [r7, #12]
 80011f6:	4b11      	ldr	r3, [pc, #68]	@ (800123c <HAL_UART_MspInit+0x88>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fa:	4a10      	ldr	r2, [pc, #64]	@ (800123c <HAL_UART_MspInit+0x88>)
 80011fc:	f043 0308 	orr.w	r3, r3, #8
 8001200:	6313      	str	r3, [r2, #48]	@ 0x30
 8001202:	4b0e      	ldr	r3, [pc, #56]	@ (800123c <HAL_UART_MspInit+0x88>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001206:	f003 0308 	and.w	r3, r3, #8
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800120e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001212:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001214:	2302      	movs	r3, #2
 8001216:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001218:	2300      	movs	r3, #0
 800121a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800121c:	2303      	movs	r3, #3
 800121e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001220:	2307      	movs	r3, #7
 8001222:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001224:	f107 0314 	add.w	r3, r7, #20
 8001228:	4619      	mov	r1, r3
 800122a:	4805      	ldr	r0, [pc, #20]	@ (8001240 <HAL_UART_MspInit+0x8c>)
 800122c:	f001 f9ae 	bl	800258c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001230:	bf00      	nop
 8001232:	3728      	adds	r7, #40	@ 0x28
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	40004800 	.word	0x40004800
 800123c:	40023800 	.word	0x40023800
 8001240:	40020c00 	.word	0x40020c00

08001244 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b08a      	sub	sp, #40	@ 0x28
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124c:	f107 0314 	add.w	r3, r7, #20
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]
 800125a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001264:	d13f      	bne.n	80012e6 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	613b      	str	r3, [r7, #16]
 800126a:	4b21      	ldr	r3, [pc, #132]	@ (80012f0 <HAL_PCD_MspInit+0xac>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126e:	4a20      	ldr	r2, [pc, #128]	@ (80012f0 <HAL_PCD_MspInit+0xac>)
 8001270:	f043 0301 	orr.w	r3, r3, #1
 8001274:	6313      	str	r3, [r2, #48]	@ 0x30
 8001276:	4b1e      	ldr	r3, [pc, #120]	@ (80012f0 <HAL_PCD_MspInit+0xac>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127a:	f003 0301 	and.w	r3, r3, #1
 800127e:	613b      	str	r3, [r7, #16]
 8001280:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001282:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001286:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001288:	2302      	movs	r3, #2
 800128a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128c:	2300      	movs	r3, #0
 800128e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001290:	2303      	movs	r3, #3
 8001292:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001294:	230a      	movs	r3, #10
 8001296:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001298:	f107 0314 	add.w	r3, r7, #20
 800129c:	4619      	mov	r1, r3
 800129e:	4815      	ldr	r0, [pc, #84]	@ (80012f4 <HAL_PCD_MspInit+0xb0>)
 80012a0:	f001 f974 	bl	800258c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80012a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80012a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012aa:	2300      	movs	r3, #0
 80012ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ae:	2300      	movs	r3, #0
 80012b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80012b2:	f107 0314 	add.w	r3, r7, #20
 80012b6:	4619      	mov	r1, r3
 80012b8:	480e      	ldr	r0, [pc, #56]	@ (80012f4 <HAL_PCD_MspInit+0xb0>)
 80012ba:	f001 f967 	bl	800258c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80012be:	4b0c      	ldr	r3, [pc, #48]	@ (80012f0 <HAL_PCD_MspInit+0xac>)
 80012c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012c2:	4a0b      	ldr	r2, [pc, #44]	@ (80012f0 <HAL_PCD_MspInit+0xac>)
 80012c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012c8:	6353      	str	r3, [r2, #52]	@ 0x34
 80012ca:	2300      	movs	r3, #0
 80012cc:	60fb      	str	r3, [r7, #12]
 80012ce:	4b08      	ldr	r3, [pc, #32]	@ (80012f0 <HAL_PCD_MspInit+0xac>)
 80012d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012d2:	4a07      	ldr	r2, [pc, #28]	@ (80012f0 <HAL_PCD_MspInit+0xac>)
 80012d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80012da:	4b05      	ldr	r3, [pc, #20]	@ (80012f0 <HAL_PCD_MspInit+0xac>)
 80012dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80012e6:	bf00      	nop
 80012e8:	3728      	adds	r7, #40	@ 0x28
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40023800 	.word	0x40023800
 80012f4:	40020000 	.word	0x40020000

080012f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012fc:	bf00      	nop
 80012fe:	e7fd      	b.n	80012fc <NMI_Handler+0x4>

08001300 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001304:	bf00      	nop
 8001306:	e7fd      	b.n	8001304 <HardFault_Handler+0x4>

08001308 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800130c:	bf00      	nop
 800130e:	e7fd      	b.n	800130c <MemManage_Handler+0x4>

08001310 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001314:	bf00      	nop
 8001316:	e7fd      	b.n	8001314 <BusFault_Handler+0x4>

08001318 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800131c:	bf00      	nop
 800131e:	e7fd      	b.n	800131c <UsageFault_Handler+0x4>

08001320 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001324:	bf00      	nop
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr

0800132e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800132e:	b480      	push	{r7}
 8001330:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001332:	bf00      	nop
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001340:	bf00      	nop
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr

0800134a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800134a:	b580      	push	{r7, lr}
 800134c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800134e:	f000 f8c7 	bl	80014e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001352:	bf00      	nop
 8001354:	bd80      	pop	{r7, pc}
	...

08001358 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b086      	sub	sp, #24
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001360:	4a14      	ldr	r2, [pc, #80]	@ (80013b4 <_sbrk+0x5c>)
 8001362:	4b15      	ldr	r3, [pc, #84]	@ (80013b8 <_sbrk+0x60>)
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800136c:	4b13      	ldr	r3, [pc, #76]	@ (80013bc <_sbrk+0x64>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d102      	bne.n	800137a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001374:	4b11      	ldr	r3, [pc, #68]	@ (80013bc <_sbrk+0x64>)
 8001376:	4a12      	ldr	r2, [pc, #72]	@ (80013c0 <_sbrk+0x68>)
 8001378:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800137a:	4b10      	ldr	r3, [pc, #64]	@ (80013bc <_sbrk+0x64>)
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4413      	add	r3, r2
 8001382:	693a      	ldr	r2, [r7, #16]
 8001384:	429a      	cmp	r2, r3
 8001386:	d207      	bcs.n	8001398 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001388:	f003 fcea 	bl	8004d60 <__errno>
 800138c:	4603      	mov	r3, r0
 800138e:	220c      	movs	r2, #12
 8001390:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001392:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001396:	e009      	b.n	80013ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001398:	4b08      	ldr	r3, [pc, #32]	@ (80013bc <_sbrk+0x64>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800139e:	4b07      	ldr	r3, [pc, #28]	@ (80013bc <_sbrk+0x64>)
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4413      	add	r3, r2
 80013a6:	4a05      	ldr	r2, [pc, #20]	@ (80013bc <_sbrk+0x64>)
 80013a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013aa:	68fb      	ldr	r3, [r7, #12]
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3718      	adds	r7, #24
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	20030000 	.word	0x20030000
 80013b8:	00000400 	.word	0x00000400
 80013bc:	200008ac 	.word	0x200008ac
 80013c0:	20000a00 	.word	0x20000a00

080013c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013c8:	4b06      	ldr	r3, [pc, #24]	@ (80013e4 <SystemInit+0x20>)
 80013ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013ce:	4a05      	ldr	r2, [pc, #20]	@ (80013e4 <SystemInit+0x20>)
 80013d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013d8:	bf00      	nop
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	e000ed00 	.word	0xe000ed00

080013e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80013e8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001420 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80013ec:	f7ff ffea 	bl	80013c4 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013f0:	480c      	ldr	r0, [pc, #48]	@ (8001424 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013f2:	490d      	ldr	r1, [pc, #52]	@ (8001428 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013f4:	4a0d      	ldr	r2, [pc, #52]	@ (800142c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013f8:	e002      	b.n	8001400 <LoopCopyDataInit>

080013fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013fe:	3304      	adds	r3, #4

08001400 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001400:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001402:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001404:	d3f9      	bcc.n	80013fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001406:	4a0a      	ldr	r2, [pc, #40]	@ (8001430 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001408:	4c0a      	ldr	r4, [pc, #40]	@ (8001434 <LoopFillZerobss+0x22>)
  movs r3, #0
 800140a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800140c:	e001      	b.n	8001412 <LoopFillZerobss>

0800140e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800140e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001410:	3204      	adds	r2, #4

08001412 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001412:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001414:	d3fb      	bcc.n	800140e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001416:	f003 fca9 	bl	8004d6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800141a:	f7ff f9ff 	bl	800081c <main>
  bx  lr    
 800141e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001420:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001424:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001428:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800142c:	080056dc 	.word	0x080056dc
  ldr r2, =_sbss
 8001430:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001434:	200009fc 	.word	0x200009fc

08001438 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001438:	e7fe      	b.n	8001438 <ADC_IRQHandler>
	...

0800143c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001440:	4b0e      	ldr	r3, [pc, #56]	@ (800147c <HAL_Init+0x40>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a0d      	ldr	r2, [pc, #52]	@ (800147c <HAL_Init+0x40>)
 8001446:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800144a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800144c:	4b0b      	ldr	r3, [pc, #44]	@ (800147c <HAL_Init+0x40>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a0a      	ldr	r2, [pc, #40]	@ (800147c <HAL_Init+0x40>)
 8001452:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001456:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001458:	4b08      	ldr	r3, [pc, #32]	@ (800147c <HAL_Init+0x40>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a07      	ldr	r2, [pc, #28]	@ (800147c <HAL_Init+0x40>)
 800145e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001462:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001464:	2003      	movs	r0, #3
 8001466:	f000 fd0d 	bl	8001e84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800146a:	2000      	movs	r0, #0
 800146c:	f000 f808 	bl	8001480 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001470:	f7ff fce6 	bl	8000e40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001474:	2300      	movs	r3, #0
}
 8001476:	4618      	mov	r0, r3
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40023c00 	.word	0x40023c00

08001480 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001488:	4b12      	ldr	r3, [pc, #72]	@ (80014d4 <HAL_InitTick+0x54>)
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	4b12      	ldr	r3, [pc, #72]	@ (80014d8 <HAL_InitTick+0x58>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	4619      	mov	r1, r3
 8001492:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001496:	fbb3 f3f1 	udiv	r3, r3, r1
 800149a:	fbb2 f3f3 	udiv	r3, r2, r3
 800149e:	4618      	mov	r0, r3
 80014a0:	f000 fd17 	bl	8001ed2 <HAL_SYSTICK_Config>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e00e      	b.n	80014cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2b0f      	cmp	r3, #15
 80014b2:	d80a      	bhi.n	80014ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014b4:	2200      	movs	r2, #0
 80014b6:	6879      	ldr	r1, [r7, #4]
 80014b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80014bc:	f000 fced 	bl	8001e9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014c0:	4a06      	ldr	r2, [pc, #24]	@ (80014dc <HAL_InitTick+0x5c>)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014c6:	2300      	movs	r3, #0
 80014c8:	e000      	b.n	80014cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3708      	adds	r7, #8
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	20000000 	.word	0x20000000
 80014d8:	20000008 	.word	0x20000008
 80014dc:	20000004 	.word	0x20000004

080014e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014e4:	4b06      	ldr	r3, [pc, #24]	@ (8001500 <HAL_IncTick+0x20>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	461a      	mov	r2, r3
 80014ea:	4b06      	ldr	r3, [pc, #24]	@ (8001504 <HAL_IncTick+0x24>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4413      	add	r3, r2
 80014f0:	4a04      	ldr	r2, [pc, #16]	@ (8001504 <HAL_IncTick+0x24>)
 80014f2:	6013      	str	r3, [r2, #0]
}
 80014f4:	bf00      	nop
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	20000008 	.word	0x20000008
 8001504:	200008b0 	.word	0x200008b0

08001508 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  return uwTick;
 800150c:	4b03      	ldr	r3, [pc, #12]	@ (800151c <HAL_GetTick+0x14>)
 800150e:	681b      	ldr	r3, [r3, #0]
}
 8001510:	4618      	mov	r0, r3
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	200008b0 	.word	0x200008b0

08001520 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001528:	f7ff ffee 	bl	8001508 <HAL_GetTick>
 800152c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001538:	d005      	beq.n	8001546 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800153a:	4b0a      	ldr	r3, [pc, #40]	@ (8001564 <HAL_Delay+0x44>)
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	461a      	mov	r2, r3
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	4413      	add	r3, r2
 8001544:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001546:	bf00      	nop
 8001548:	f7ff ffde 	bl	8001508 <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	68fa      	ldr	r2, [r7, #12]
 8001554:	429a      	cmp	r2, r3
 8001556:	d8f7      	bhi.n	8001548 <HAL_Delay+0x28>
  {
  }
}
 8001558:	bf00      	nop
 800155a:	bf00      	nop
 800155c:	3710      	adds	r7, #16
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	20000008 	.word	0x20000008

08001568 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001570:	2300      	movs	r3, #0
 8001572:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d101      	bne.n	800157e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e033      	b.n	80015e6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001582:	2b00      	cmp	r3, #0
 8001584:	d109      	bne.n	800159a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f7ff fc82 	bl	8000e90 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2200      	movs	r2, #0
 8001590:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2200      	movs	r2, #0
 8001596:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800159e:	f003 0310 	and.w	r3, r3, #16
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d118      	bne.n	80015d8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015aa:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80015ae:	f023 0302 	bic.w	r3, r3, #2
 80015b2:	f043 0202 	orr.w	r2, r3, #2
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f000 fab4 	bl	8001b28 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2200      	movs	r2, #0
 80015c4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ca:	f023 0303 	bic.w	r3, r3, #3
 80015ce:	f043 0201 	orr.w	r2, r3, #1
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	641a      	str	r2, [r3, #64]	@ 0x40
 80015d6:	e001      	b.n	80015dc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2200      	movs	r2, #0
 80015e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80015e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3710      	adds	r7, #16
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
	...

080015f0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b085      	sub	sp, #20
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80015f8:	2300      	movs	r3, #0
 80015fa:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001602:	2b01      	cmp	r3, #1
 8001604:	d101      	bne.n	800160a <HAL_ADC_Start+0x1a>
 8001606:	2302      	movs	r3, #2
 8001608:	e0b2      	b.n	8001770 <HAL_ADC_Start+0x180>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2201      	movs	r2, #1
 800160e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	f003 0301 	and.w	r3, r3, #1
 800161c:	2b01      	cmp	r3, #1
 800161e:	d018      	beq.n	8001652 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	689a      	ldr	r2, [r3, #8]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f042 0201 	orr.w	r2, r2, #1
 800162e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001630:	4b52      	ldr	r3, [pc, #328]	@ (800177c <HAL_ADC_Start+0x18c>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a52      	ldr	r2, [pc, #328]	@ (8001780 <HAL_ADC_Start+0x190>)
 8001636:	fba2 2303 	umull	r2, r3, r2, r3
 800163a:	0c9a      	lsrs	r2, r3, #18
 800163c:	4613      	mov	r3, r2
 800163e:	005b      	lsls	r3, r3, #1
 8001640:	4413      	add	r3, r2
 8001642:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001644:	e002      	b.n	800164c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	3b01      	subs	r3, #1
 800164a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d1f9      	bne.n	8001646 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	f003 0301 	and.w	r3, r3, #1
 800165c:	2b01      	cmp	r3, #1
 800165e:	d17a      	bne.n	8001756 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001664:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001668:	f023 0301 	bic.w	r3, r3, #1
 800166c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800167e:	2b00      	cmp	r3, #0
 8001680:	d007      	beq.n	8001692 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001686:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800168a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001696:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800169a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800169e:	d106      	bne.n	80016ae <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016a4:	f023 0206 	bic.w	r2, r3, #6
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	645a      	str	r2, [r3, #68]	@ 0x44
 80016ac:	e002      	b.n	80016b4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2200      	movs	r2, #0
 80016b2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2200      	movs	r2, #0
 80016b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016bc:	4b31      	ldr	r3, [pc, #196]	@ (8001784 <HAL_ADC_Start+0x194>)
 80016be:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80016c8:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f003 031f 	and.w	r3, r3, #31
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d12a      	bne.n	800172c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a2b      	ldr	r2, [pc, #172]	@ (8001788 <HAL_ADC_Start+0x198>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d015      	beq.n	800170c <HAL_ADC_Start+0x11c>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a29      	ldr	r2, [pc, #164]	@ (800178c <HAL_ADC_Start+0x19c>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d105      	bne.n	80016f6 <HAL_ADC_Start+0x106>
 80016ea:	4b26      	ldr	r3, [pc, #152]	@ (8001784 <HAL_ADC_Start+0x194>)
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	f003 031f 	and.w	r3, r3, #31
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d00a      	beq.n	800170c <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a25      	ldr	r2, [pc, #148]	@ (8001790 <HAL_ADC_Start+0x1a0>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d136      	bne.n	800176e <HAL_ADC_Start+0x17e>
 8001700:	4b20      	ldr	r3, [pc, #128]	@ (8001784 <HAL_ADC_Start+0x194>)
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f003 0310 	and.w	r3, r3, #16
 8001708:	2b00      	cmp	r3, #0
 800170a:	d130      	bne.n	800176e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d129      	bne.n	800176e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	689a      	ldr	r2, [r3, #8]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001728:	609a      	str	r2, [r3, #8]
 800172a:	e020      	b.n	800176e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a15      	ldr	r2, [pc, #84]	@ (8001788 <HAL_ADC_Start+0x198>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d11b      	bne.n	800176e <HAL_ADC_Start+0x17e>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001740:	2b00      	cmp	r3, #0
 8001742:	d114      	bne.n	800176e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	689a      	ldr	r2, [r3, #8]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001752:	609a      	str	r2, [r3, #8]
 8001754:	e00b      	b.n	800176e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800175a:	f043 0210 	orr.w	r2, r3, #16
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001766:	f043 0201 	orr.w	r2, r3, #1
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800176e:	2300      	movs	r3, #0
}
 8001770:	4618      	mov	r0, r3
 8001772:	3714      	adds	r7, #20
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr
 800177c:	20000000 	.word	0x20000000
 8001780:	431bde83 	.word	0x431bde83
 8001784:	40012300 	.word	0x40012300
 8001788:	40012000 	.word	0x40012000
 800178c:	40012100 	.word	0x40012100
 8001790:	40012200 	.word	0x40012200

08001794 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800179e:	2300      	movs	r3, #0
 80017a0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80017b0:	d113      	bne.n	80017da <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80017bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80017c0:	d10b      	bne.n	80017da <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017c6:	f043 0220 	orr.w	r2, r3, #32
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2200      	movs	r2, #0
 80017d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e063      	b.n	80018a2 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80017da:	f7ff fe95 	bl	8001508 <HAL_GetTick>
 80017de:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80017e0:	e021      	b.n	8001826 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80017e8:	d01d      	beq.n	8001826 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d007      	beq.n	8001800 <HAL_ADC_PollForConversion+0x6c>
 80017f0:	f7ff fe8a 	bl	8001508 <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	683a      	ldr	r2, [r7, #0]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d212      	bcs.n	8001826 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0302 	and.w	r3, r3, #2
 800180a:	2b02      	cmp	r3, #2
 800180c:	d00b      	beq.n	8001826 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001812:	f043 0204 	orr.w	r2, r3, #4
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2200      	movs	r2, #0
 800181e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e03d      	b.n	80018a2 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 0302 	and.w	r3, r3, #2
 8001830:	2b02      	cmp	r3, #2
 8001832:	d1d6      	bne.n	80017e2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f06f 0212 	mvn.w	r2, #18
 800183c:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001842:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001854:	2b00      	cmp	r3, #0
 8001856:	d123      	bne.n	80018a0 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800185c:	2b00      	cmp	r3, #0
 800185e:	d11f      	bne.n	80018a0 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001866:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800186a:	2b00      	cmp	r3, #0
 800186c:	d006      	beq.n	800187c <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001878:	2b00      	cmp	r3, #0
 800187a:	d111      	bne.n	80018a0 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001880:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800188c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001890:	2b00      	cmp	r3, #0
 8001892:	d105      	bne.n	80018a0 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001898:	f043 0201 	orr.w	r2, r3, #1
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80018a0:	2300      	movs	r3, #0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3710      	adds	r7, #16
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}

080018aa <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80018aa:	b480      	push	{r7}
 80018ac:	b083      	sub	sp, #12
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	370c      	adds	r7, #12
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b085      	sub	sp, #20
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80018ce:	2300      	movs	r3, #0
 80018d0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d101      	bne.n	80018e0 <HAL_ADC_ConfigChannel+0x1c>
 80018dc:	2302      	movs	r3, #2
 80018de:	e113      	b.n	8001b08 <HAL_ADC_ConfigChannel+0x244>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2201      	movs	r2, #1
 80018e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2b09      	cmp	r3, #9
 80018ee:	d925      	bls.n	800193c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	68d9      	ldr	r1, [r3, #12]
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	461a      	mov	r2, r3
 80018fe:	4613      	mov	r3, r2
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	4413      	add	r3, r2
 8001904:	3b1e      	subs	r3, #30
 8001906:	2207      	movs	r2, #7
 8001908:	fa02 f303 	lsl.w	r3, r2, r3
 800190c:	43da      	mvns	r2, r3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	400a      	ands	r2, r1
 8001914:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	68d9      	ldr	r1, [r3, #12]
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	689a      	ldr	r2, [r3, #8]
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	b29b      	uxth	r3, r3
 8001926:	4618      	mov	r0, r3
 8001928:	4603      	mov	r3, r0
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	4403      	add	r3, r0
 800192e:	3b1e      	subs	r3, #30
 8001930:	409a      	lsls	r2, r3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	430a      	orrs	r2, r1
 8001938:	60da      	str	r2, [r3, #12]
 800193a:	e022      	b.n	8001982 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	6919      	ldr	r1, [r3, #16]
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	b29b      	uxth	r3, r3
 8001948:	461a      	mov	r2, r3
 800194a:	4613      	mov	r3, r2
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	4413      	add	r3, r2
 8001950:	2207      	movs	r2, #7
 8001952:	fa02 f303 	lsl.w	r3, r2, r3
 8001956:	43da      	mvns	r2, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	400a      	ands	r2, r1
 800195e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	6919      	ldr	r1, [r3, #16]
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	689a      	ldr	r2, [r3, #8]
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	b29b      	uxth	r3, r3
 8001970:	4618      	mov	r0, r3
 8001972:	4603      	mov	r3, r0
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	4403      	add	r3, r0
 8001978:	409a      	lsls	r2, r3
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	430a      	orrs	r2, r1
 8001980:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	2b06      	cmp	r3, #6
 8001988:	d824      	bhi.n	80019d4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685a      	ldr	r2, [r3, #4]
 8001994:	4613      	mov	r3, r2
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	4413      	add	r3, r2
 800199a:	3b05      	subs	r3, #5
 800199c:	221f      	movs	r2, #31
 800199e:	fa02 f303 	lsl.w	r3, r2, r3
 80019a2:	43da      	mvns	r2, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	400a      	ands	r2, r1
 80019aa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	b29b      	uxth	r3, r3
 80019b8:	4618      	mov	r0, r3
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	685a      	ldr	r2, [r3, #4]
 80019be:	4613      	mov	r3, r2
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	4413      	add	r3, r2
 80019c4:	3b05      	subs	r3, #5
 80019c6:	fa00 f203 	lsl.w	r2, r0, r3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	430a      	orrs	r2, r1
 80019d0:	635a      	str	r2, [r3, #52]	@ 0x34
 80019d2:	e04c      	b.n	8001a6e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	2b0c      	cmp	r3, #12
 80019da:	d824      	bhi.n	8001a26 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685a      	ldr	r2, [r3, #4]
 80019e6:	4613      	mov	r3, r2
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	4413      	add	r3, r2
 80019ec:	3b23      	subs	r3, #35	@ 0x23
 80019ee:	221f      	movs	r2, #31
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	43da      	mvns	r2, r3
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	400a      	ands	r2, r1
 80019fc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	b29b      	uxth	r3, r3
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685a      	ldr	r2, [r3, #4]
 8001a10:	4613      	mov	r3, r2
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	4413      	add	r3, r2
 8001a16:	3b23      	subs	r3, #35	@ 0x23
 8001a18:	fa00 f203 	lsl.w	r2, r0, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	430a      	orrs	r2, r1
 8001a22:	631a      	str	r2, [r3, #48]	@ 0x30
 8001a24:	e023      	b.n	8001a6e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685a      	ldr	r2, [r3, #4]
 8001a30:	4613      	mov	r3, r2
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	4413      	add	r3, r2
 8001a36:	3b41      	subs	r3, #65	@ 0x41
 8001a38:	221f      	movs	r2, #31
 8001a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3e:	43da      	mvns	r2, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	400a      	ands	r2, r1
 8001a46:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	b29b      	uxth	r3, r3
 8001a54:	4618      	mov	r0, r3
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	685a      	ldr	r2, [r3, #4]
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	4413      	add	r3, r2
 8001a60:	3b41      	subs	r3, #65	@ 0x41
 8001a62:	fa00 f203 	lsl.w	r2, r0, r3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	430a      	orrs	r2, r1
 8001a6c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a6e:	4b29      	ldr	r3, [pc, #164]	@ (8001b14 <HAL_ADC_ConfigChannel+0x250>)
 8001a70:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a28      	ldr	r2, [pc, #160]	@ (8001b18 <HAL_ADC_ConfigChannel+0x254>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d10f      	bne.n	8001a9c <HAL_ADC_ConfigChannel+0x1d8>
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2b12      	cmp	r3, #18
 8001a82:	d10b      	bne.n	8001a9c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a1d      	ldr	r2, [pc, #116]	@ (8001b18 <HAL_ADC_ConfigChannel+0x254>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d12b      	bne.n	8001afe <HAL_ADC_ConfigChannel+0x23a>
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a1c      	ldr	r2, [pc, #112]	@ (8001b1c <HAL_ADC_ConfigChannel+0x258>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d003      	beq.n	8001ab8 <HAL_ADC_ConfigChannel+0x1f4>
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2b11      	cmp	r3, #17
 8001ab6:	d122      	bne.n	8001afe <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a11      	ldr	r2, [pc, #68]	@ (8001b1c <HAL_ADC_ConfigChannel+0x258>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d111      	bne.n	8001afe <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ada:	4b11      	ldr	r3, [pc, #68]	@ (8001b20 <HAL_ADC_ConfigChannel+0x25c>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a11      	ldr	r2, [pc, #68]	@ (8001b24 <HAL_ADC_ConfigChannel+0x260>)
 8001ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ae4:	0c9a      	lsrs	r2, r3, #18
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	4413      	add	r3, r2
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001af0:	e002      	b.n	8001af8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	3b01      	subs	r3, #1
 8001af6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d1f9      	bne.n	8001af2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001b06:	2300      	movs	r3, #0
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3714      	adds	r7, #20
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr
 8001b14:	40012300 	.word	0x40012300
 8001b18:	40012000 	.word	0x40012000
 8001b1c:	10000012 	.word	0x10000012
 8001b20:	20000000 	.word	0x20000000
 8001b24:	431bde83 	.word	0x431bde83

08001b28 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b085      	sub	sp, #20
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b30:	4b79      	ldr	r3, [pc, #484]	@ (8001d18 <ADC_Init+0x1f0>)
 8001b32:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	685a      	ldr	r2, [r3, #4]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	431a      	orrs	r2, r3
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	685a      	ldr	r2, [r3, #4]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001b5c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	6859      	ldr	r1, [r3, #4]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	691b      	ldr	r3, [r3, #16]
 8001b68:	021a      	lsls	r2, r3, #8
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	430a      	orrs	r2, r1
 8001b70:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	685a      	ldr	r2, [r3, #4]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001b80:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	6859      	ldr	r1, [r3, #4]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	689a      	ldr	r2, [r3, #8]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	430a      	orrs	r2, r1
 8001b92:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	689a      	ldr	r2, [r3, #8]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ba2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	6899      	ldr	r1, [r3, #8]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	68da      	ldr	r2, [r3, #12]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	430a      	orrs	r2, r1
 8001bb4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bba:	4a58      	ldr	r2, [pc, #352]	@ (8001d1c <ADC_Init+0x1f4>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d022      	beq.n	8001c06 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	689a      	ldr	r2, [r3, #8]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001bce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	6899      	ldr	r1, [r3, #8]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	430a      	orrs	r2, r1
 8001be0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	689a      	ldr	r2, [r3, #8]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001bf0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	6899      	ldr	r1, [r3, #8]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	430a      	orrs	r2, r1
 8001c02:	609a      	str	r2, [r3, #8]
 8001c04:	e00f      	b.n	8001c26 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	689a      	ldr	r2, [r3, #8]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001c14:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	689a      	ldr	r2, [r3, #8]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001c24:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	689a      	ldr	r2, [r3, #8]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f022 0202 	bic.w	r2, r2, #2
 8001c34:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	6899      	ldr	r1, [r3, #8]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	7e1b      	ldrb	r3, [r3, #24]
 8001c40:	005a      	lsls	r2, r3, #1
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	430a      	orrs	r2, r1
 8001c48:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d01b      	beq.n	8001c8c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	685a      	ldr	r2, [r3, #4]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001c62:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	685a      	ldr	r2, [r3, #4]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001c72:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	6859      	ldr	r1, [r3, #4]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	035a      	lsls	r2, r3, #13
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	430a      	orrs	r2, r1
 8001c88:	605a      	str	r2, [r3, #4]
 8001c8a:	e007      	b.n	8001c9c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	685a      	ldr	r2, [r3, #4]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c9a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001caa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	69db      	ldr	r3, [r3, #28]
 8001cb6:	3b01      	subs	r3, #1
 8001cb8:	051a      	lsls	r2, r3, #20
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	430a      	orrs	r2, r1
 8001cc0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	689a      	ldr	r2, [r3, #8]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001cd0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	6899      	ldr	r1, [r3, #8]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001cde:	025a      	lsls	r2, r3, #9
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	430a      	orrs	r2, r1
 8001ce6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	689a      	ldr	r2, [r3, #8]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001cf6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	6899      	ldr	r1, [r3, #8]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	695b      	ldr	r3, [r3, #20]
 8001d02:	029a      	lsls	r2, r3, #10
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	430a      	orrs	r2, r1
 8001d0a:	609a      	str	r2, [r3, #8]
}
 8001d0c:	bf00      	nop
 8001d0e:	3714      	adds	r7, #20
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr
 8001d18:	40012300 	.word	0x40012300
 8001d1c:	0f000001 	.word	0x0f000001

08001d20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b085      	sub	sp, #20
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f003 0307 	and.w	r3, r3, #7
 8001d2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d30:	4b0c      	ldr	r3, [pc, #48]	@ (8001d64 <__NVIC_SetPriorityGrouping+0x44>)
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d36:	68ba      	ldr	r2, [r7, #8]
 8001d38:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d48:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d52:	4a04      	ldr	r2, [pc, #16]	@ (8001d64 <__NVIC_SetPriorityGrouping+0x44>)
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	60d3      	str	r3, [r2, #12]
}
 8001d58:	bf00      	nop
 8001d5a:	3714      	adds	r7, #20
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr
 8001d64:	e000ed00 	.word	0xe000ed00

08001d68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d6c:	4b04      	ldr	r3, [pc, #16]	@ (8001d80 <__NVIC_GetPriorityGrouping+0x18>)
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	0a1b      	lsrs	r3, r3, #8
 8001d72:	f003 0307 	and.w	r3, r3, #7
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr
 8001d80:	e000ed00 	.word	0xe000ed00

08001d84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	6039      	str	r1, [r7, #0]
 8001d8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	db0a      	blt.n	8001dae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	b2da      	uxtb	r2, r3
 8001d9c:	490c      	ldr	r1, [pc, #48]	@ (8001dd0 <__NVIC_SetPriority+0x4c>)
 8001d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da2:	0112      	lsls	r2, r2, #4
 8001da4:	b2d2      	uxtb	r2, r2
 8001da6:	440b      	add	r3, r1
 8001da8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dac:	e00a      	b.n	8001dc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	b2da      	uxtb	r2, r3
 8001db2:	4908      	ldr	r1, [pc, #32]	@ (8001dd4 <__NVIC_SetPriority+0x50>)
 8001db4:	79fb      	ldrb	r3, [r7, #7]
 8001db6:	f003 030f 	and.w	r3, r3, #15
 8001dba:	3b04      	subs	r3, #4
 8001dbc:	0112      	lsls	r2, r2, #4
 8001dbe:	b2d2      	uxtb	r2, r2
 8001dc0:	440b      	add	r3, r1
 8001dc2:	761a      	strb	r2, [r3, #24]
}
 8001dc4:	bf00      	nop
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr
 8001dd0:	e000e100 	.word	0xe000e100
 8001dd4:	e000ed00 	.word	0xe000ed00

08001dd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b089      	sub	sp, #36	@ 0x24
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	60b9      	str	r1, [r7, #8]
 8001de2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f003 0307 	and.w	r3, r3, #7
 8001dea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	f1c3 0307 	rsb	r3, r3, #7
 8001df2:	2b04      	cmp	r3, #4
 8001df4:	bf28      	it	cs
 8001df6:	2304      	movcs	r3, #4
 8001df8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	3304      	adds	r3, #4
 8001dfe:	2b06      	cmp	r3, #6
 8001e00:	d902      	bls.n	8001e08 <NVIC_EncodePriority+0x30>
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	3b03      	subs	r3, #3
 8001e06:	e000      	b.n	8001e0a <NVIC_EncodePriority+0x32>
 8001e08:	2300      	movs	r3, #0
 8001e0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e0c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	fa02 f303 	lsl.w	r3, r2, r3
 8001e16:	43da      	mvns	r2, r3
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	401a      	ands	r2, r3
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e20:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	fa01 f303 	lsl.w	r3, r1, r3
 8001e2a:	43d9      	mvns	r1, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e30:	4313      	orrs	r3, r2
         );
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3724      	adds	r7, #36	@ 0x24
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
	...

08001e40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	3b01      	subs	r3, #1
 8001e4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e50:	d301      	bcc.n	8001e56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e52:	2301      	movs	r3, #1
 8001e54:	e00f      	b.n	8001e76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e56:	4a0a      	ldr	r2, [pc, #40]	@ (8001e80 <SysTick_Config+0x40>)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	3b01      	subs	r3, #1
 8001e5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e5e:	210f      	movs	r1, #15
 8001e60:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001e64:	f7ff ff8e 	bl	8001d84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e68:	4b05      	ldr	r3, [pc, #20]	@ (8001e80 <SysTick_Config+0x40>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e6e:	4b04      	ldr	r3, [pc, #16]	@ (8001e80 <SysTick_Config+0x40>)
 8001e70:	2207      	movs	r2, #7
 8001e72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	e000e010 	.word	0xe000e010

08001e84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f7ff ff47 	bl	8001d20 <__NVIC_SetPriorityGrouping>
}
 8001e92:	bf00      	nop
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b086      	sub	sp, #24
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	60b9      	str	r1, [r7, #8]
 8001ea4:	607a      	str	r2, [r7, #4]
 8001ea6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001eac:	f7ff ff5c 	bl	8001d68 <__NVIC_GetPriorityGrouping>
 8001eb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	68b9      	ldr	r1, [r7, #8]
 8001eb6:	6978      	ldr	r0, [r7, #20]
 8001eb8:	f7ff ff8e 	bl	8001dd8 <NVIC_EncodePriority>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ec2:	4611      	mov	r1, r2
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7ff ff5d 	bl	8001d84 <__NVIC_SetPriority>
}
 8001eca:	bf00      	nop
 8001ecc:	3718      	adds	r7, #24
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b082      	sub	sp, #8
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f7ff ffb0 	bl	8001e40 <SysTick_Config>
 8001ee0:	4603      	mov	r3, r0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
	...

08001eec <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d101      	bne.n	8001efe <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e08a      	b.n	8002014 <HAL_ETH_Init+0x128>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d106      	bne.n	8001f16 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2223      	movs	r2, #35	@ 0x23
 8001f0c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f7ff f831 	bl	8000f78 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f16:	2300      	movs	r3, #0
 8001f18:	60bb      	str	r3, [r7, #8]
 8001f1a:	4b40      	ldr	r3, [pc, #256]	@ (800201c <HAL_ETH_Init+0x130>)
 8001f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f1e:	4a3f      	ldr	r2, [pc, #252]	@ (800201c <HAL_ETH_Init+0x130>)
 8001f20:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f24:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f26:	4b3d      	ldr	r3, [pc, #244]	@ (800201c <HAL_ETH_Init+0x130>)
 8001f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f2e:	60bb      	str	r3, [r7, #8]
 8001f30:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001f32:	4b3b      	ldr	r3, [pc, #236]	@ (8002020 <HAL_ETH_Init+0x134>)
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	4a3a      	ldr	r2, [pc, #232]	@ (8002020 <HAL_ETH_Init+0x134>)
 8001f38:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001f3c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001f3e:	4b38      	ldr	r3, [pc, #224]	@ (8002020 <HAL_ETH_Init+0x134>)
 8001f40:	685a      	ldr	r2, [r3, #4]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	4936      	ldr	r1, [pc, #216]	@ (8002020 <HAL_ETH_Init+0x134>)
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001f4c:	4b34      	ldr	r3, [pc, #208]	@ (8002020 <HAL_ETH_Init+0x134>)
 8001f4e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	6812      	ldr	r2, [r2, #0]
 8001f5e:	f043 0301 	orr.w	r3, r3, #1
 8001f62:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001f66:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f68:	f7ff face 	bl	8001508 <HAL_GetTick>
 8001f6c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001f6e:	e011      	b.n	8001f94 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001f70:	f7ff faca 	bl	8001508 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001f7e:	d909      	bls.n	8001f94 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2204      	movs	r2, #4
 8001f84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	22e0      	movs	r2, #224	@ 0xe0
 8001f8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e03f      	b.n	8002014 <HAL_ETH_Init+0x128>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0301 	and.w	r3, r3, #1
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d1e4      	bne.n	8001f70 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f000 f97a 	bl	80022a0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f000 fa25 	bl	80023fc <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f000 fa7b 	bl	80024ae <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	2100      	movs	r1, #0
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f000 f9e3 	bl	800238c <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8001fd4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	6812      	ldr	r2, [r2, #0]
 8001fe2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fe6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001fea:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8001ffe:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2210      	movs	r2, #16
 800200e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002012:	2300      	movs	r3, #0
}
 8002014:	4618      	mov	r0, r3
 8002016:	3710      	adds	r7, #16
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	40023800 	.word	0x40023800
 8002020:	40013800 	.word	0x40013800

08002024 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002036:	68fa      	ldr	r2, [r7, #12]
 8002038:	4b53      	ldr	r3, [pc, #332]	@ (8002188 <ETH_SetMACConfig+0x164>)
 800203a:	4013      	ands	r3, r2
 800203c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	7b9b      	ldrb	r3, [r3, #14]
 8002042:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002044:	683a      	ldr	r2, [r7, #0]
 8002046:	7c12      	ldrb	r2, [r2, #16]
 8002048:	2a00      	cmp	r2, #0
 800204a:	d102      	bne.n	8002052 <ETH_SetMACConfig+0x2e>
 800204c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002050:	e000      	b.n	8002054 <ETH_SetMACConfig+0x30>
 8002052:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002054:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002056:	683a      	ldr	r2, [r7, #0]
 8002058:	7c52      	ldrb	r2, [r2, #17]
 800205a:	2a00      	cmp	r2, #0
 800205c:	d102      	bne.n	8002064 <ETH_SetMACConfig+0x40>
 800205e:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002062:	e000      	b.n	8002066 <ETH_SetMACConfig+0x42>
 8002064:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002066:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800206c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	7fdb      	ldrb	r3, [r3, #31]
 8002072:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002074:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800207a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800207c:	683a      	ldr	r2, [r7, #0]
 800207e:	7f92      	ldrb	r2, [r2, #30]
 8002080:	2a00      	cmp	r2, #0
 8002082:	d102      	bne.n	800208a <ETH_SetMACConfig+0x66>
 8002084:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002088:	e000      	b.n	800208c <ETH_SetMACConfig+0x68>
 800208a:	2200      	movs	r2, #0
                        macconf->Speed |
 800208c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	7f1b      	ldrb	r3, [r3, #28]
 8002092:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002094:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800209a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	791b      	ldrb	r3, [r3, #4]
 80020a0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80020a2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80020a4:	683a      	ldr	r2, [r7, #0]
 80020a6:	f892 2020 	ldrb.w	r2, [r2, #32]
 80020aa:	2a00      	cmp	r2, #0
 80020ac:	d102      	bne.n	80020b4 <ETH_SetMACConfig+0x90>
 80020ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80020b2:	e000      	b.n	80020b6 <ETH_SetMACConfig+0x92>
 80020b4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80020b6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	7bdb      	ldrb	r3, [r3, #15]
 80020bc:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80020be:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80020c4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80020cc:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80020ce:	4313      	orrs	r3, r2
 80020d0:	68fa      	ldr	r2, [r7, #12]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	68fa      	ldr	r2, [r7, #12]
 80020dc:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80020e6:	2001      	movs	r0, #1
 80020e8:	f7ff fa1a 	bl	8001520 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	68fa      	ldr	r2, [r7, #12]
 80020f2:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	699b      	ldr	r3, [r3, #24]
 80020fa:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80020fc:	68fa      	ldr	r2, [r7, #12]
 80020fe:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8002102:	4013      	ands	r3, r2
 8002104:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800210a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800210c:	683a      	ldr	r2, [r7, #0]
 800210e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002112:	2a00      	cmp	r2, #0
 8002114:	d101      	bne.n	800211a <ETH_SetMACConfig+0xf6>
 8002116:	2280      	movs	r2, #128	@ 0x80
 8002118:	e000      	b.n	800211c <ETH_SetMACConfig+0xf8>
 800211a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800211c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002122:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002124:	683a      	ldr	r2, [r7, #0]
 8002126:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 800212a:	2a01      	cmp	r2, #1
 800212c:	d101      	bne.n	8002132 <ETH_SetMACConfig+0x10e>
 800212e:	2208      	movs	r2, #8
 8002130:	e000      	b.n	8002134 <ETH_SetMACConfig+0x110>
 8002132:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002134:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002136:	683a      	ldr	r2, [r7, #0]
 8002138:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 800213c:	2a01      	cmp	r2, #1
 800213e:	d101      	bne.n	8002144 <ETH_SetMACConfig+0x120>
 8002140:	2204      	movs	r2, #4
 8002142:	e000      	b.n	8002146 <ETH_SetMACConfig+0x122>
 8002144:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002146:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002148:	683a      	ldr	r2, [r7, #0]
 800214a:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 800214e:	2a01      	cmp	r2, #1
 8002150:	d101      	bne.n	8002156 <ETH_SetMACConfig+0x132>
 8002152:	2202      	movs	r2, #2
 8002154:	e000      	b.n	8002158 <ETH_SetMACConfig+0x134>
 8002156:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002158:	4313      	orrs	r3, r2
 800215a:	68fa      	ldr	r2, [r7, #12]
 800215c:	4313      	orrs	r3, r2
 800215e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	68fa      	ldr	r2, [r7, #12]
 8002166:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	699b      	ldr	r3, [r3, #24]
 800216e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002170:	2001      	movs	r0, #1
 8002172:	f7ff f9d5 	bl	8001520 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	68fa      	ldr	r2, [r7, #12]
 800217c:	619a      	str	r2, [r3, #24]
}
 800217e:	bf00      	nop
 8002180:	3710      	adds	r7, #16
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	fd20810f 	.word	0xfd20810f

0800218c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80021a2:	68fa      	ldr	r2, [r7, #12]
 80021a4:	4b3d      	ldr	r3, [pc, #244]	@ (800229c <ETH_SetDMAConfig+0x110>)
 80021a6:	4013      	ands	r3, r2
 80021a8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	7b1b      	ldrb	r3, [r3, #12]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d102      	bne.n	80021b8 <ETH_SetDMAConfig+0x2c>
 80021b2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80021b6:	e000      	b.n	80021ba <ETH_SetDMAConfig+0x2e>
 80021b8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	7b5b      	ldrb	r3, [r3, #13]
 80021be:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80021c0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80021c2:	683a      	ldr	r2, [r7, #0]
 80021c4:	7f52      	ldrb	r2, [r2, #29]
 80021c6:	2a00      	cmp	r2, #0
 80021c8:	d102      	bne.n	80021d0 <ETH_SetDMAConfig+0x44>
 80021ca:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80021ce:	e000      	b.n	80021d2 <ETH_SetDMAConfig+0x46>
 80021d0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80021d2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	7b9b      	ldrb	r3, [r3, #14]
 80021d8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80021da:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80021e0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	7f1b      	ldrb	r3, [r3, #28]
 80021e6:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80021e8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	7f9b      	ldrb	r3, [r3, #30]
 80021ee:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80021f0:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80021f6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80021fe:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002200:	4313      	orrs	r3, r2
 8002202:	68fa      	ldr	r2, [r7, #12]
 8002204:	4313      	orrs	r3, r2
 8002206:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002210:	461a      	mov	r2, r3
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800221e:	699b      	ldr	r3, [r3, #24]
 8002220:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002222:	2001      	movs	r0, #1
 8002224:	f7ff f97c 	bl	8001520 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002230:	461a      	mov	r2, r3
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	791b      	ldrb	r3, [r3, #4]
 800223a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002240:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002246:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800224c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002254:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002256:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800225c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800225e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002264:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	6812      	ldr	r2, [r2, #0]
 800226a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800226e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002272:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002280:	2001      	movs	r0, #1
 8002282:	f7ff f94d 	bl	8001520 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800228e:	461a      	mov	r2, r3
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	6013      	str	r3, [r2, #0]
}
 8002294:	bf00      	nop
 8002296:	3710      	adds	r7, #16
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	f8de3f23 	.word	0xf8de3f23

080022a0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b0a6      	sub	sp, #152	@ 0x98
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80022a8:	2301      	movs	r3, #1
 80022aa:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 80022ae:	2301      	movs	r3, #1
 80022b0:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80022b4:	2300      	movs	r3, #0
 80022b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80022b8:	2300      	movs	r3, #0
 80022ba:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80022be:	2301      	movs	r3, #1
 80022c0:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80022c4:	2300      	movs	r3, #0
 80022c6:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80022ca:	2301      	movs	r3, #1
 80022cc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 80022d0:	2301      	movs	r3, #1
 80022d2:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80022d6:	2300      	movs	r3, #0
 80022d8:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80022dc:	2300      	movs	r3, #0
 80022de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80022e2:	2300      	movs	r3, #0
 80022e4:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80022e6:	2300      	movs	r3, #0
 80022e8:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80022ec:	2300      	movs	r3, #0
 80022ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80022f0:	2300      	movs	r3, #0
 80022f2:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80022f6:	2300      	movs	r3, #0
 80022f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80022fc:	2300      	movs	r3, #0
 80022fe:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002302:	2300      	movs	r3, #0
 8002304:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002308:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800230c:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800230e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002312:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002314:	2300      	movs	r3, #0
 8002316:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800231a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800231e:	4619      	mov	r1, r3
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f7ff fe7f 	bl	8002024 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002326:	2301      	movs	r3, #1
 8002328:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800232a:	2301      	movs	r3, #1
 800232c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800232e:	2301      	movs	r3, #1
 8002330:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002334:	2301      	movs	r3, #1
 8002336:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002338:	2300      	movs	r3, #0
 800233a:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800233c:	2300      	movs	r3, #0
 800233e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002342:	2300      	movs	r3, #0
 8002344:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002348:	2300      	movs	r3, #0
 800234a:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800234c:	2301      	movs	r3, #1
 800234e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002352:	2301      	movs	r3, #1
 8002354:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002356:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800235a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800235c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002360:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002362:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002366:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002368:	2301      	movs	r3, #1
 800236a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800236e:	2300      	movs	r3, #0
 8002370:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002372:	2300      	movs	r3, #0
 8002374:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002376:	f107 0308 	add.w	r3, r7, #8
 800237a:	4619      	mov	r1, r3
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f7ff ff05 	bl	800218c <ETH_SetDMAConfig>
}
 8002382:	bf00      	nop
 8002384:	3798      	adds	r7, #152	@ 0x98
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
	...

0800238c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800238c:	b480      	push	{r7}
 800238e:	b087      	sub	sp, #28
 8002390:	af00      	add	r7, sp, #0
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	60b9      	str	r1, [r7, #8]
 8002396:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	3305      	adds	r3, #5
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	021b      	lsls	r3, r3, #8
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	3204      	adds	r2, #4
 80023a4:	7812      	ldrb	r2, [r2, #0]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80023aa:	68ba      	ldr	r2, [r7, #8]
 80023ac:	4b11      	ldr	r3, [pc, #68]	@ (80023f4 <ETH_MACAddressConfig+0x68>)
 80023ae:	4413      	add	r3, r2
 80023b0:	461a      	mov	r2, r3
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	3303      	adds	r3, #3
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	061a      	lsls	r2, r3, #24
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	3302      	adds	r3, #2
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	041b      	lsls	r3, r3, #16
 80023c6:	431a      	orrs	r2, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	3301      	adds	r3, #1
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	021b      	lsls	r3, r3, #8
 80023d0:	4313      	orrs	r3, r2
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	7812      	ldrb	r2, [r2, #0]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80023da:	68ba      	ldr	r2, [r7, #8]
 80023dc:	4b06      	ldr	r3, [pc, #24]	@ (80023f8 <ETH_MACAddressConfig+0x6c>)
 80023de:	4413      	add	r3, r2
 80023e0:	461a      	mov	r2, r3
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	6013      	str	r3, [r2, #0]
}
 80023e6:	bf00      	nop
 80023e8:	371c      	adds	r7, #28
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop
 80023f4:	40028040 	.word	0x40028040
 80023f8:	40028044 	.word	0x40028044

080023fc <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b085      	sub	sp, #20
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002404:	2300      	movs	r3, #0
 8002406:	60fb      	str	r3, [r7, #12]
 8002408:	e03e      	b.n	8002488 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	68d9      	ldr	r1, [r3, #12]
 800240e:	68fa      	ldr	r2, [r7, #12]
 8002410:	4613      	mov	r3, r2
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	4413      	add	r3, r2
 8002416:	00db      	lsls	r3, r3, #3
 8002418:	440b      	add	r3, r1
 800241a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	2200      	movs	r2, #0
 8002420:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	2200      	movs	r2, #0
 8002426:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	2200      	movs	r2, #0
 800242c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	2200      	movs	r2, #0
 8002432:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002434:	68b9      	ldr	r1, [r7, #8]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	68fa      	ldr	r2, [r7, #12]
 800243a:	3206      	adds	r2, #6
 800243c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2b02      	cmp	r3, #2
 8002450:	d80c      	bhi.n	800246c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	68d9      	ldr	r1, [r3, #12]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	1c5a      	adds	r2, r3, #1
 800245a:	4613      	mov	r3, r2
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	4413      	add	r3, r2
 8002460:	00db      	lsls	r3, r3, #3
 8002462:	440b      	add	r3, r1
 8002464:	461a      	mov	r2, r3
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	60da      	str	r2, [r3, #12]
 800246a:	e004      	b.n	8002476 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	461a      	mov	r2, r3
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	3301      	adds	r3, #1
 8002486:	60fb      	str	r3, [r7, #12]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2b03      	cmp	r3, #3
 800248c:	d9bd      	bls.n	800240a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2200      	movs	r2, #0
 8002492:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	68da      	ldr	r2, [r3, #12]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024a0:	611a      	str	r2, [r3, #16]
}
 80024a2:	bf00      	nop
 80024a4:	3714      	adds	r7, #20
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr

080024ae <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80024ae:	b480      	push	{r7}
 80024b0:	b085      	sub	sp, #20
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80024b6:	2300      	movs	r3, #0
 80024b8:	60fb      	str	r3, [r7, #12]
 80024ba:	e048      	b.n	800254e <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6919      	ldr	r1, [r3, #16]
 80024c0:	68fa      	ldr	r2, [r7, #12]
 80024c2:	4613      	mov	r3, r2
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	4413      	add	r3, r2
 80024c8:	00db      	lsls	r3, r3, #3
 80024ca:	440b      	add	r3, r1
 80024cc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	2200      	movs	r2, #0
 80024d2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	2200      	movs	r2, #0
 80024d8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	2200      	movs	r2, #0
 80024de:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	2200      	movs	r2, #0
 80024e4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	2200      	movs	r2, #0
 80024ea:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	2200      	movs	r2, #0
 80024f0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80024f8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	695b      	ldr	r3, [r3, #20]
 80024fe:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002512:	68b9      	ldr	r1, [r7, #8]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	68fa      	ldr	r2, [r7, #12]
 8002518:	3212      	adds	r2, #18
 800251a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2b02      	cmp	r3, #2
 8002522:	d80c      	bhi.n	800253e <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6919      	ldr	r1, [r3, #16]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	1c5a      	adds	r2, r3, #1
 800252c:	4613      	mov	r3, r2
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	4413      	add	r3, r2
 8002532:	00db      	lsls	r3, r3, #3
 8002534:	440b      	add	r3, r1
 8002536:	461a      	mov	r2, r3
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	60da      	str	r2, [r3, #12]
 800253c:	e004      	b.n	8002548 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	691b      	ldr	r3, [r3, #16]
 8002542:	461a      	mov	r2, r3
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	3301      	adds	r3, #1
 800254c:	60fb      	str	r3, [r7, #12]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2b03      	cmp	r3, #3
 8002552:	d9b3      	bls.n	80024bc <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	691a      	ldr	r2, [r3, #16]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800257e:	60da      	str	r2, [r3, #12]
}
 8002580:	bf00      	nop
 8002582:	3714      	adds	r7, #20
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800258c:	b480      	push	{r7}
 800258e:	b089      	sub	sp, #36	@ 0x24
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002596:	2300      	movs	r3, #0
 8002598:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800259a:	2300      	movs	r3, #0
 800259c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800259e:	2300      	movs	r3, #0
 80025a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025a2:	2300      	movs	r3, #0
 80025a4:	61fb      	str	r3, [r7, #28]
 80025a6:	e177      	b.n	8002898 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025a8:	2201      	movs	r2, #1
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	fa02 f303 	lsl.w	r3, r2, r3
 80025b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	697a      	ldr	r2, [r7, #20]
 80025b8:	4013      	ands	r3, r2
 80025ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025bc:	693a      	ldr	r2, [r7, #16]
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	f040 8166 	bne.w	8002892 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f003 0303 	and.w	r3, r3, #3
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d005      	beq.n	80025de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d130      	bne.n	8002640 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	2203      	movs	r2, #3
 80025ea:	fa02 f303 	lsl.w	r3, r2, r3
 80025ee:	43db      	mvns	r3, r3
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	4013      	ands	r3, r2
 80025f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	68da      	ldr	r2, [r3, #12]
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	005b      	lsls	r3, r3, #1
 80025fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002602:	69ba      	ldr	r2, [r7, #24]
 8002604:	4313      	orrs	r3, r2
 8002606:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	69ba      	ldr	r2, [r7, #24]
 800260c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002614:	2201      	movs	r2, #1
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	43db      	mvns	r3, r3
 800261e:	69ba      	ldr	r2, [r7, #24]
 8002620:	4013      	ands	r3, r2
 8002622:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	091b      	lsrs	r3, r3, #4
 800262a:	f003 0201 	and.w	r2, r3, #1
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	4313      	orrs	r3, r2
 8002638:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f003 0303 	and.w	r3, r3, #3
 8002648:	2b03      	cmp	r3, #3
 800264a:	d017      	beq.n	800267c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	2203      	movs	r2, #3
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	43db      	mvns	r3, r3
 800265e:	69ba      	ldr	r2, [r7, #24]
 8002660:	4013      	ands	r3, r2
 8002662:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	689a      	ldr	r2, [r3, #8]
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	005b      	lsls	r3, r3, #1
 800266c:	fa02 f303 	lsl.w	r3, r2, r3
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	4313      	orrs	r3, r2
 8002674:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f003 0303 	and.w	r3, r3, #3
 8002684:	2b02      	cmp	r3, #2
 8002686:	d123      	bne.n	80026d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	08da      	lsrs	r2, r3, #3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	3208      	adds	r2, #8
 8002690:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002694:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	f003 0307 	and.w	r3, r3, #7
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	220f      	movs	r2, #15
 80026a0:	fa02 f303 	lsl.w	r3, r2, r3
 80026a4:	43db      	mvns	r3, r3
 80026a6:	69ba      	ldr	r2, [r7, #24]
 80026a8:	4013      	ands	r3, r2
 80026aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	691a      	ldr	r2, [r3, #16]
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	f003 0307 	and.w	r3, r3, #7
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	fa02 f303 	lsl.w	r3, r2, r3
 80026bc:	69ba      	ldr	r2, [r7, #24]
 80026be:	4313      	orrs	r3, r2
 80026c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	08da      	lsrs	r2, r3, #3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	3208      	adds	r2, #8
 80026ca:	69b9      	ldr	r1, [r7, #24]
 80026cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	005b      	lsls	r3, r3, #1
 80026da:	2203      	movs	r2, #3
 80026dc:	fa02 f303 	lsl.w	r3, r2, r3
 80026e0:	43db      	mvns	r3, r3
 80026e2:	69ba      	ldr	r2, [r7, #24]
 80026e4:	4013      	ands	r3, r2
 80026e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f003 0203 	and.w	r2, r3, #3
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	005b      	lsls	r3, r3, #1
 80026f4:	fa02 f303 	lsl.w	r3, r2, r3
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800270c:	2b00      	cmp	r3, #0
 800270e:	f000 80c0 	beq.w	8002892 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002712:	2300      	movs	r3, #0
 8002714:	60fb      	str	r3, [r7, #12]
 8002716:	4b66      	ldr	r3, [pc, #408]	@ (80028b0 <HAL_GPIO_Init+0x324>)
 8002718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800271a:	4a65      	ldr	r2, [pc, #404]	@ (80028b0 <HAL_GPIO_Init+0x324>)
 800271c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002720:	6453      	str	r3, [r2, #68]	@ 0x44
 8002722:	4b63      	ldr	r3, [pc, #396]	@ (80028b0 <HAL_GPIO_Init+0x324>)
 8002724:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002726:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800272a:	60fb      	str	r3, [r7, #12]
 800272c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800272e:	4a61      	ldr	r2, [pc, #388]	@ (80028b4 <HAL_GPIO_Init+0x328>)
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	089b      	lsrs	r3, r3, #2
 8002734:	3302      	adds	r3, #2
 8002736:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800273a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	f003 0303 	and.w	r3, r3, #3
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	220f      	movs	r2, #15
 8002746:	fa02 f303 	lsl.w	r3, r2, r3
 800274a:	43db      	mvns	r3, r3
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	4013      	ands	r3, r2
 8002750:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a58      	ldr	r2, [pc, #352]	@ (80028b8 <HAL_GPIO_Init+0x32c>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d037      	beq.n	80027ca <HAL_GPIO_Init+0x23e>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a57      	ldr	r2, [pc, #348]	@ (80028bc <HAL_GPIO_Init+0x330>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d031      	beq.n	80027c6 <HAL_GPIO_Init+0x23a>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a56      	ldr	r2, [pc, #344]	@ (80028c0 <HAL_GPIO_Init+0x334>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d02b      	beq.n	80027c2 <HAL_GPIO_Init+0x236>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a55      	ldr	r2, [pc, #340]	@ (80028c4 <HAL_GPIO_Init+0x338>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d025      	beq.n	80027be <HAL_GPIO_Init+0x232>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a54      	ldr	r2, [pc, #336]	@ (80028c8 <HAL_GPIO_Init+0x33c>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d01f      	beq.n	80027ba <HAL_GPIO_Init+0x22e>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a53      	ldr	r2, [pc, #332]	@ (80028cc <HAL_GPIO_Init+0x340>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d019      	beq.n	80027b6 <HAL_GPIO_Init+0x22a>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a52      	ldr	r2, [pc, #328]	@ (80028d0 <HAL_GPIO_Init+0x344>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d013      	beq.n	80027b2 <HAL_GPIO_Init+0x226>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a51      	ldr	r2, [pc, #324]	@ (80028d4 <HAL_GPIO_Init+0x348>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d00d      	beq.n	80027ae <HAL_GPIO_Init+0x222>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a50      	ldr	r2, [pc, #320]	@ (80028d8 <HAL_GPIO_Init+0x34c>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d007      	beq.n	80027aa <HAL_GPIO_Init+0x21e>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a4f      	ldr	r2, [pc, #316]	@ (80028dc <HAL_GPIO_Init+0x350>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d101      	bne.n	80027a6 <HAL_GPIO_Init+0x21a>
 80027a2:	2309      	movs	r3, #9
 80027a4:	e012      	b.n	80027cc <HAL_GPIO_Init+0x240>
 80027a6:	230a      	movs	r3, #10
 80027a8:	e010      	b.n	80027cc <HAL_GPIO_Init+0x240>
 80027aa:	2308      	movs	r3, #8
 80027ac:	e00e      	b.n	80027cc <HAL_GPIO_Init+0x240>
 80027ae:	2307      	movs	r3, #7
 80027b0:	e00c      	b.n	80027cc <HAL_GPIO_Init+0x240>
 80027b2:	2306      	movs	r3, #6
 80027b4:	e00a      	b.n	80027cc <HAL_GPIO_Init+0x240>
 80027b6:	2305      	movs	r3, #5
 80027b8:	e008      	b.n	80027cc <HAL_GPIO_Init+0x240>
 80027ba:	2304      	movs	r3, #4
 80027bc:	e006      	b.n	80027cc <HAL_GPIO_Init+0x240>
 80027be:	2303      	movs	r3, #3
 80027c0:	e004      	b.n	80027cc <HAL_GPIO_Init+0x240>
 80027c2:	2302      	movs	r3, #2
 80027c4:	e002      	b.n	80027cc <HAL_GPIO_Init+0x240>
 80027c6:	2301      	movs	r3, #1
 80027c8:	e000      	b.n	80027cc <HAL_GPIO_Init+0x240>
 80027ca:	2300      	movs	r3, #0
 80027cc:	69fa      	ldr	r2, [r7, #28]
 80027ce:	f002 0203 	and.w	r2, r2, #3
 80027d2:	0092      	lsls	r2, r2, #2
 80027d4:	4093      	lsls	r3, r2
 80027d6:	69ba      	ldr	r2, [r7, #24]
 80027d8:	4313      	orrs	r3, r2
 80027da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027dc:	4935      	ldr	r1, [pc, #212]	@ (80028b4 <HAL_GPIO_Init+0x328>)
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	089b      	lsrs	r3, r3, #2
 80027e2:	3302      	adds	r3, #2
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027ea:	4b3d      	ldr	r3, [pc, #244]	@ (80028e0 <HAL_GPIO_Init+0x354>)
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	43db      	mvns	r3, r3
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	4013      	ands	r3, r2
 80027f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d003      	beq.n	800280e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	4313      	orrs	r3, r2
 800280c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800280e:	4a34      	ldr	r2, [pc, #208]	@ (80028e0 <HAL_GPIO_Init+0x354>)
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002814:	4b32      	ldr	r3, [pc, #200]	@ (80028e0 <HAL_GPIO_Init+0x354>)
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	43db      	mvns	r3, r3
 800281e:	69ba      	ldr	r2, [r7, #24]
 8002820:	4013      	ands	r3, r2
 8002822:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d003      	beq.n	8002838 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002830:	69ba      	ldr	r2, [r7, #24]
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	4313      	orrs	r3, r2
 8002836:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002838:	4a29      	ldr	r2, [pc, #164]	@ (80028e0 <HAL_GPIO_Init+0x354>)
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800283e:	4b28      	ldr	r3, [pc, #160]	@ (80028e0 <HAL_GPIO_Init+0x354>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	43db      	mvns	r3, r3
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	4013      	ands	r3, r2
 800284c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d003      	beq.n	8002862 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800285a:	69ba      	ldr	r2, [r7, #24]
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	4313      	orrs	r3, r2
 8002860:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002862:	4a1f      	ldr	r2, [pc, #124]	@ (80028e0 <HAL_GPIO_Init+0x354>)
 8002864:	69bb      	ldr	r3, [r7, #24]
 8002866:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002868:	4b1d      	ldr	r3, [pc, #116]	@ (80028e0 <HAL_GPIO_Init+0x354>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	43db      	mvns	r3, r3
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	4013      	ands	r3, r2
 8002876:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d003      	beq.n	800288c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002884:	69ba      	ldr	r2, [r7, #24]
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	4313      	orrs	r3, r2
 800288a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800288c:	4a14      	ldr	r2, [pc, #80]	@ (80028e0 <HAL_GPIO_Init+0x354>)
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	3301      	adds	r3, #1
 8002896:	61fb      	str	r3, [r7, #28]
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	2b0f      	cmp	r3, #15
 800289c:	f67f ae84 	bls.w	80025a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028a0:	bf00      	nop
 80028a2:	bf00      	nop
 80028a4:	3724      	adds	r7, #36	@ 0x24
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	40023800 	.word	0x40023800
 80028b4:	40013800 	.word	0x40013800
 80028b8:	40020000 	.word	0x40020000
 80028bc:	40020400 	.word	0x40020400
 80028c0:	40020800 	.word	0x40020800
 80028c4:	40020c00 	.word	0x40020c00
 80028c8:	40021000 	.word	0x40021000
 80028cc:	40021400 	.word	0x40021400
 80028d0:	40021800 	.word	0x40021800
 80028d4:	40021c00 	.word	0x40021c00
 80028d8:	40022000 	.word	0x40022000
 80028dc:	40022400 	.word	0x40022400
 80028e0:	40013c00 	.word	0x40013c00

080028e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	460b      	mov	r3, r1
 80028ee:	807b      	strh	r3, [r7, #2]
 80028f0:	4613      	mov	r3, r2
 80028f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028f4:	787b      	ldrb	r3, [r7, #1]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d003      	beq.n	8002902 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028fa:	887a      	ldrh	r2, [r7, #2]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002900:	e003      	b.n	800290a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002902:	887b      	ldrh	r3, [r7, #2]
 8002904:	041a      	lsls	r2, r3, #16
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	619a      	str	r2, [r3, #24]
}
 800290a:	bf00      	nop
 800290c:	370c      	adds	r7, #12
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr

08002916 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002916:	b580      	push	{r7, lr}
 8002918:	b086      	sub	sp, #24
 800291a:	af02      	add	r7, sp, #8
 800291c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d101      	bne.n	8002928 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e101      	b.n	8002b2c <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002934:	b2db      	uxtb	r3, r3
 8002936:	2b00      	cmp	r3, #0
 8002938:	d106      	bne.n	8002948 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f7fe fc7e 	bl	8001244 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2203      	movs	r2, #3
 800294c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002956:	d102      	bne.n	800295e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4618      	mov	r0, r3
 8002964:	f001 ff38 	bl	80047d8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6818      	ldr	r0, [r3, #0]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	7c1a      	ldrb	r2, [r3, #16]
 8002970:	f88d 2000 	strb.w	r2, [sp]
 8002974:	3304      	adds	r3, #4
 8002976:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002978:	f001 feca 	bl	8004710 <USB_CoreInit>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d005      	beq.n	800298e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2202      	movs	r2, #2
 8002986:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e0ce      	b.n	8002b2c <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2100      	movs	r1, #0
 8002994:	4618      	mov	r0, r3
 8002996:	f001 ff30 	bl	80047fa <USB_SetCurrentMode>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d005      	beq.n	80029ac <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2202      	movs	r2, #2
 80029a4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e0bf      	b.n	8002b2c <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029ac:	2300      	movs	r3, #0
 80029ae:	73fb      	strb	r3, [r7, #15]
 80029b0:	e04a      	b.n	8002a48 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80029b2:	7bfa      	ldrb	r2, [r7, #15]
 80029b4:	6879      	ldr	r1, [r7, #4]
 80029b6:	4613      	mov	r3, r2
 80029b8:	00db      	lsls	r3, r3, #3
 80029ba:	4413      	add	r3, r2
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	440b      	add	r3, r1
 80029c0:	3315      	adds	r3, #21
 80029c2:	2201      	movs	r2, #1
 80029c4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80029c6:	7bfa      	ldrb	r2, [r7, #15]
 80029c8:	6879      	ldr	r1, [r7, #4]
 80029ca:	4613      	mov	r3, r2
 80029cc:	00db      	lsls	r3, r3, #3
 80029ce:	4413      	add	r3, r2
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	440b      	add	r3, r1
 80029d4:	3314      	adds	r3, #20
 80029d6:	7bfa      	ldrb	r2, [r7, #15]
 80029d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80029da:	7bfa      	ldrb	r2, [r7, #15]
 80029dc:	7bfb      	ldrb	r3, [r7, #15]
 80029de:	b298      	uxth	r0, r3
 80029e0:	6879      	ldr	r1, [r7, #4]
 80029e2:	4613      	mov	r3, r2
 80029e4:	00db      	lsls	r3, r3, #3
 80029e6:	4413      	add	r3, r2
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	440b      	add	r3, r1
 80029ec:	332e      	adds	r3, #46	@ 0x2e
 80029ee:	4602      	mov	r2, r0
 80029f0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80029f2:	7bfa      	ldrb	r2, [r7, #15]
 80029f4:	6879      	ldr	r1, [r7, #4]
 80029f6:	4613      	mov	r3, r2
 80029f8:	00db      	lsls	r3, r3, #3
 80029fa:	4413      	add	r3, r2
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	440b      	add	r3, r1
 8002a00:	3318      	adds	r3, #24
 8002a02:	2200      	movs	r2, #0
 8002a04:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002a06:	7bfa      	ldrb	r2, [r7, #15]
 8002a08:	6879      	ldr	r1, [r7, #4]
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	00db      	lsls	r3, r3, #3
 8002a0e:	4413      	add	r3, r2
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	440b      	add	r3, r1
 8002a14:	331c      	adds	r3, #28
 8002a16:	2200      	movs	r2, #0
 8002a18:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002a1a:	7bfa      	ldrb	r2, [r7, #15]
 8002a1c:	6879      	ldr	r1, [r7, #4]
 8002a1e:	4613      	mov	r3, r2
 8002a20:	00db      	lsls	r3, r3, #3
 8002a22:	4413      	add	r3, r2
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	440b      	add	r3, r1
 8002a28:	3320      	adds	r3, #32
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002a2e:	7bfa      	ldrb	r2, [r7, #15]
 8002a30:	6879      	ldr	r1, [r7, #4]
 8002a32:	4613      	mov	r3, r2
 8002a34:	00db      	lsls	r3, r3, #3
 8002a36:	4413      	add	r3, r2
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	440b      	add	r3, r1
 8002a3c:	3324      	adds	r3, #36	@ 0x24
 8002a3e:	2200      	movs	r2, #0
 8002a40:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a42:	7bfb      	ldrb	r3, [r7, #15]
 8002a44:	3301      	adds	r3, #1
 8002a46:	73fb      	strb	r3, [r7, #15]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	791b      	ldrb	r3, [r3, #4]
 8002a4c:	7bfa      	ldrb	r2, [r7, #15]
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d3af      	bcc.n	80029b2 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a52:	2300      	movs	r3, #0
 8002a54:	73fb      	strb	r3, [r7, #15]
 8002a56:	e044      	b.n	8002ae2 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002a58:	7bfa      	ldrb	r2, [r7, #15]
 8002a5a:	6879      	ldr	r1, [r7, #4]
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	00db      	lsls	r3, r3, #3
 8002a60:	4413      	add	r3, r2
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	440b      	add	r3, r1
 8002a66:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002a6e:	7bfa      	ldrb	r2, [r7, #15]
 8002a70:	6879      	ldr	r1, [r7, #4]
 8002a72:	4613      	mov	r3, r2
 8002a74:	00db      	lsls	r3, r3, #3
 8002a76:	4413      	add	r3, r2
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	440b      	add	r3, r1
 8002a7c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002a80:	7bfa      	ldrb	r2, [r7, #15]
 8002a82:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002a84:	7bfa      	ldrb	r2, [r7, #15]
 8002a86:	6879      	ldr	r1, [r7, #4]
 8002a88:	4613      	mov	r3, r2
 8002a8a:	00db      	lsls	r3, r3, #3
 8002a8c:	4413      	add	r3, r2
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	440b      	add	r3, r1
 8002a92:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002a96:	2200      	movs	r2, #0
 8002a98:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002a9a:	7bfa      	ldrb	r2, [r7, #15]
 8002a9c:	6879      	ldr	r1, [r7, #4]
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	00db      	lsls	r3, r3, #3
 8002aa2:	4413      	add	r3, r2
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	440b      	add	r3, r1
 8002aa8:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002aac:	2200      	movs	r2, #0
 8002aae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002ab0:	7bfa      	ldrb	r2, [r7, #15]
 8002ab2:	6879      	ldr	r1, [r7, #4]
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	00db      	lsls	r3, r3, #3
 8002ab8:	4413      	add	r3, r2
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	440b      	add	r3, r1
 8002abe:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002ac6:	7bfa      	ldrb	r2, [r7, #15]
 8002ac8:	6879      	ldr	r1, [r7, #4]
 8002aca:	4613      	mov	r3, r2
 8002acc:	00db      	lsls	r3, r3, #3
 8002ace:	4413      	add	r3, r2
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	440b      	add	r3, r1
 8002ad4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002ad8:	2200      	movs	r2, #0
 8002ada:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002adc:	7bfb      	ldrb	r3, [r7, #15]
 8002ade:	3301      	adds	r3, #1
 8002ae0:	73fb      	strb	r3, [r7, #15]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	791b      	ldrb	r3, [r3, #4]
 8002ae6:	7bfa      	ldrb	r2, [r7, #15]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d3b5      	bcc.n	8002a58 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6818      	ldr	r0, [r3, #0]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	7c1a      	ldrb	r2, [r3, #16]
 8002af4:	f88d 2000 	strb.w	r2, [sp]
 8002af8:	3304      	adds	r3, #4
 8002afa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002afc:	f001 feca 	bl	8004894 <USB_DevInit>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d005      	beq.n	8002b12 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2202      	movs	r2, #2
 8002b0a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e00c      	b.n	8002b2c <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4618      	mov	r0, r3
 8002b26:	f002 f892 	bl	8004c4e <USB_DevDisconnect>

  return HAL_OK;
 8002b2a:	2300      	movs	r3, #0
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3710      	adds	r7, #16
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b086      	sub	sp, #24
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d101      	bne.n	8002b46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e267      	b.n	8003016 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0301 	and.w	r3, r3, #1
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d075      	beq.n	8002c3e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002b52:	4b88      	ldr	r3, [pc, #544]	@ (8002d74 <HAL_RCC_OscConfig+0x240>)
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	f003 030c 	and.w	r3, r3, #12
 8002b5a:	2b04      	cmp	r3, #4
 8002b5c:	d00c      	beq.n	8002b78 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b5e:	4b85      	ldr	r3, [pc, #532]	@ (8002d74 <HAL_RCC_OscConfig+0x240>)
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002b66:	2b08      	cmp	r3, #8
 8002b68:	d112      	bne.n	8002b90 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b6a:	4b82      	ldr	r3, [pc, #520]	@ (8002d74 <HAL_RCC_OscConfig+0x240>)
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b72:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b76:	d10b      	bne.n	8002b90 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b78:	4b7e      	ldr	r3, [pc, #504]	@ (8002d74 <HAL_RCC_OscConfig+0x240>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d05b      	beq.n	8002c3c <HAL_RCC_OscConfig+0x108>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d157      	bne.n	8002c3c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e242      	b.n	8003016 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b98:	d106      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x74>
 8002b9a:	4b76      	ldr	r3, [pc, #472]	@ (8002d74 <HAL_RCC_OscConfig+0x240>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a75      	ldr	r2, [pc, #468]	@ (8002d74 <HAL_RCC_OscConfig+0x240>)
 8002ba0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ba4:	6013      	str	r3, [r2, #0]
 8002ba6:	e01d      	b.n	8002be4 <HAL_RCC_OscConfig+0xb0>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002bb0:	d10c      	bne.n	8002bcc <HAL_RCC_OscConfig+0x98>
 8002bb2:	4b70      	ldr	r3, [pc, #448]	@ (8002d74 <HAL_RCC_OscConfig+0x240>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a6f      	ldr	r2, [pc, #444]	@ (8002d74 <HAL_RCC_OscConfig+0x240>)
 8002bb8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002bbc:	6013      	str	r3, [r2, #0]
 8002bbe:	4b6d      	ldr	r3, [pc, #436]	@ (8002d74 <HAL_RCC_OscConfig+0x240>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a6c      	ldr	r2, [pc, #432]	@ (8002d74 <HAL_RCC_OscConfig+0x240>)
 8002bc4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bc8:	6013      	str	r3, [r2, #0]
 8002bca:	e00b      	b.n	8002be4 <HAL_RCC_OscConfig+0xb0>
 8002bcc:	4b69      	ldr	r3, [pc, #420]	@ (8002d74 <HAL_RCC_OscConfig+0x240>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a68      	ldr	r2, [pc, #416]	@ (8002d74 <HAL_RCC_OscConfig+0x240>)
 8002bd2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bd6:	6013      	str	r3, [r2, #0]
 8002bd8:	4b66      	ldr	r3, [pc, #408]	@ (8002d74 <HAL_RCC_OscConfig+0x240>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a65      	ldr	r2, [pc, #404]	@ (8002d74 <HAL_RCC_OscConfig+0x240>)
 8002bde:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002be2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d013      	beq.n	8002c14 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bec:	f7fe fc8c 	bl	8001508 <HAL_GetTick>
 8002bf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bf2:	e008      	b.n	8002c06 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bf4:	f7fe fc88 	bl	8001508 <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	2b64      	cmp	r3, #100	@ 0x64
 8002c00:	d901      	bls.n	8002c06 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e207      	b.n	8003016 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c06:	4b5b      	ldr	r3, [pc, #364]	@ (8002d74 <HAL_RCC_OscConfig+0x240>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d0f0      	beq.n	8002bf4 <HAL_RCC_OscConfig+0xc0>
 8002c12:	e014      	b.n	8002c3e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c14:	f7fe fc78 	bl	8001508 <HAL_GetTick>
 8002c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c1a:	e008      	b.n	8002c2e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c1c:	f7fe fc74 	bl	8001508 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b64      	cmp	r3, #100	@ 0x64
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e1f3      	b.n	8003016 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c2e:	4b51      	ldr	r3, [pc, #324]	@ (8002d74 <HAL_RCC_OscConfig+0x240>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d1f0      	bne.n	8002c1c <HAL_RCC_OscConfig+0xe8>
 8002c3a:	e000      	b.n	8002c3e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0302 	and.w	r3, r3, #2
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d063      	beq.n	8002d12 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002c4a:	4b4a      	ldr	r3, [pc, #296]	@ (8002d74 <HAL_RCC_OscConfig+0x240>)
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	f003 030c 	and.w	r3, r3, #12
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d00b      	beq.n	8002c6e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c56:	4b47      	ldr	r3, [pc, #284]	@ (8002d74 <HAL_RCC_OscConfig+0x240>)
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002c5e:	2b08      	cmp	r3, #8
 8002c60:	d11c      	bne.n	8002c9c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c62:	4b44      	ldr	r3, [pc, #272]	@ (8002d74 <HAL_RCC_OscConfig+0x240>)
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d116      	bne.n	8002c9c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c6e:	4b41      	ldr	r3, [pc, #260]	@ (8002d74 <HAL_RCC_OscConfig+0x240>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0302 	and.w	r3, r3, #2
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d005      	beq.n	8002c86 <HAL_RCC_OscConfig+0x152>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d001      	beq.n	8002c86 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e1c7      	b.n	8003016 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c86:	4b3b      	ldr	r3, [pc, #236]	@ (8002d74 <HAL_RCC_OscConfig+0x240>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	691b      	ldr	r3, [r3, #16]
 8002c92:	00db      	lsls	r3, r3, #3
 8002c94:	4937      	ldr	r1, [pc, #220]	@ (8002d74 <HAL_RCC_OscConfig+0x240>)
 8002c96:	4313      	orrs	r3, r2
 8002c98:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c9a:	e03a      	b.n	8002d12 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d020      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ca4:	4b34      	ldr	r3, [pc, #208]	@ (8002d78 <HAL_RCC_OscConfig+0x244>)
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002caa:	f7fe fc2d 	bl	8001508 <HAL_GetTick>
 8002cae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cb0:	e008      	b.n	8002cc4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cb2:	f7fe fc29 	bl	8001508 <HAL_GetTick>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d901      	bls.n	8002cc4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	e1a8      	b.n	8003016 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cc4:	4b2b      	ldr	r3, [pc, #172]	@ (8002d74 <HAL_RCC_OscConfig+0x240>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0302 	and.w	r3, r3, #2
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d0f0      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cd0:	4b28      	ldr	r3, [pc, #160]	@ (8002d74 <HAL_RCC_OscConfig+0x240>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	691b      	ldr	r3, [r3, #16]
 8002cdc:	00db      	lsls	r3, r3, #3
 8002cde:	4925      	ldr	r1, [pc, #148]	@ (8002d74 <HAL_RCC_OscConfig+0x240>)
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	600b      	str	r3, [r1, #0]
 8002ce4:	e015      	b.n	8002d12 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ce6:	4b24      	ldr	r3, [pc, #144]	@ (8002d78 <HAL_RCC_OscConfig+0x244>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cec:	f7fe fc0c 	bl	8001508 <HAL_GetTick>
 8002cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cf2:	e008      	b.n	8002d06 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cf4:	f7fe fc08 	bl	8001508 <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d901      	bls.n	8002d06 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e187      	b.n	8003016 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d06:	4b1b      	ldr	r3, [pc, #108]	@ (8002d74 <HAL_RCC_OscConfig+0x240>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0302 	and.w	r3, r3, #2
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d1f0      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0308 	and.w	r3, r3, #8
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d036      	beq.n	8002d8c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	695b      	ldr	r3, [r3, #20]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d016      	beq.n	8002d54 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d26:	4b15      	ldr	r3, [pc, #84]	@ (8002d7c <HAL_RCC_OscConfig+0x248>)
 8002d28:	2201      	movs	r2, #1
 8002d2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d2c:	f7fe fbec 	bl	8001508 <HAL_GetTick>
 8002d30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d32:	e008      	b.n	8002d46 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d34:	f7fe fbe8 	bl	8001508 <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d901      	bls.n	8002d46 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e167      	b.n	8003016 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d46:	4b0b      	ldr	r3, [pc, #44]	@ (8002d74 <HAL_RCC_OscConfig+0x240>)
 8002d48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d4a:	f003 0302 	and.w	r3, r3, #2
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d0f0      	beq.n	8002d34 <HAL_RCC_OscConfig+0x200>
 8002d52:	e01b      	b.n	8002d8c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d54:	4b09      	ldr	r3, [pc, #36]	@ (8002d7c <HAL_RCC_OscConfig+0x248>)
 8002d56:	2200      	movs	r2, #0
 8002d58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d5a:	f7fe fbd5 	bl	8001508 <HAL_GetTick>
 8002d5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d60:	e00e      	b.n	8002d80 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d62:	f7fe fbd1 	bl	8001508 <HAL_GetTick>
 8002d66:	4602      	mov	r2, r0
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d907      	bls.n	8002d80 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	e150      	b.n	8003016 <HAL_RCC_OscConfig+0x4e2>
 8002d74:	40023800 	.word	0x40023800
 8002d78:	42470000 	.word	0x42470000
 8002d7c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d80:	4b88      	ldr	r3, [pc, #544]	@ (8002fa4 <HAL_RCC_OscConfig+0x470>)
 8002d82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d84:	f003 0302 	and.w	r3, r3, #2
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d1ea      	bne.n	8002d62 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0304 	and.w	r3, r3, #4
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	f000 8097 	beq.w	8002ec8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d9e:	4b81      	ldr	r3, [pc, #516]	@ (8002fa4 <HAL_RCC_OscConfig+0x470>)
 8002da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002da2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d10f      	bne.n	8002dca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002daa:	2300      	movs	r3, #0
 8002dac:	60bb      	str	r3, [r7, #8]
 8002dae:	4b7d      	ldr	r3, [pc, #500]	@ (8002fa4 <HAL_RCC_OscConfig+0x470>)
 8002db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002db2:	4a7c      	ldr	r2, [pc, #496]	@ (8002fa4 <HAL_RCC_OscConfig+0x470>)
 8002db4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002db8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002dba:	4b7a      	ldr	r3, [pc, #488]	@ (8002fa4 <HAL_RCC_OscConfig+0x470>)
 8002dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dc2:	60bb      	str	r3, [r7, #8]
 8002dc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dca:	4b77      	ldr	r3, [pc, #476]	@ (8002fa8 <HAL_RCC_OscConfig+0x474>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d118      	bne.n	8002e08 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dd6:	4b74      	ldr	r3, [pc, #464]	@ (8002fa8 <HAL_RCC_OscConfig+0x474>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a73      	ldr	r2, [pc, #460]	@ (8002fa8 <HAL_RCC_OscConfig+0x474>)
 8002ddc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002de0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002de2:	f7fe fb91 	bl	8001508 <HAL_GetTick>
 8002de6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002de8:	e008      	b.n	8002dfc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dea:	f7fe fb8d 	bl	8001508 <HAL_GetTick>
 8002dee:	4602      	mov	r2, r0
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d901      	bls.n	8002dfc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	e10c      	b.n	8003016 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dfc:	4b6a      	ldr	r3, [pc, #424]	@ (8002fa8 <HAL_RCC_OscConfig+0x474>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d0f0      	beq.n	8002dea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d106      	bne.n	8002e1e <HAL_RCC_OscConfig+0x2ea>
 8002e10:	4b64      	ldr	r3, [pc, #400]	@ (8002fa4 <HAL_RCC_OscConfig+0x470>)
 8002e12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e14:	4a63      	ldr	r2, [pc, #396]	@ (8002fa4 <HAL_RCC_OscConfig+0x470>)
 8002e16:	f043 0301 	orr.w	r3, r3, #1
 8002e1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e1c:	e01c      	b.n	8002e58 <HAL_RCC_OscConfig+0x324>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	2b05      	cmp	r3, #5
 8002e24:	d10c      	bne.n	8002e40 <HAL_RCC_OscConfig+0x30c>
 8002e26:	4b5f      	ldr	r3, [pc, #380]	@ (8002fa4 <HAL_RCC_OscConfig+0x470>)
 8002e28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e2a:	4a5e      	ldr	r2, [pc, #376]	@ (8002fa4 <HAL_RCC_OscConfig+0x470>)
 8002e2c:	f043 0304 	orr.w	r3, r3, #4
 8002e30:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e32:	4b5c      	ldr	r3, [pc, #368]	@ (8002fa4 <HAL_RCC_OscConfig+0x470>)
 8002e34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e36:	4a5b      	ldr	r2, [pc, #364]	@ (8002fa4 <HAL_RCC_OscConfig+0x470>)
 8002e38:	f043 0301 	orr.w	r3, r3, #1
 8002e3c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e3e:	e00b      	b.n	8002e58 <HAL_RCC_OscConfig+0x324>
 8002e40:	4b58      	ldr	r3, [pc, #352]	@ (8002fa4 <HAL_RCC_OscConfig+0x470>)
 8002e42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e44:	4a57      	ldr	r2, [pc, #348]	@ (8002fa4 <HAL_RCC_OscConfig+0x470>)
 8002e46:	f023 0301 	bic.w	r3, r3, #1
 8002e4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e4c:	4b55      	ldr	r3, [pc, #340]	@ (8002fa4 <HAL_RCC_OscConfig+0x470>)
 8002e4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e50:	4a54      	ldr	r2, [pc, #336]	@ (8002fa4 <HAL_RCC_OscConfig+0x470>)
 8002e52:	f023 0304 	bic.w	r3, r3, #4
 8002e56:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d015      	beq.n	8002e8c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e60:	f7fe fb52 	bl	8001508 <HAL_GetTick>
 8002e64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e66:	e00a      	b.n	8002e7e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e68:	f7fe fb4e 	bl	8001508 <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e0cb      	b.n	8003016 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e7e:	4b49      	ldr	r3, [pc, #292]	@ (8002fa4 <HAL_RCC_OscConfig+0x470>)
 8002e80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d0ee      	beq.n	8002e68 <HAL_RCC_OscConfig+0x334>
 8002e8a:	e014      	b.n	8002eb6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e8c:	f7fe fb3c 	bl	8001508 <HAL_GetTick>
 8002e90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e92:	e00a      	b.n	8002eaa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e94:	f7fe fb38 	bl	8001508 <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d901      	bls.n	8002eaa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e0b5      	b.n	8003016 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eaa:	4b3e      	ldr	r3, [pc, #248]	@ (8002fa4 <HAL_RCC_OscConfig+0x470>)
 8002eac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eae:	f003 0302 	and.w	r3, r3, #2
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d1ee      	bne.n	8002e94 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002eb6:	7dfb      	ldrb	r3, [r7, #23]
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d105      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ebc:	4b39      	ldr	r3, [pc, #228]	@ (8002fa4 <HAL_RCC_OscConfig+0x470>)
 8002ebe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ec0:	4a38      	ldr	r2, [pc, #224]	@ (8002fa4 <HAL_RCC_OscConfig+0x470>)
 8002ec2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ec6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	699b      	ldr	r3, [r3, #24]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	f000 80a1 	beq.w	8003014 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ed2:	4b34      	ldr	r3, [pc, #208]	@ (8002fa4 <HAL_RCC_OscConfig+0x470>)
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	f003 030c 	and.w	r3, r3, #12
 8002eda:	2b08      	cmp	r3, #8
 8002edc:	d05c      	beq.n	8002f98 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d141      	bne.n	8002f6a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ee6:	4b31      	ldr	r3, [pc, #196]	@ (8002fac <HAL_RCC_OscConfig+0x478>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eec:	f7fe fb0c 	bl	8001508 <HAL_GetTick>
 8002ef0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ef2:	e008      	b.n	8002f06 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ef4:	f7fe fb08 	bl	8001508 <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d901      	bls.n	8002f06 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e087      	b.n	8003016 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f06:	4b27      	ldr	r3, [pc, #156]	@ (8002fa4 <HAL_RCC_OscConfig+0x470>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d1f0      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	69da      	ldr	r2, [r3, #28]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a1b      	ldr	r3, [r3, #32]
 8002f1a:	431a      	orrs	r2, r3
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f20:	019b      	lsls	r3, r3, #6
 8002f22:	431a      	orrs	r2, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f28:	085b      	lsrs	r3, r3, #1
 8002f2a:	3b01      	subs	r3, #1
 8002f2c:	041b      	lsls	r3, r3, #16
 8002f2e:	431a      	orrs	r2, r3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f34:	061b      	lsls	r3, r3, #24
 8002f36:	491b      	ldr	r1, [pc, #108]	@ (8002fa4 <HAL_RCC_OscConfig+0x470>)
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f3c:	4b1b      	ldr	r3, [pc, #108]	@ (8002fac <HAL_RCC_OscConfig+0x478>)
 8002f3e:	2201      	movs	r2, #1
 8002f40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f42:	f7fe fae1 	bl	8001508 <HAL_GetTick>
 8002f46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f48:	e008      	b.n	8002f5c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f4a:	f7fe fadd 	bl	8001508 <HAL_GetTick>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	2b02      	cmp	r3, #2
 8002f56:	d901      	bls.n	8002f5c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	e05c      	b.n	8003016 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f5c:	4b11      	ldr	r3, [pc, #68]	@ (8002fa4 <HAL_RCC_OscConfig+0x470>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d0f0      	beq.n	8002f4a <HAL_RCC_OscConfig+0x416>
 8002f68:	e054      	b.n	8003014 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f6a:	4b10      	ldr	r3, [pc, #64]	@ (8002fac <HAL_RCC_OscConfig+0x478>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f70:	f7fe faca 	bl	8001508 <HAL_GetTick>
 8002f74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f76:	e008      	b.n	8002f8a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f78:	f7fe fac6 	bl	8001508 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d901      	bls.n	8002f8a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e045      	b.n	8003016 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f8a:	4b06      	ldr	r3, [pc, #24]	@ (8002fa4 <HAL_RCC_OscConfig+0x470>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d1f0      	bne.n	8002f78 <HAL_RCC_OscConfig+0x444>
 8002f96:	e03d      	b.n	8003014 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	699b      	ldr	r3, [r3, #24]
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d107      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e038      	b.n	8003016 <HAL_RCC_OscConfig+0x4e2>
 8002fa4:	40023800 	.word	0x40023800
 8002fa8:	40007000 	.word	0x40007000
 8002fac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002fb0:	4b1b      	ldr	r3, [pc, #108]	@ (8003020 <HAL_RCC_OscConfig+0x4ec>)
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	699b      	ldr	r3, [r3, #24]
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d028      	beq.n	8003010 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d121      	bne.n	8003010 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d11a      	bne.n	8003010 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fda:	68fa      	ldr	r2, [r7, #12]
 8002fdc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002fe6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d111      	bne.n	8003010 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ff6:	085b      	lsrs	r3, r3, #1
 8002ff8:	3b01      	subs	r3, #1
 8002ffa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d107      	bne.n	8003010 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800300a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800300c:	429a      	cmp	r2, r3
 800300e:	d001      	beq.n	8003014 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e000      	b.n	8003016 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	3718      	adds	r7, #24
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	40023800 	.word	0x40023800

08003024 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d101      	bne.n	8003038 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e0cc      	b.n	80031d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003038:	4b68      	ldr	r3, [pc, #416]	@ (80031dc <HAL_RCC_ClockConfig+0x1b8>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 030f 	and.w	r3, r3, #15
 8003040:	683a      	ldr	r2, [r7, #0]
 8003042:	429a      	cmp	r2, r3
 8003044:	d90c      	bls.n	8003060 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003046:	4b65      	ldr	r3, [pc, #404]	@ (80031dc <HAL_RCC_ClockConfig+0x1b8>)
 8003048:	683a      	ldr	r2, [r7, #0]
 800304a:	b2d2      	uxtb	r2, r2
 800304c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800304e:	4b63      	ldr	r3, [pc, #396]	@ (80031dc <HAL_RCC_ClockConfig+0x1b8>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 030f 	and.w	r3, r3, #15
 8003056:	683a      	ldr	r2, [r7, #0]
 8003058:	429a      	cmp	r2, r3
 800305a:	d001      	beq.n	8003060 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e0b8      	b.n	80031d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0302 	and.w	r3, r3, #2
 8003068:	2b00      	cmp	r3, #0
 800306a:	d020      	beq.n	80030ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0304 	and.w	r3, r3, #4
 8003074:	2b00      	cmp	r3, #0
 8003076:	d005      	beq.n	8003084 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003078:	4b59      	ldr	r3, [pc, #356]	@ (80031e0 <HAL_RCC_ClockConfig+0x1bc>)
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	4a58      	ldr	r2, [pc, #352]	@ (80031e0 <HAL_RCC_ClockConfig+0x1bc>)
 800307e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003082:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0308 	and.w	r3, r3, #8
 800308c:	2b00      	cmp	r3, #0
 800308e:	d005      	beq.n	800309c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003090:	4b53      	ldr	r3, [pc, #332]	@ (80031e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	4a52      	ldr	r2, [pc, #328]	@ (80031e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003096:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800309a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800309c:	4b50      	ldr	r3, [pc, #320]	@ (80031e0 <HAL_RCC_ClockConfig+0x1bc>)
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	494d      	ldr	r1, [pc, #308]	@ (80031e0 <HAL_RCC_ClockConfig+0x1bc>)
 80030aa:	4313      	orrs	r3, r2
 80030ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0301 	and.w	r3, r3, #1
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d044      	beq.n	8003144 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d107      	bne.n	80030d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030c2:	4b47      	ldr	r3, [pc, #284]	@ (80031e0 <HAL_RCC_ClockConfig+0x1bc>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d119      	bne.n	8003102 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e07f      	b.n	80031d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d003      	beq.n	80030e2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030de:	2b03      	cmp	r3, #3
 80030e0:	d107      	bne.n	80030f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030e2:	4b3f      	ldr	r3, [pc, #252]	@ (80031e0 <HAL_RCC_ClockConfig+0x1bc>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d109      	bne.n	8003102 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e06f      	b.n	80031d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030f2:	4b3b      	ldr	r3, [pc, #236]	@ (80031e0 <HAL_RCC_ClockConfig+0x1bc>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0302 	and.w	r3, r3, #2
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d101      	bne.n	8003102 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e067      	b.n	80031d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003102:	4b37      	ldr	r3, [pc, #220]	@ (80031e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	f023 0203 	bic.w	r2, r3, #3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	4934      	ldr	r1, [pc, #208]	@ (80031e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003110:	4313      	orrs	r3, r2
 8003112:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003114:	f7fe f9f8 	bl	8001508 <HAL_GetTick>
 8003118:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800311a:	e00a      	b.n	8003132 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800311c:	f7fe f9f4 	bl	8001508 <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	f241 3288 	movw	r2, #5000	@ 0x1388
 800312a:	4293      	cmp	r3, r2
 800312c:	d901      	bls.n	8003132 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e04f      	b.n	80031d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003132:	4b2b      	ldr	r3, [pc, #172]	@ (80031e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f003 020c 	and.w	r2, r3, #12
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	429a      	cmp	r2, r3
 8003142:	d1eb      	bne.n	800311c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003144:	4b25      	ldr	r3, [pc, #148]	@ (80031dc <HAL_RCC_ClockConfig+0x1b8>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 030f 	and.w	r3, r3, #15
 800314c:	683a      	ldr	r2, [r7, #0]
 800314e:	429a      	cmp	r2, r3
 8003150:	d20c      	bcs.n	800316c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003152:	4b22      	ldr	r3, [pc, #136]	@ (80031dc <HAL_RCC_ClockConfig+0x1b8>)
 8003154:	683a      	ldr	r2, [r7, #0]
 8003156:	b2d2      	uxtb	r2, r2
 8003158:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800315a:	4b20      	ldr	r3, [pc, #128]	@ (80031dc <HAL_RCC_ClockConfig+0x1b8>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 030f 	and.w	r3, r3, #15
 8003162:	683a      	ldr	r2, [r7, #0]
 8003164:	429a      	cmp	r2, r3
 8003166:	d001      	beq.n	800316c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e032      	b.n	80031d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0304 	and.w	r3, r3, #4
 8003174:	2b00      	cmp	r3, #0
 8003176:	d008      	beq.n	800318a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003178:	4b19      	ldr	r3, [pc, #100]	@ (80031e0 <HAL_RCC_ClockConfig+0x1bc>)
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	4916      	ldr	r1, [pc, #88]	@ (80031e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003186:	4313      	orrs	r3, r2
 8003188:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0308 	and.w	r3, r3, #8
 8003192:	2b00      	cmp	r3, #0
 8003194:	d009      	beq.n	80031aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003196:	4b12      	ldr	r3, [pc, #72]	@ (80031e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	691b      	ldr	r3, [r3, #16]
 80031a2:	00db      	lsls	r3, r3, #3
 80031a4:	490e      	ldr	r1, [pc, #56]	@ (80031e0 <HAL_RCC_ClockConfig+0x1bc>)
 80031a6:	4313      	orrs	r3, r2
 80031a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80031aa:	f000 f821 	bl	80031f0 <HAL_RCC_GetSysClockFreq>
 80031ae:	4602      	mov	r2, r0
 80031b0:	4b0b      	ldr	r3, [pc, #44]	@ (80031e0 <HAL_RCC_ClockConfig+0x1bc>)
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	091b      	lsrs	r3, r3, #4
 80031b6:	f003 030f 	and.w	r3, r3, #15
 80031ba:	490a      	ldr	r1, [pc, #40]	@ (80031e4 <HAL_RCC_ClockConfig+0x1c0>)
 80031bc:	5ccb      	ldrb	r3, [r1, r3]
 80031be:	fa22 f303 	lsr.w	r3, r2, r3
 80031c2:	4a09      	ldr	r2, [pc, #36]	@ (80031e8 <HAL_RCC_ClockConfig+0x1c4>)
 80031c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80031c6:	4b09      	ldr	r3, [pc, #36]	@ (80031ec <HAL_RCC_ClockConfig+0x1c8>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4618      	mov	r0, r3
 80031cc:	f7fe f958 	bl	8001480 <HAL_InitTick>

  return HAL_OK;
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3710      	adds	r7, #16
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	40023c00 	.word	0x40023c00
 80031e0:	40023800 	.word	0x40023800
 80031e4:	08005680 	.word	0x08005680
 80031e8:	20000000 	.word	0x20000000
 80031ec:	20000004 	.word	0x20000004

080031f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031f4:	b094      	sub	sp, #80	@ 0x50
 80031f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80031f8:	2300      	movs	r3, #0
 80031fa:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80031fc:	2300      	movs	r3, #0
 80031fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003200:	2300      	movs	r3, #0
 8003202:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003204:	2300      	movs	r3, #0
 8003206:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003208:	4b79      	ldr	r3, [pc, #484]	@ (80033f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	f003 030c 	and.w	r3, r3, #12
 8003210:	2b08      	cmp	r3, #8
 8003212:	d00d      	beq.n	8003230 <HAL_RCC_GetSysClockFreq+0x40>
 8003214:	2b08      	cmp	r3, #8
 8003216:	f200 80e1 	bhi.w	80033dc <HAL_RCC_GetSysClockFreq+0x1ec>
 800321a:	2b00      	cmp	r3, #0
 800321c:	d002      	beq.n	8003224 <HAL_RCC_GetSysClockFreq+0x34>
 800321e:	2b04      	cmp	r3, #4
 8003220:	d003      	beq.n	800322a <HAL_RCC_GetSysClockFreq+0x3a>
 8003222:	e0db      	b.n	80033dc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003224:	4b73      	ldr	r3, [pc, #460]	@ (80033f4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003226:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003228:	e0db      	b.n	80033e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800322a:	4b73      	ldr	r3, [pc, #460]	@ (80033f8 <HAL_RCC_GetSysClockFreq+0x208>)
 800322c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800322e:	e0d8      	b.n	80033e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003230:	4b6f      	ldr	r3, [pc, #444]	@ (80033f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003238:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800323a:	4b6d      	ldr	r3, [pc, #436]	@ (80033f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d063      	beq.n	800330e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003246:	4b6a      	ldr	r3, [pc, #424]	@ (80033f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	099b      	lsrs	r3, r3, #6
 800324c:	2200      	movs	r2, #0
 800324e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003250:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003252:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003254:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003258:	633b      	str	r3, [r7, #48]	@ 0x30
 800325a:	2300      	movs	r3, #0
 800325c:	637b      	str	r3, [r7, #52]	@ 0x34
 800325e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003262:	4622      	mov	r2, r4
 8003264:	462b      	mov	r3, r5
 8003266:	f04f 0000 	mov.w	r0, #0
 800326a:	f04f 0100 	mov.w	r1, #0
 800326e:	0159      	lsls	r1, r3, #5
 8003270:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003274:	0150      	lsls	r0, r2, #5
 8003276:	4602      	mov	r2, r0
 8003278:	460b      	mov	r3, r1
 800327a:	4621      	mov	r1, r4
 800327c:	1a51      	subs	r1, r2, r1
 800327e:	6139      	str	r1, [r7, #16]
 8003280:	4629      	mov	r1, r5
 8003282:	eb63 0301 	sbc.w	r3, r3, r1
 8003286:	617b      	str	r3, [r7, #20]
 8003288:	f04f 0200 	mov.w	r2, #0
 800328c:	f04f 0300 	mov.w	r3, #0
 8003290:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003294:	4659      	mov	r1, fp
 8003296:	018b      	lsls	r3, r1, #6
 8003298:	4651      	mov	r1, sl
 800329a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800329e:	4651      	mov	r1, sl
 80032a0:	018a      	lsls	r2, r1, #6
 80032a2:	4651      	mov	r1, sl
 80032a4:	ebb2 0801 	subs.w	r8, r2, r1
 80032a8:	4659      	mov	r1, fp
 80032aa:	eb63 0901 	sbc.w	r9, r3, r1
 80032ae:	f04f 0200 	mov.w	r2, #0
 80032b2:	f04f 0300 	mov.w	r3, #0
 80032b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80032ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80032be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80032c2:	4690      	mov	r8, r2
 80032c4:	4699      	mov	r9, r3
 80032c6:	4623      	mov	r3, r4
 80032c8:	eb18 0303 	adds.w	r3, r8, r3
 80032cc:	60bb      	str	r3, [r7, #8]
 80032ce:	462b      	mov	r3, r5
 80032d0:	eb49 0303 	adc.w	r3, r9, r3
 80032d4:	60fb      	str	r3, [r7, #12]
 80032d6:	f04f 0200 	mov.w	r2, #0
 80032da:	f04f 0300 	mov.w	r3, #0
 80032de:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80032e2:	4629      	mov	r1, r5
 80032e4:	024b      	lsls	r3, r1, #9
 80032e6:	4621      	mov	r1, r4
 80032e8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80032ec:	4621      	mov	r1, r4
 80032ee:	024a      	lsls	r2, r1, #9
 80032f0:	4610      	mov	r0, r2
 80032f2:	4619      	mov	r1, r3
 80032f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032f6:	2200      	movs	r2, #0
 80032f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80032fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80032fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003300:	f7fc ffc6 	bl	8000290 <__aeabi_uldivmod>
 8003304:	4602      	mov	r2, r0
 8003306:	460b      	mov	r3, r1
 8003308:	4613      	mov	r3, r2
 800330a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800330c:	e058      	b.n	80033c0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800330e:	4b38      	ldr	r3, [pc, #224]	@ (80033f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	099b      	lsrs	r3, r3, #6
 8003314:	2200      	movs	r2, #0
 8003316:	4618      	mov	r0, r3
 8003318:	4611      	mov	r1, r2
 800331a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800331e:	623b      	str	r3, [r7, #32]
 8003320:	2300      	movs	r3, #0
 8003322:	627b      	str	r3, [r7, #36]	@ 0x24
 8003324:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003328:	4642      	mov	r2, r8
 800332a:	464b      	mov	r3, r9
 800332c:	f04f 0000 	mov.w	r0, #0
 8003330:	f04f 0100 	mov.w	r1, #0
 8003334:	0159      	lsls	r1, r3, #5
 8003336:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800333a:	0150      	lsls	r0, r2, #5
 800333c:	4602      	mov	r2, r0
 800333e:	460b      	mov	r3, r1
 8003340:	4641      	mov	r1, r8
 8003342:	ebb2 0a01 	subs.w	sl, r2, r1
 8003346:	4649      	mov	r1, r9
 8003348:	eb63 0b01 	sbc.w	fp, r3, r1
 800334c:	f04f 0200 	mov.w	r2, #0
 8003350:	f04f 0300 	mov.w	r3, #0
 8003354:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003358:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800335c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003360:	ebb2 040a 	subs.w	r4, r2, sl
 8003364:	eb63 050b 	sbc.w	r5, r3, fp
 8003368:	f04f 0200 	mov.w	r2, #0
 800336c:	f04f 0300 	mov.w	r3, #0
 8003370:	00eb      	lsls	r3, r5, #3
 8003372:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003376:	00e2      	lsls	r2, r4, #3
 8003378:	4614      	mov	r4, r2
 800337a:	461d      	mov	r5, r3
 800337c:	4643      	mov	r3, r8
 800337e:	18e3      	adds	r3, r4, r3
 8003380:	603b      	str	r3, [r7, #0]
 8003382:	464b      	mov	r3, r9
 8003384:	eb45 0303 	adc.w	r3, r5, r3
 8003388:	607b      	str	r3, [r7, #4]
 800338a:	f04f 0200 	mov.w	r2, #0
 800338e:	f04f 0300 	mov.w	r3, #0
 8003392:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003396:	4629      	mov	r1, r5
 8003398:	028b      	lsls	r3, r1, #10
 800339a:	4621      	mov	r1, r4
 800339c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80033a0:	4621      	mov	r1, r4
 80033a2:	028a      	lsls	r2, r1, #10
 80033a4:	4610      	mov	r0, r2
 80033a6:	4619      	mov	r1, r3
 80033a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80033aa:	2200      	movs	r2, #0
 80033ac:	61bb      	str	r3, [r7, #24]
 80033ae:	61fa      	str	r2, [r7, #28]
 80033b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033b4:	f7fc ff6c 	bl	8000290 <__aeabi_uldivmod>
 80033b8:	4602      	mov	r2, r0
 80033ba:	460b      	mov	r3, r1
 80033bc:	4613      	mov	r3, r2
 80033be:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80033c0:	4b0b      	ldr	r3, [pc, #44]	@ (80033f0 <HAL_RCC_GetSysClockFreq+0x200>)
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	0c1b      	lsrs	r3, r3, #16
 80033c6:	f003 0303 	and.w	r3, r3, #3
 80033ca:	3301      	adds	r3, #1
 80033cc:	005b      	lsls	r3, r3, #1
 80033ce:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80033d0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80033d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033d8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80033da:	e002      	b.n	80033e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033dc:	4b05      	ldr	r3, [pc, #20]	@ (80033f4 <HAL_RCC_GetSysClockFreq+0x204>)
 80033de:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80033e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3750      	adds	r7, #80	@ 0x50
 80033e8:	46bd      	mov	sp, r7
 80033ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033ee:	bf00      	nop
 80033f0:	40023800 	.word	0x40023800
 80033f4:	00f42400 	.word	0x00f42400
 80033f8:	007a1200 	.word	0x007a1200

080033fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033fc:	b480      	push	{r7}
 80033fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003400:	4b03      	ldr	r3, [pc, #12]	@ (8003410 <HAL_RCC_GetHCLKFreq+0x14>)
 8003402:	681b      	ldr	r3, [r3, #0]
}
 8003404:	4618      	mov	r0, r3
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop
 8003410:	20000000 	.word	0x20000000

08003414 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003418:	f7ff fff0 	bl	80033fc <HAL_RCC_GetHCLKFreq>
 800341c:	4602      	mov	r2, r0
 800341e:	4b05      	ldr	r3, [pc, #20]	@ (8003434 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	0a9b      	lsrs	r3, r3, #10
 8003424:	f003 0307 	and.w	r3, r3, #7
 8003428:	4903      	ldr	r1, [pc, #12]	@ (8003438 <HAL_RCC_GetPCLK1Freq+0x24>)
 800342a:	5ccb      	ldrb	r3, [r1, r3]
 800342c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003430:	4618      	mov	r0, r3
 8003432:	bd80      	pop	{r7, pc}
 8003434:	40023800 	.word	0x40023800
 8003438:	08005690 	.word	0x08005690

0800343c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003440:	f7ff ffdc 	bl	80033fc <HAL_RCC_GetHCLKFreq>
 8003444:	4602      	mov	r2, r0
 8003446:	4b05      	ldr	r3, [pc, #20]	@ (800345c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	0b5b      	lsrs	r3, r3, #13
 800344c:	f003 0307 	and.w	r3, r3, #7
 8003450:	4903      	ldr	r1, [pc, #12]	@ (8003460 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003452:	5ccb      	ldrb	r3, [r1, r3]
 8003454:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003458:	4618      	mov	r0, r3
 800345a:	bd80      	pop	{r7, pc}
 800345c:	40023800 	.word	0x40023800
 8003460:	08005690 	.word	0x08005690

08003464 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d101      	bne.n	8003476 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e041      	b.n	80034fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800347c:	b2db      	uxtb	r3, r3
 800347e:	2b00      	cmp	r3, #0
 8003480:	d106      	bne.n	8003490 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f7fd fe3a 	bl	8001104 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2202      	movs	r2, #2
 8003494:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	3304      	adds	r3, #4
 80034a0:	4619      	mov	r1, r3
 80034a2:	4610      	mov	r0, r2
 80034a4:	f000 fad8 	bl	8003a58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2201      	movs	r2, #1
 80034b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3708      	adds	r7, #8
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b082      	sub	sp, #8
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d101      	bne.n	8003514 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e041      	b.n	8003598 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800351a:	b2db      	uxtb	r3, r3
 800351c:	2b00      	cmp	r3, #0
 800351e:	d106      	bne.n	800352e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f000 f839 	bl	80035a0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2202      	movs	r2, #2
 8003532:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	3304      	adds	r3, #4
 800353e:	4619      	mov	r1, r3
 8003540:	4610      	mov	r0, r2
 8003542:	f000 fa89 	bl	8003a58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2201      	movs	r2, #1
 800354a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2201      	movs	r2, #1
 8003552:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2201      	movs	r2, #1
 800355a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2201      	movs	r2, #1
 8003562:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2201      	movs	r2, #1
 800356a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2201      	movs	r2, #1
 8003572:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2201      	movs	r2, #1
 800357a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2201      	movs	r2, #1
 8003582:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2201      	movs	r2, #1
 800358a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2201      	movs	r2, #1
 8003592:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003596:	2300      	movs	r3, #0
}
 8003598:	4618      	mov	r0, r3
 800359a:	3708      	adds	r7, #8
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}

080035a0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80035a8:	bf00      	nop
 80035aa:	370c      	adds	r7, #12
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr

080035b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d109      	bne.n	80035d8 <HAL_TIM_PWM_Start+0x24>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	bf14      	ite	ne
 80035d0:	2301      	movne	r3, #1
 80035d2:	2300      	moveq	r3, #0
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	e022      	b.n	800361e <HAL_TIM_PWM_Start+0x6a>
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	2b04      	cmp	r3, #4
 80035dc:	d109      	bne.n	80035f2 <HAL_TIM_PWM_Start+0x3e>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	bf14      	ite	ne
 80035ea:	2301      	movne	r3, #1
 80035ec:	2300      	moveq	r3, #0
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	e015      	b.n	800361e <HAL_TIM_PWM_Start+0x6a>
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	2b08      	cmp	r3, #8
 80035f6:	d109      	bne.n	800360c <HAL_TIM_PWM_Start+0x58>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	2b01      	cmp	r3, #1
 8003602:	bf14      	ite	ne
 8003604:	2301      	movne	r3, #1
 8003606:	2300      	moveq	r3, #0
 8003608:	b2db      	uxtb	r3, r3
 800360a:	e008      	b.n	800361e <HAL_TIM_PWM_Start+0x6a>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003612:	b2db      	uxtb	r3, r3
 8003614:	2b01      	cmp	r3, #1
 8003616:	bf14      	ite	ne
 8003618:	2301      	movne	r3, #1
 800361a:	2300      	moveq	r3, #0
 800361c:	b2db      	uxtb	r3, r3
 800361e:	2b00      	cmp	r3, #0
 8003620:	d001      	beq.n	8003626 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e07c      	b.n	8003720 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d104      	bne.n	8003636 <HAL_TIM_PWM_Start+0x82>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2202      	movs	r2, #2
 8003630:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003634:	e013      	b.n	800365e <HAL_TIM_PWM_Start+0xaa>
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	2b04      	cmp	r3, #4
 800363a:	d104      	bne.n	8003646 <HAL_TIM_PWM_Start+0x92>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2202      	movs	r2, #2
 8003640:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003644:	e00b      	b.n	800365e <HAL_TIM_PWM_Start+0xaa>
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	2b08      	cmp	r3, #8
 800364a:	d104      	bne.n	8003656 <HAL_TIM_PWM_Start+0xa2>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2202      	movs	r2, #2
 8003650:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003654:	e003      	b.n	800365e <HAL_TIM_PWM_Start+0xaa>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2202      	movs	r2, #2
 800365a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	2201      	movs	r2, #1
 8003664:	6839      	ldr	r1, [r7, #0]
 8003666:	4618      	mov	r0, r3
 8003668:	f000 fcec 	bl	8004044 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a2d      	ldr	r2, [pc, #180]	@ (8003728 <HAL_TIM_PWM_Start+0x174>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d004      	beq.n	8003680 <HAL_TIM_PWM_Start+0xcc>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a2c      	ldr	r2, [pc, #176]	@ (800372c <HAL_TIM_PWM_Start+0x178>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d101      	bne.n	8003684 <HAL_TIM_PWM_Start+0xd0>
 8003680:	2301      	movs	r3, #1
 8003682:	e000      	b.n	8003686 <HAL_TIM_PWM_Start+0xd2>
 8003684:	2300      	movs	r3, #0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d007      	beq.n	800369a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003698:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a22      	ldr	r2, [pc, #136]	@ (8003728 <HAL_TIM_PWM_Start+0x174>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d022      	beq.n	80036ea <HAL_TIM_PWM_Start+0x136>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036ac:	d01d      	beq.n	80036ea <HAL_TIM_PWM_Start+0x136>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a1f      	ldr	r2, [pc, #124]	@ (8003730 <HAL_TIM_PWM_Start+0x17c>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d018      	beq.n	80036ea <HAL_TIM_PWM_Start+0x136>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a1d      	ldr	r2, [pc, #116]	@ (8003734 <HAL_TIM_PWM_Start+0x180>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d013      	beq.n	80036ea <HAL_TIM_PWM_Start+0x136>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a1c      	ldr	r2, [pc, #112]	@ (8003738 <HAL_TIM_PWM_Start+0x184>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d00e      	beq.n	80036ea <HAL_TIM_PWM_Start+0x136>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a16      	ldr	r2, [pc, #88]	@ (800372c <HAL_TIM_PWM_Start+0x178>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d009      	beq.n	80036ea <HAL_TIM_PWM_Start+0x136>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a18      	ldr	r2, [pc, #96]	@ (800373c <HAL_TIM_PWM_Start+0x188>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d004      	beq.n	80036ea <HAL_TIM_PWM_Start+0x136>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a16      	ldr	r2, [pc, #88]	@ (8003740 <HAL_TIM_PWM_Start+0x18c>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d111      	bne.n	800370e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	f003 0307 	and.w	r3, r3, #7
 80036f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2b06      	cmp	r3, #6
 80036fa:	d010      	beq.n	800371e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f042 0201 	orr.w	r2, r2, #1
 800370a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800370c:	e007      	b.n	800371e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f042 0201 	orr.w	r2, r2, #1
 800371c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800371e:	2300      	movs	r3, #0
}
 8003720:	4618      	mov	r0, r3
 8003722:	3710      	adds	r7, #16
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}
 8003728:	40010000 	.word	0x40010000
 800372c:	40010400 	.word	0x40010400
 8003730:	40000400 	.word	0x40000400
 8003734:	40000800 	.word	0x40000800
 8003738:	40000c00 	.word	0x40000c00
 800373c:	40014000 	.word	0x40014000
 8003740:	40001800 	.word	0x40001800

08003744 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b086      	sub	sp, #24
 8003748:	af00      	add	r7, sp, #0
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	60b9      	str	r1, [r7, #8]
 800374e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003750:	2300      	movs	r3, #0
 8003752:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800375a:	2b01      	cmp	r3, #1
 800375c:	d101      	bne.n	8003762 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800375e:	2302      	movs	r3, #2
 8003760:	e0ae      	b.n	80038c0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2201      	movs	r2, #1
 8003766:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2b0c      	cmp	r3, #12
 800376e:	f200 809f 	bhi.w	80038b0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003772:	a201      	add	r2, pc, #4	@ (adr r2, 8003778 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003778:	080037ad 	.word	0x080037ad
 800377c:	080038b1 	.word	0x080038b1
 8003780:	080038b1 	.word	0x080038b1
 8003784:	080038b1 	.word	0x080038b1
 8003788:	080037ed 	.word	0x080037ed
 800378c:	080038b1 	.word	0x080038b1
 8003790:	080038b1 	.word	0x080038b1
 8003794:	080038b1 	.word	0x080038b1
 8003798:	0800382f 	.word	0x0800382f
 800379c:	080038b1 	.word	0x080038b1
 80037a0:	080038b1 	.word	0x080038b1
 80037a4:	080038b1 	.word	0x080038b1
 80037a8:	0800386f 	.word	0x0800386f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	68b9      	ldr	r1, [r7, #8]
 80037b2:	4618      	mov	r0, r3
 80037b4:	f000 f9fc 	bl	8003bb0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	699a      	ldr	r2, [r3, #24]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f042 0208 	orr.w	r2, r2, #8
 80037c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	699a      	ldr	r2, [r3, #24]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f022 0204 	bic.w	r2, r2, #4
 80037d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	6999      	ldr	r1, [r3, #24]
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	691a      	ldr	r2, [r3, #16]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	430a      	orrs	r2, r1
 80037e8:	619a      	str	r2, [r3, #24]
      break;
 80037ea:	e064      	b.n	80038b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	68b9      	ldr	r1, [r7, #8]
 80037f2:	4618      	mov	r0, r3
 80037f4:	f000 fa4c 	bl	8003c90 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	699a      	ldr	r2, [r3, #24]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003806:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	699a      	ldr	r2, [r3, #24]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003816:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	6999      	ldr	r1, [r3, #24]
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	021a      	lsls	r2, r3, #8
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	430a      	orrs	r2, r1
 800382a:	619a      	str	r2, [r3, #24]
      break;
 800382c:	e043      	b.n	80038b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	68b9      	ldr	r1, [r7, #8]
 8003834:	4618      	mov	r0, r3
 8003836:	f000 faa1 	bl	8003d7c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	69da      	ldr	r2, [r3, #28]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f042 0208 	orr.w	r2, r2, #8
 8003848:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	69da      	ldr	r2, [r3, #28]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f022 0204 	bic.w	r2, r2, #4
 8003858:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	69d9      	ldr	r1, [r3, #28]
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	691a      	ldr	r2, [r3, #16]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	430a      	orrs	r2, r1
 800386a:	61da      	str	r2, [r3, #28]
      break;
 800386c:	e023      	b.n	80038b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	68b9      	ldr	r1, [r7, #8]
 8003874:	4618      	mov	r0, r3
 8003876:	f000 faf5 	bl	8003e64 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	69da      	ldr	r2, [r3, #28]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003888:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	69da      	ldr	r2, [r3, #28]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003898:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	69d9      	ldr	r1, [r3, #28]
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	691b      	ldr	r3, [r3, #16]
 80038a4:	021a      	lsls	r2, r3, #8
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	430a      	orrs	r2, r1
 80038ac:	61da      	str	r2, [r3, #28]
      break;
 80038ae:	e002      	b.n	80038b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	75fb      	strb	r3, [r7, #23]
      break;
 80038b4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80038be:	7dfb      	ldrb	r3, [r7, #23]
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3718      	adds	r7, #24
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038d2:	2300      	movs	r3, #0
 80038d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d101      	bne.n	80038e4 <HAL_TIM_ConfigClockSource+0x1c>
 80038e0:	2302      	movs	r3, #2
 80038e2:	e0b4      	b.n	8003a4e <HAL_TIM_ConfigClockSource+0x186>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2202      	movs	r2, #2
 80038f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003902:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800390a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	68ba      	ldr	r2, [r7, #8]
 8003912:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800391c:	d03e      	beq.n	800399c <HAL_TIM_ConfigClockSource+0xd4>
 800391e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003922:	f200 8087 	bhi.w	8003a34 <HAL_TIM_ConfigClockSource+0x16c>
 8003926:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800392a:	f000 8086 	beq.w	8003a3a <HAL_TIM_ConfigClockSource+0x172>
 800392e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003932:	d87f      	bhi.n	8003a34 <HAL_TIM_ConfigClockSource+0x16c>
 8003934:	2b70      	cmp	r3, #112	@ 0x70
 8003936:	d01a      	beq.n	800396e <HAL_TIM_ConfigClockSource+0xa6>
 8003938:	2b70      	cmp	r3, #112	@ 0x70
 800393a:	d87b      	bhi.n	8003a34 <HAL_TIM_ConfigClockSource+0x16c>
 800393c:	2b60      	cmp	r3, #96	@ 0x60
 800393e:	d050      	beq.n	80039e2 <HAL_TIM_ConfigClockSource+0x11a>
 8003940:	2b60      	cmp	r3, #96	@ 0x60
 8003942:	d877      	bhi.n	8003a34 <HAL_TIM_ConfigClockSource+0x16c>
 8003944:	2b50      	cmp	r3, #80	@ 0x50
 8003946:	d03c      	beq.n	80039c2 <HAL_TIM_ConfigClockSource+0xfa>
 8003948:	2b50      	cmp	r3, #80	@ 0x50
 800394a:	d873      	bhi.n	8003a34 <HAL_TIM_ConfigClockSource+0x16c>
 800394c:	2b40      	cmp	r3, #64	@ 0x40
 800394e:	d058      	beq.n	8003a02 <HAL_TIM_ConfigClockSource+0x13a>
 8003950:	2b40      	cmp	r3, #64	@ 0x40
 8003952:	d86f      	bhi.n	8003a34 <HAL_TIM_ConfigClockSource+0x16c>
 8003954:	2b30      	cmp	r3, #48	@ 0x30
 8003956:	d064      	beq.n	8003a22 <HAL_TIM_ConfigClockSource+0x15a>
 8003958:	2b30      	cmp	r3, #48	@ 0x30
 800395a:	d86b      	bhi.n	8003a34 <HAL_TIM_ConfigClockSource+0x16c>
 800395c:	2b20      	cmp	r3, #32
 800395e:	d060      	beq.n	8003a22 <HAL_TIM_ConfigClockSource+0x15a>
 8003960:	2b20      	cmp	r3, #32
 8003962:	d867      	bhi.n	8003a34 <HAL_TIM_ConfigClockSource+0x16c>
 8003964:	2b00      	cmp	r3, #0
 8003966:	d05c      	beq.n	8003a22 <HAL_TIM_ConfigClockSource+0x15a>
 8003968:	2b10      	cmp	r3, #16
 800396a:	d05a      	beq.n	8003a22 <HAL_TIM_ConfigClockSource+0x15a>
 800396c:	e062      	b.n	8003a34 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800397e:	f000 fb41 	bl	8004004 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003990:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	68ba      	ldr	r2, [r7, #8]
 8003998:	609a      	str	r2, [r3, #8]
      break;
 800399a:	e04f      	b.n	8003a3c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80039ac:	f000 fb2a 	bl	8004004 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	689a      	ldr	r2, [r3, #8]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80039be:	609a      	str	r2, [r3, #8]
      break;
 80039c0:	e03c      	b.n	8003a3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039ce:	461a      	mov	r2, r3
 80039d0:	f000 fa9e 	bl	8003f10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	2150      	movs	r1, #80	@ 0x50
 80039da:	4618      	mov	r0, r3
 80039dc:	f000 faf7 	bl	8003fce <TIM_ITRx_SetConfig>
      break;
 80039e0:	e02c      	b.n	8003a3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80039ee:	461a      	mov	r2, r3
 80039f0:	f000 fabd 	bl	8003f6e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2160      	movs	r1, #96	@ 0x60
 80039fa:	4618      	mov	r0, r3
 80039fc:	f000 fae7 	bl	8003fce <TIM_ITRx_SetConfig>
      break;
 8003a00:	e01c      	b.n	8003a3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a0e:	461a      	mov	r2, r3
 8003a10:	f000 fa7e 	bl	8003f10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	2140      	movs	r1, #64	@ 0x40
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f000 fad7 	bl	8003fce <TIM_ITRx_SetConfig>
      break;
 8003a20:	e00c      	b.n	8003a3c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4619      	mov	r1, r3
 8003a2c:	4610      	mov	r0, r2
 8003a2e:	f000 face 	bl	8003fce <TIM_ITRx_SetConfig>
      break;
 8003a32:	e003      	b.n	8003a3c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	73fb      	strb	r3, [r7, #15]
      break;
 8003a38:	e000      	b.n	8003a3c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003a3a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3710      	adds	r7, #16
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
	...

08003a58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b085      	sub	sp, #20
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	4a46      	ldr	r2, [pc, #280]	@ (8003b84 <TIM_Base_SetConfig+0x12c>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d013      	beq.n	8003a98 <TIM_Base_SetConfig+0x40>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a76:	d00f      	beq.n	8003a98 <TIM_Base_SetConfig+0x40>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	4a43      	ldr	r2, [pc, #268]	@ (8003b88 <TIM_Base_SetConfig+0x130>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d00b      	beq.n	8003a98 <TIM_Base_SetConfig+0x40>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	4a42      	ldr	r2, [pc, #264]	@ (8003b8c <TIM_Base_SetConfig+0x134>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d007      	beq.n	8003a98 <TIM_Base_SetConfig+0x40>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	4a41      	ldr	r2, [pc, #260]	@ (8003b90 <TIM_Base_SetConfig+0x138>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d003      	beq.n	8003a98 <TIM_Base_SetConfig+0x40>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	4a40      	ldr	r2, [pc, #256]	@ (8003b94 <TIM_Base_SetConfig+0x13c>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d108      	bne.n	8003aaa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	68fa      	ldr	r2, [r7, #12]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a35      	ldr	r2, [pc, #212]	@ (8003b84 <TIM_Base_SetConfig+0x12c>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d02b      	beq.n	8003b0a <TIM_Base_SetConfig+0xb2>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ab8:	d027      	beq.n	8003b0a <TIM_Base_SetConfig+0xb2>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a32      	ldr	r2, [pc, #200]	@ (8003b88 <TIM_Base_SetConfig+0x130>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d023      	beq.n	8003b0a <TIM_Base_SetConfig+0xb2>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a31      	ldr	r2, [pc, #196]	@ (8003b8c <TIM_Base_SetConfig+0x134>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d01f      	beq.n	8003b0a <TIM_Base_SetConfig+0xb2>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a30      	ldr	r2, [pc, #192]	@ (8003b90 <TIM_Base_SetConfig+0x138>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d01b      	beq.n	8003b0a <TIM_Base_SetConfig+0xb2>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a2f      	ldr	r2, [pc, #188]	@ (8003b94 <TIM_Base_SetConfig+0x13c>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d017      	beq.n	8003b0a <TIM_Base_SetConfig+0xb2>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a2e      	ldr	r2, [pc, #184]	@ (8003b98 <TIM_Base_SetConfig+0x140>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d013      	beq.n	8003b0a <TIM_Base_SetConfig+0xb2>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a2d      	ldr	r2, [pc, #180]	@ (8003b9c <TIM_Base_SetConfig+0x144>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d00f      	beq.n	8003b0a <TIM_Base_SetConfig+0xb2>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4a2c      	ldr	r2, [pc, #176]	@ (8003ba0 <TIM_Base_SetConfig+0x148>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d00b      	beq.n	8003b0a <TIM_Base_SetConfig+0xb2>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a2b      	ldr	r2, [pc, #172]	@ (8003ba4 <TIM_Base_SetConfig+0x14c>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d007      	beq.n	8003b0a <TIM_Base_SetConfig+0xb2>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a2a      	ldr	r2, [pc, #168]	@ (8003ba8 <TIM_Base_SetConfig+0x150>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d003      	beq.n	8003b0a <TIM_Base_SetConfig+0xb2>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4a29      	ldr	r2, [pc, #164]	@ (8003bac <TIM_Base_SetConfig+0x154>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d108      	bne.n	8003b1c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	68fa      	ldr	r2, [r7, #12]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	695b      	ldr	r3, [r3, #20]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	68fa      	ldr	r2, [r7, #12]
 8003b2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	689a      	ldr	r2, [r3, #8]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	4a10      	ldr	r2, [pc, #64]	@ (8003b84 <TIM_Base_SetConfig+0x12c>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d003      	beq.n	8003b50 <TIM_Base_SetConfig+0xf8>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	4a12      	ldr	r2, [pc, #72]	@ (8003b94 <TIM_Base_SetConfig+0x13c>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d103      	bne.n	8003b58 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	691a      	ldr	r2, [r3, #16]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	f003 0301 	and.w	r3, r3, #1
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d105      	bne.n	8003b76 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	691b      	ldr	r3, [r3, #16]
 8003b6e:	f023 0201 	bic.w	r2, r3, #1
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	611a      	str	r2, [r3, #16]
  }
}
 8003b76:	bf00      	nop
 8003b78:	3714      	adds	r7, #20
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr
 8003b82:	bf00      	nop
 8003b84:	40010000 	.word	0x40010000
 8003b88:	40000400 	.word	0x40000400
 8003b8c:	40000800 	.word	0x40000800
 8003b90:	40000c00 	.word	0x40000c00
 8003b94:	40010400 	.word	0x40010400
 8003b98:	40014000 	.word	0x40014000
 8003b9c:	40014400 	.word	0x40014400
 8003ba0:	40014800 	.word	0x40014800
 8003ba4:	40001800 	.word	0x40001800
 8003ba8:	40001c00 	.word	0x40001c00
 8003bac:	40002000 	.word	0x40002000

08003bb0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b087      	sub	sp, #28
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a1b      	ldr	r3, [r3, #32]
 8003bbe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6a1b      	ldr	r3, [r3, #32]
 8003bc4:	f023 0201 	bic.w	r2, r3, #1
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	699b      	ldr	r3, [r3, #24]
 8003bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f023 0303 	bic.w	r3, r3, #3
 8003be6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	68fa      	ldr	r2, [r7, #12]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	f023 0302 	bic.w	r3, r3, #2
 8003bf8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	697a      	ldr	r2, [r7, #20]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	4a20      	ldr	r2, [pc, #128]	@ (8003c88 <TIM_OC1_SetConfig+0xd8>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d003      	beq.n	8003c14 <TIM_OC1_SetConfig+0x64>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	4a1f      	ldr	r2, [pc, #124]	@ (8003c8c <TIM_OC1_SetConfig+0xdc>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d10c      	bne.n	8003c2e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	f023 0308 	bic.w	r3, r3, #8
 8003c1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	697a      	ldr	r2, [r7, #20]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	f023 0304 	bic.w	r3, r3, #4
 8003c2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a15      	ldr	r2, [pc, #84]	@ (8003c88 <TIM_OC1_SetConfig+0xd8>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d003      	beq.n	8003c3e <TIM_OC1_SetConfig+0x8e>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a14      	ldr	r2, [pc, #80]	@ (8003c8c <TIM_OC1_SetConfig+0xdc>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d111      	bne.n	8003c62 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003c4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	695b      	ldr	r3, [r3, #20]
 8003c52:	693a      	ldr	r2, [r7, #16]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	699b      	ldr	r3, [r3, #24]
 8003c5c:	693a      	ldr	r2, [r7, #16]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	693a      	ldr	r2, [r7, #16]
 8003c66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	68fa      	ldr	r2, [r7, #12]
 8003c6c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	685a      	ldr	r2, [r3, #4]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	697a      	ldr	r2, [r7, #20]
 8003c7a:	621a      	str	r2, [r3, #32]
}
 8003c7c:	bf00      	nop
 8003c7e:	371c      	adds	r7, #28
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr
 8003c88:	40010000 	.word	0x40010000
 8003c8c:	40010400 	.word	0x40010400

08003c90 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b087      	sub	sp, #28
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6a1b      	ldr	r3, [r3, #32]
 8003c9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6a1b      	ldr	r3, [r3, #32]
 8003ca4:	f023 0210 	bic.w	r2, r3, #16
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	699b      	ldr	r3, [r3, #24]
 8003cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003cbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	021b      	lsls	r3, r3, #8
 8003cce:	68fa      	ldr	r2, [r7, #12]
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	f023 0320 	bic.w	r3, r3, #32
 8003cda:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	011b      	lsls	r3, r3, #4
 8003ce2:	697a      	ldr	r2, [r7, #20]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	4a22      	ldr	r2, [pc, #136]	@ (8003d74 <TIM_OC2_SetConfig+0xe4>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d003      	beq.n	8003cf8 <TIM_OC2_SetConfig+0x68>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	4a21      	ldr	r2, [pc, #132]	@ (8003d78 <TIM_OC2_SetConfig+0xe8>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d10d      	bne.n	8003d14 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003cfe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	011b      	lsls	r3, r3, #4
 8003d06:	697a      	ldr	r2, [r7, #20]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d12:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	4a17      	ldr	r2, [pc, #92]	@ (8003d74 <TIM_OC2_SetConfig+0xe4>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d003      	beq.n	8003d24 <TIM_OC2_SetConfig+0x94>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	4a16      	ldr	r2, [pc, #88]	@ (8003d78 <TIM_OC2_SetConfig+0xe8>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d113      	bne.n	8003d4c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003d2a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003d32:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	695b      	ldr	r3, [r3, #20]
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	693a      	ldr	r2, [r7, #16]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	699b      	ldr	r3, [r3, #24]
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	693a      	ldr	r2, [r7, #16]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	693a      	ldr	r2, [r7, #16]
 8003d50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	68fa      	ldr	r2, [r7, #12]
 8003d56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	685a      	ldr	r2, [r3, #4]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	697a      	ldr	r2, [r7, #20]
 8003d64:	621a      	str	r2, [r3, #32]
}
 8003d66:	bf00      	nop
 8003d68:	371c      	adds	r7, #28
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr
 8003d72:	bf00      	nop
 8003d74:	40010000 	.word	0x40010000
 8003d78:	40010400 	.word	0x40010400

08003d7c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b087      	sub	sp, #28
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a1b      	ldr	r3, [r3, #32]
 8003d8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6a1b      	ldr	r3, [r3, #32]
 8003d90:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	69db      	ldr	r3, [r3, #28]
 8003da2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003daa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f023 0303 	bic.w	r3, r3, #3
 8003db2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	68fa      	ldr	r2, [r7, #12]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003dc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	021b      	lsls	r3, r3, #8
 8003dcc:	697a      	ldr	r2, [r7, #20]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4a21      	ldr	r2, [pc, #132]	@ (8003e5c <TIM_OC3_SetConfig+0xe0>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d003      	beq.n	8003de2 <TIM_OC3_SetConfig+0x66>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a20      	ldr	r2, [pc, #128]	@ (8003e60 <TIM_OC3_SetConfig+0xe4>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d10d      	bne.n	8003dfe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003de8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	021b      	lsls	r3, r3, #8
 8003df0:	697a      	ldr	r2, [r7, #20]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003dfc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4a16      	ldr	r2, [pc, #88]	@ (8003e5c <TIM_OC3_SetConfig+0xe0>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d003      	beq.n	8003e0e <TIM_OC3_SetConfig+0x92>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a15      	ldr	r2, [pc, #84]	@ (8003e60 <TIM_OC3_SetConfig+0xe4>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d113      	bne.n	8003e36 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003e14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003e1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	695b      	ldr	r3, [r3, #20]
 8003e22:	011b      	lsls	r3, r3, #4
 8003e24:	693a      	ldr	r2, [r7, #16]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	699b      	ldr	r3, [r3, #24]
 8003e2e:	011b      	lsls	r3, r3, #4
 8003e30:	693a      	ldr	r2, [r7, #16]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	693a      	ldr	r2, [r7, #16]
 8003e3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	68fa      	ldr	r2, [r7, #12]
 8003e40:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	685a      	ldr	r2, [r3, #4]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	697a      	ldr	r2, [r7, #20]
 8003e4e:	621a      	str	r2, [r3, #32]
}
 8003e50:	bf00      	nop
 8003e52:	371c      	adds	r7, #28
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr
 8003e5c:	40010000 	.word	0x40010000
 8003e60:	40010400 	.word	0x40010400

08003e64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b087      	sub	sp, #28
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a1b      	ldr	r3, [r3, #32]
 8003e72:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6a1b      	ldr	r3, [r3, #32]
 8003e78:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	69db      	ldr	r3, [r3, #28]
 8003e8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	021b      	lsls	r3, r3, #8
 8003ea2:	68fa      	ldr	r2, [r7, #12]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003eae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	031b      	lsls	r3, r3, #12
 8003eb6:	693a      	ldr	r2, [r7, #16]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4a12      	ldr	r2, [pc, #72]	@ (8003f08 <TIM_OC4_SetConfig+0xa4>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d003      	beq.n	8003ecc <TIM_OC4_SetConfig+0x68>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	4a11      	ldr	r2, [pc, #68]	@ (8003f0c <TIM_OC4_SetConfig+0xa8>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d109      	bne.n	8003ee0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003ed2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	695b      	ldr	r3, [r3, #20]
 8003ed8:	019b      	lsls	r3, r3, #6
 8003eda:	697a      	ldr	r2, [r7, #20]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	697a      	ldr	r2, [r7, #20]
 8003ee4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	68fa      	ldr	r2, [r7, #12]
 8003eea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	685a      	ldr	r2, [r3, #4]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	693a      	ldr	r2, [r7, #16]
 8003ef8:	621a      	str	r2, [r3, #32]
}
 8003efa:	bf00      	nop
 8003efc:	371c      	adds	r7, #28
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr
 8003f06:	bf00      	nop
 8003f08:	40010000 	.word	0x40010000
 8003f0c:	40010400 	.word	0x40010400

08003f10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b087      	sub	sp, #28
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	60b9      	str	r1, [r7, #8]
 8003f1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6a1b      	ldr	r3, [r3, #32]
 8003f20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6a1b      	ldr	r3, [r3, #32]
 8003f26:	f023 0201 	bic.w	r2, r3, #1
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	699b      	ldr	r3, [r3, #24]
 8003f32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003f3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	011b      	lsls	r3, r3, #4
 8003f40:	693a      	ldr	r2, [r7, #16]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	f023 030a 	bic.w	r3, r3, #10
 8003f4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f4e:	697a      	ldr	r2, [r7, #20]
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	693a      	ldr	r2, [r7, #16]
 8003f5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	697a      	ldr	r2, [r7, #20]
 8003f60:	621a      	str	r2, [r3, #32]
}
 8003f62:	bf00      	nop
 8003f64:	371c      	adds	r7, #28
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr

08003f6e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f6e:	b480      	push	{r7}
 8003f70:	b087      	sub	sp, #28
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	60f8      	str	r0, [r7, #12]
 8003f76:	60b9      	str	r1, [r7, #8]
 8003f78:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6a1b      	ldr	r3, [r3, #32]
 8003f7e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6a1b      	ldr	r3, [r3, #32]
 8003f84:	f023 0210 	bic.w	r2, r3, #16
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	699b      	ldr	r3, [r3, #24]
 8003f90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003f98:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	031b      	lsls	r3, r3, #12
 8003f9e:	693a      	ldr	r2, [r7, #16]
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003faa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	011b      	lsls	r3, r3, #4
 8003fb0:	697a      	ldr	r2, [r7, #20]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	693a      	ldr	r2, [r7, #16]
 8003fba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	697a      	ldr	r2, [r7, #20]
 8003fc0:	621a      	str	r2, [r3, #32]
}
 8003fc2:	bf00      	nop
 8003fc4:	371c      	adds	r7, #28
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr

08003fce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003fce:	b480      	push	{r7}
 8003fd0:	b085      	sub	sp, #20
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	6078      	str	r0, [r7, #4]
 8003fd6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fe4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003fe6:	683a      	ldr	r2, [r7, #0]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	4313      	orrs	r3, r2
 8003fec:	f043 0307 	orr.w	r3, r3, #7
 8003ff0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	68fa      	ldr	r2, [r7, #12]
 8003ff6:	609a      	str	r2, [r3, #8]
}
 8003ff8:	bf00      	nop
 8003ffa:	3714      	adds	r7, #20
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr

08004004 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004004:	b480      	push	{r7}
 8004006:	b087      	sub	sp, #28
 8004008:	af00      	add	r7, sp, #0
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	60b9      	str	r1, [r7, #8]
 800400e:	607a      	str	r2, [r7, #4]
 8004010:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800401e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	021a      	lsls	r2, r3, #8
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	431a      	orrs	r2, r3
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	4313      	orrs	r3, r2
 800402c:	697a      	ldr	r2, [r7, #20]
 800402e:	4313      	orrs	r3, r2
 8004030:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	697a      	ldr	r2, [r7, #20]
 8004036:	609a      	str	r2, [r3, #8]
}
 8004038:	bf00      	nop
 800403a:	371c      	adds	r7, #28
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr

08004044 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004044:	b480      	push	{r7}
 8004046:	b087      	sub	sp, #28
 8004048:	af00      	add	r7, sp, #0
 800404a:	60f8      	str	r0, [r7, #12]
 800404c:	60b9      	str	r1, [r7, #8]
 800404e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	f003 031f 	and.w	r3, r3, #31
 8004056:	2201      	movs	r2, #1
 8004058:	fa02 f303 	lsl.w	r3, r2, r3
 800405c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	6a1a      	ldr	r2, [r3, #32]
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	43db      	mvns	r3, r3
 8004066:	401a      	ands	r2, r3
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6a1a      	ldr	r2, [r3, #32]
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	f003 031f 	and.w	r3, r3, #31
 8004076:	6879      	ldr	r1, [r7, #4]
 8004078:	fa01 f303 	lsl.w	r3, r1, r3
 800407c:	431a      	orrs	r2, r3
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	621a      	str	r2, [r3, #32]
}
 8004082:	bf00      	nop
 8004084:	371c      	adds	r7, #28
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr
	...

08004090 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004090:	b480      	push	{r7}
 8004092:	b085      	sub	sp, #20
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d101      	bne.n	80040a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80040a4:	2302      	movs	r3, #2
 80040a6:	e05a      	b.n	800415e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2202      	movs	r2, #2
 80040b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	68fa      	ldr	r2, [r7, #12]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	68fa      	ldr	r2, [r7, #12]
 80040e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a21      	ldr	r2, [pc, #132]	@ (800416c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d022      	beq.n	8004132 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040f4:	d01d      	beq.n	8004132 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a1d      	ldr	r2, [pc, #116]	@ (8004170 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d018      	beq.n	8004132 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a1b      	ldr	r2, [pc, #108]	@ (8004174 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d013      	beq.n	8004132 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a1a      	ldr	r2, [pc, #104]	@ (8004178 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d00e      	beq.n	8004132 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a18      	ldr	r2, [pc, #96]	@ (800417c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d009      	beq.n	8004132 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a17      	ldr	r2, [pc, #92]	@ (8004180 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d004      	beq.n	8004132 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a15      	ldr	r2, [pc, #84]	@ (8004184 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d10c      	bne.n	800414c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004138:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	68ba      	ldr	r2, [r7, #8]
 8004140:	4313      	orrs	r3, r2
 8004142:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	68ba      	ldr	r2, [r7, #8]
 800414a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800415c:	2300      	movs	r3, #0
}
 800415e:	4618      	mov	r0, r3
 8004160:	3714      	adds	r7, #20
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr
 800416a:	bf00      	nop
 800416c:	40010000 	.word	0x40010000
 8004170:	40000400 	.word	0x40000400
 8004174:	40000800 	.word	0x40000800
 8004178:	40000c00 	.word	0x40000c00
 800417c:	40010400 	.word	0x40010400
 8004180:	40014000 	.word	0x40014000
 8004184:	40001800 	.word	0x40001800

08004188 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b082      	sub	sp, #8
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d101      	bne.n	800419a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e042      	b.n	8004220 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d106      	bne.n	80041b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f7fd f800 	bl	80011b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2224      	movs	r2, #36	@ 0x24
 80041b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	68da      	ldr	r2, [r3, #12]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80041ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f000 f82b 	bl	8004228 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	691a      	ldr	r2, [r3, #16]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80041e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	695a      	ldr	r2, [r3, #20]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80041f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	68da      	ldr	r2, [r3, #12]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004200:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2220      	movs	r2, #32
 800420c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2220      	movs	r2, #32
 8004214:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2200      	movs	r2, #0
 800421c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800421e:	2300      	movs	r3, #0
}
 8004220:	4618      	mov	r0, r3
 8004222:	3708      	adds	r7, #8
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}

08004228 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004228:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800422c:	b0c0      	sub	sp, #256	@ 0x100
 800422e:	af00      	add	r7, sp, #0
 8004230:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	691b      	ldr	r3, [r3, #16]
 800423c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004244:	68d9      	ldr	r1, [r3, #12]
 8004246:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	ea40 0301 	orr.w	r3, r0, r1
 8004250:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004252:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004256:	689a      	ldr	r2, [r3, #8]
 8004258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	431a      	orrs	r2, r3
 8004260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004264:	695b      	ldr	r3, [r3, #20]
 8004266:	431a      	orrs	r2, r3
 8004268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800426c:	69db      	ldr	r3, [r3, #28]
 800426e:	4313      	orrs	r3, r2
 8004270:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004280:	f021 010c 	bic.w	r1, r1, #12
 8004284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800428e:	430b      	orrs	r3, r1
 8004290:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004292:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	695b      	ldr	r3, [r3, #20]
 800429a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800429e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042a2:	6999      	ldr	r1, [r3, #24]
 80042a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	ea40 0301 	orr.w	r3, r0, r1
 80042ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80042b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	4b8f      	ldr	r3, [pc, #572]	@ (80044f4 <UART_SetConfig+0x2cc>)
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d005      	beq.n	80042c8 <UART_SetConfig+0xa0>
 80042bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	4b8d      	ldr	r3, [pc, #564]	@ (80044f8 <UART_SetConfig+0x2d0>)
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d104      	bne.n	80042d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80042c8:	f7ff f8b8 	bl	800343c <HAL_RCC_GetPCLK2Freq>
 80042cc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80042d0:	e003      	b.n	80042da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80042d2:	f7ff f89f 	bl	8003414 <HAL_RCC_GetPCLK1Freq>
 80042d6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042de:	69db      	ldr	r3, [r3, #28]
 80042e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042e4:	f040 810c 	bne.w	8004500 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80042e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042ec:	2200      	movs	r2, #0
 80042ee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80042f2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80042f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80042fa:	4622      	mov	r2, r4
 80042fc:	462b      	mov	r3, r5
 80042fe:	1891      	adds	r1, r2, r2
 8004300:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004302:	415b      	adcs	r3, r3
 8004304:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004306:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800430a:	4621      	mov	r1, r4
 800430c:	eb12 0801 	adds.w	r8, r2, r1
 8004310:	4629      	mov	r1, r5
 8004312:	eb43 0901 	adc.w	r9, r3, r1
 8004316:	f04f 0200 	mov.w	r2, #0
 800431a:	f04f 0300 	mov.w	r3, #0
 800431e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004322:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004326:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800432a:	4690      	mov	r8, r2
 800432c:	4699      	mov	r9, r3
 800432e:	4623      	mov	r3, r4
 8004330:	eb18 0303 	adds.w	r3, r8, r3
 8004334:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004338:	462b      	mov	r3, r5
 800433a:	eb49 0303 	adc.w	r3, r9, r3
 800433e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004342:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800434e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004352:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004356:	460b      	mov	r3, r1
 8004358:	18db      	adds	r3, r3, r3
 800435a:	653b      	str	r3, [r7, #80]	@ 0x50
 800435c:	4613      	mov	r3, r2
 800435e:	eb42 0303 	adc.w	r3, r2, r3
 8004362:	657b      	str	r3, [r7, #84]	@ 0x54
 8004364:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004368:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800436c:	f7fb ff90 	bl	8000290 <__aeabi_uldivmod>
 8004370:	4602      	mov	r2, r0
 8004372:	460b      	mov	r3, r1
 8004374:	4b61      	ldr	r3, [pc, #388]	@ (80044fc <UART_SetConfig+0x2d4>)
 8004376:	fba3 2302 	umull	r2, r3, r3, r2
 800437a:	095b      	lsrs	r3, r3, #5
 800437c:	011c      	lsls	r4, r3, #4
 800437e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004382:	2200      	movs	r2, #0
 8004384:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004388:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800438c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004390:	4642      	mov	r2, r8
 8004392:	464b      	mov	r3, r9
 8004394:	1891      	adds	r1, r2, r2
 8004396:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004398:	415b      	adcs	r3, r3
 800439a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800439c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80043a0:	4641      	mov	r1, r8
 80043a2:	eb12 0a01 	adds.w	sl, r2, r1
 80043a6:	4649      	mov	r1, r9
 80043a8:	eb43 0b01 	adc.w	fp, r3, r1
 80043ac:	f04f 0200 	mov.w	r2, #0
 80043b0:	f04f 0300 	mov.w	r3, #0
 80043b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80043b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80043bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80043c0:	4692      	mov	sl, r2
 80043c2:	469b      	mov	fp, r3
 80043c4:	4643      	mov	r3, r8
 80043c6:	eb1a 0303 	adds.w	r3, sl, r3
 80043ca:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80043ce:	464b      	mov	r3, r9
 80043d0:	eb4b 0303 	adc.w	r3, fp, r3
 80043d4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80043d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80043e4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80043e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80043ec:	460b      	mov	r3, r1
 80043ee:	18db      	adds	r3, r3, r3
 80043f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80043f2:	4613      	mov	r3, r2
 80043f4:	eb42 0303 	adc.w	r3, r2, r3
 80043f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80043fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80043fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004402:	f7fb ff45 	bl	8000290 <__aeabi_uldivmod>
 8004406:	4602      	mov	r2, r0
 8004408:	460b      	mov	r3, r1
 800440a:	4611      	mov	r1, r2
 800440c:	4b3b      	ldr	r3, [pc, #236]	@ (80044fc <UART_SetConfig+0x2d4>)
 800440e:	fba3 2301 	umull	r2, r3, r3, r1
 8004412:	095b      	lsrs	r3, r3, #5
 8004414:	2264      	movs	r2, #100	@ 0x64
 8004416:	fb02 f303 	mul.w	r3, r2, r3
 800441a:	1acb      	subs	r3, r1, r3
 800441c:	00db      	lsls	r3, r3, #3
 800441e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004422:	4b36      	ldr	r3, [pc, #216]	@ (80044fc <UART_SetConfig+0x2d4>)
 8004424:	fba3 2302 	umull	r2, r3, r3, r2
 8004428:	095b      	lsrs	r3, r3, #5
 800442a:	005b      	lsls	r3, r3, #1
 800442c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004430:	441c      	add	r4, r3
 8004432:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004436:	2200      	movs	r2, #0
 8004438:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800443c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004440:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004444:	4642      	mov	r2, r8
 8004446:	464b      	mov	r3, r9
 8004448:	1891      	adds	r1, r2, r2
 800444a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800444c:	415b      	adcs	r3, r3
 800444e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004450:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004454:	4641      	mov	r1, r8
 8004456:	1851      	adds	r1, r2, r1
 8004458:	6339      	str	r1, [r7, #48]	@ 0x30
 800445a:	4649      	mov	r1, r9
 800445c:	414b      	adcs	r3, r1
 800445e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004460:	f04f 0200 	mov.w	r2, #0
 8004464:	f04f 0300 	mov.w	r3, #0
 8004468:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800446c:	4659      	mov	r1, fp
 800446e:	00cb      	lsls	r3, r1, #3
 8004470:	4651      	mov	r1, sl
 8004472:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004476:	4651      	mov	r1, sl
 8004478:	00ca      	lsls	r2, r1, #3
 800447a:	4610      	mov	r0, r2
 800447c:	4619      	mov	r1, r3
 800447e:	4603      	mov	r3, r0
 8004480:	4642      	mov	r2, r8
 8004482:	189b      	adds	r3, r3, r2
 8004484:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004488:	464b      	mov	r3, r9
 800448a:	460a      	mov	r2, r1
 800448c:	eb42 0303 	adc.w	r3, r2, r3
 8004490:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80044a0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80044a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80044a8:	460b      	mov	r3, r1
 80044aa:	18db      	adds	r3, r3, r3
 80044ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80044ae:	4613      	mov	r3, r2
 80044b0:	eb42 0303 	adc.w	r3, r2, r3
 80044b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80044b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80044ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80044be:	f7fb fee7 	bl	8000290 <__aeabi_uldivmod>
 80044c2:	4602      	mov	r2, r0
 80044c4:	460b      	mov	r3, r1
 80044c6:	4b0d      	ldr	r3, [pc, #52]	@ (80044fc <UART_SetConfig+0x2d4>)
 80044c8:	fba3 1302 	umull	r1, r3, r3, r2
 80044cc:	095b      	lsrs	r3, r3, #5
 80044ce:	2164      	movs	r1, #100	@ 0x64
 80044d0:	fb01 f303 	mul.w	r3, r1, r3
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	00db      	lsls	r3, r3, #3
 80044d8:	3332      	adds	r3, #50	@ 0x32
 80044da:	4a08      	ldr	r2, [pc, #32]	@ (80044fc <UART_SetConfig+0x2d4>)
 80044dc:	fba2 2303 	umull	r2, r3, r2, r3
 80044e0:	095b      	lsrs	r3, r3, #5
 80044e2:	f003 0207 	and.w	r2, r3, #7
 80044e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4422      	add	r2, r4
 80044ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80044f0:	e106      	b.n	8004700 <UART_SetConfig+0x4d8>
 80044f2:	bf00      	nop
 80044f4:	40011000 	.word	0x40011000
 80044f8:	40011400 	.word	0x40011400
 80044fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004500:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004504:	2200      	movs	r2, #0
 8004506:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800450a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800450e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004512:	4642      	mov	r2, r8
 8004514:	464b      	mov	r3, r9
 8004516:	1891      	adds	r1, r2, r2
 8004518:	6239      	str	r1, [r7, #32]
 800451a:	415b      	adcs	r3, r3
 800451c:	627b      	str	r3, [r7, #36]	@ 0x24
 800451e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004522:	4641      	mov	r1, r8
 8004524:	1854      	adds	r4, r2, r1
 8004526:	4649      	mov	r1, r9
 8004528:	eb43 0501 	adc.w	r5, r3, r1
 800452c:	f04f 0200 	mov.w	r2, #0
 8004530:	f04f 0300 	mov.w	r3, #0
 8004534:	00eb      	lsls	r3, r5, #3
 8004536:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800453a:	00e2      	lsls	r2, r4, #3
 800453c:	4614      	mov	r4, r2
 800453e:	461d      	mov	r5, r3
 8004540:	4643      	mov	r3, r8
 8004542:	18e3      	adds	r3, r4, r3
 8004544:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004548:	464b      	mov	r3, r9
 800454a:	eb45 0303 	adc.w	r3, r5, r3
 800454e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004552:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800455e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004562:	f04f 0200 	mov.w	r2, #0
 8004566:	f04f 0300 	mov.w	r3, #0
 800456a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800456e:	4629      	mov	r1, r5
 8004570:	008b      	lsls	r3, r1, #2
 8004572:	4621      	mov	r1, r4
 8004574:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004578:	4621      	mov	r1, r4
 800457a:	008a      	lsls	r2, r1, #2
 800457c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004580:	f7fb fe86 	bl	8000290 <__aeabi_uldivmod>
 8004584:	4602      	mov	r2, r0
 8004586:	460b      	mov	r3, r1
 8004588:	4b60      	ldr	r3, [pc, #384]	@ (800470c <UART_SetConfig+0x4e4>)
 800458a:	fba3 2302 	umull	r2, r3, r3, r2
 800458e:	095b      	lsrs	r3, r3, #5
 8004590:	011c      	lsls	r4, r3, #4
 8004592:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004596:	2200      	movs	r2, #0
 8004598:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800459c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80045a0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80045a4:	4642      	mov	r2, r8
 80045a6:	464b      	mov	r3, r9
 80045a8:	1891      	adds	r1, r2, r2
 80045aa:	61b9      	str	r1, [r7, #24]
 80045ac:	415b      	adcs	r3, r3
 80045ae:	61fb      	str	r3, [r7, #28]
 80045b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045b4:	4641      	mov	r1, r8
 80045b6:	1851      	adds	r1, r2, r1
 80045b8:	6139      	str	r1, [r7, #16]
 80045ba:	4649      	mov	r1, r9
 80045bc:	414b      	adcs	r3, r1
 80045be:	617b      	str	r3, [r7, #20]
 80045c0:	f04f 0200 	mov.w	r2, #0
 80045c4:	f04f 0300 	mov.w	r3, #0
 80045c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80045cc:	4659      	mov	r1, fp
 80045ce:	00cb      	lsls	r3, r1, #3
 80045d0:	4651      	mov	r1, sl
 80045d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045d6:	4651      	mov	r1, sl
 80045d8:	00ca      	lsls	r2, r1, #3
 80045da:	4610      	mov	r0, r2
 80045dc:	4619      	mov	r1, r3
 80045de:	4603      	mov	r3, r0
 80045e0:	4642      	mov	r2, r8
 80045e2:	189b      	adds	r3, r3, r2
 80045e4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80045e8:	464b      	mov	r3, r9
 80045ea:	460a      	mov	r2, r1
 80045ec:	eb42 0303 	adc.w	r3, r2, r3
 80045f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80045f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80045fe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004600:	f04f 0200 	mov.w	r2, #0
 8004604:	f04f 0300 	mov.w	r3, #0
 8004608:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800460c:	4649      	mov	r1, r9
 800460e:	008b      	lsls	r3, r1, #2
 8004610:	4641      	mov	r1, r8
 8004612:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004616:	4641      	mov	r1, r8
 8004618:	008a      	lsls	r2, r1, #2
 800461a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800461e:	f7fb fe37 	bl	8000290 <__aeabi_uldivmod>
 8004622:	4602      	mov	r2, r0
 8004624:	460b      	mov	r3, r1
 8004626:	4611      	mov	r1, r2
 8004628:	4b38      	ldr	r3, [pc, #224]	@ (800470c <UART_SetConfig+0x4e4>)
 800462a:	fba3 2301 	umull	r2, r3, r3, r1
 800462e:	095b      	lsrs	r3, r3, #5
 8004630:	2264      	movs	r2, #100	@ 0x64
 8004632:	fb02 f303 	mul.w	r3, r2, r3
 8004636:	1acb      	subs	r3, r1, r3
 8004638:	011b      	lsls	r3, r3, #4
 800463a:	3332      	adds	r3, #50	@ 0x32
 800463c:	4a33      	ldr	r2, [pc, #204]	@ (800470c <UART_SetConfig+0x4e4>)
 800463e:	fba2 2303 	umull	r2, r3, r2, r3
 8004642:	095b      	lsrs	r3, r3, #5
 8004644:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004648:	441c      	add	r4, r3
 800464a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800464e:	2200      	movs	r2, #0
 8004650:	673b      	str	r3, [r7, #112]	@ 0x70
 8004652:	677a      	str	r2, [r7, #116]	@ 0x74
 8004654:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004658:	4642      	mov	r2, r8
 800465a:	464b      	mov	r3, r9
 800465c:	1891      	adds	r1, r2, r2
 800465e:	60b9      	str	r1, [r7, #8]
 8004660:	415b      	adcs	r3, r3
 8004662:	60fb      	str	r3, [r7, #12]
 8004664:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004668:	4641      	mov	r1, r8
 800466a:	1851      	adds	r1, r2, r1
 800466c:	6039      	str	r1, [r7, #0]
 800466e:	4649      	mov	r1, r9
 8004670:	414b      	adcs	r3, r1
 8004672:	607b      	str	r3, [r7, #4]
 8004674:	f04f 0200 	mov.w	r2, #0
 8004678:	f04f 0300 	mov.w	r3, #0
 800467c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004680:	4659      	mov	r1, fp
 8004682:	00cb      	lsls	r3, r1, #3
 8004684:	4651      	mov	r1, sl
 8004686:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800468a:	4651      	mov	r1, sl
 800468c:	00ca      	lsls	r2, r1, #3
 800468e:	4610      	mov	r0, r2
 8004690:	4619      	mov	r1, r3
 8004692:	4603      	mov	r3, r0
 8004694:	4642      	mov	r2, r8
 8004696:	189b      	adds	r3, r3, r2
 8004698:	66bb      	str	r3, [r7, #104]	@ 0x68
 800469a:	464b      	mov	r3, r9
 800469c:	460a      	mov	r2, r1
 800469e:	eb42 0303 	adc.w	r3, r2, r3
 80046a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80046a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	663b      	str	r3, [r7, #96]	@ 0x60
 80046ae:	667a      	str	r2, [r7, #100]	@ 0x64
 80046b0:	f04f 0200 	mov.w	r2, #0
 80046b4:	f04f 0300 	mov.w	r3, #0
 80046b8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80046bc:	4649      	mov	r1, r9
 80046be:	008b      	lsls	r3, r1, #2
 80046c0:	4641      	mov	r1, r8
 80046c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046c6:	4641      	mov	r1, r8
 80046c8:	008a      	lsls	r2, r1, #2
 80046ca:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80046ce:	f7fb fddf 	bl	8000290 <__aeabi_uldivmod>
 80046d2:	4602      	mov	r2, r0
 80046d4:	460b      	mov	r3, r1
 80046d6:	4b0d      	ldr	r3, [pc, #52]	@ (800470c <UART_SetConfig+0x4e4>)
 80046d8:	fba3 1302 	umull	r1, r3, r3, r2
 80046dc:	095b      	lsrs	r3, r3, #5
 80046de:	2164      	movs	r1, #100	@ 0x64
 80046e0:	fb01 f303 	mul.w	r3, r1, r3
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	011b      	lsls	r3, r3, #4
 80046e8:	3332      	adds	r3, #50	@ 0x32
 80046ea:	4a08      	ldr	r2, [pc, #32]	@ (800470c <UART_SetConfig+0x4e4>)
 80046ec:	fba2 2303 	umull	r2, r3, r2, r3
 80046f0:	095b      	lsrs	r3, r3, #5
 80046f2:	f003 020f 	and.w	r2, r3, #15
 80046f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4422      	add	r2, r4
 80046fe:	609a      	str	r2, [r3, #8]
}
 8004700:	bf00      	nop
 8004702:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004706:	46bd      	mov	sp, r7
 8004708:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800470c:	51eb851f 	.word	0x51eb851f

08004710 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004710:	b084      	sub	sp, #16
 8004712:	b580      	push	{r7, lr}
 8004714:	b084      	sub	sp, #16
 8004716:	af00      	add	r7, sp, #0
 8004718:	6078      	str	r0, [r7, #4]
 800471a:	f107 001c 	add.w	r0, r7, #28
 800471e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004722:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004726:	2b01      	cmp	r3, #1
 8004728:	d123      	bne.n	8004772 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800472e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800473e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004752:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004756:	2b01      	cmp	r3, #1
 8004758:	d105      	bne.n	8004766 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	68db      	ldr	r3, [r3, #12]
 800475e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f000 faa0 	bl	8004cac <USB_CoreReset>
 800476c:	4603      	mov	r3, r0
 800476e:	73fb      	strb	r3, [r7, #15]
 8004770:	e01b      	b.n	80047aa <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	68db      	ldr	r3, [r3, #12]
 8004776:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f000 fa94 	bl	8004cac <USB_CoreReset>
 8004784:	4603      	mov	r3, r0
 8004786:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004788:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800478c:	2b00      	cmp	r3, #0
 800478e:	d106      	bne.n	800479e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004794:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	639a      	str	r2, [r3, #56]	@ 0x38
 800479c:	e005      	b.n	80047aa <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047a2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80047aa:	7fbb      	ldrb	r3, [r7, #30]
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d10b      	bne.n	80047c8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	f043 0206 	orr.w	r2, r3, #6
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	f043 0220 	orr.w	r2, r3, #32
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80047c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3710      	adds	r7, #16
 80047ce:	46bd      	mov	sp, r7
 80047d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80047d4:	b004      	add	sp, #16
 80047d6:	4770      	bx	lr

080047d8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	f023 0201 	bic.w	r2, r3, #1
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80047ec:	2300      	movs	r3, #0
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	370c      	adds	r7, #12
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr

080047fa <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80047fa:	b580      	push	{r7, lr}
 80047fc:	b084      	sub	sp, #16
 80047fe:	af00      	add	r7, sp, #0
 8004800:	6078      	str	r0, [r7, #4]
 8004802:	460b      	mov	r3, r1
 8004804:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004806:	2300      	movs	r3, #0
 8004808:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	68db      	ldr	r3, [r3, #12]
 800480e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004816:	78fb      	ldrb	r3, [r7, #3]
 8004818:	2b01      	cmp	r3, #1
 800481a:	d115      	bne.n	8004848 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004828:	200a      	movs	r0, #10
 800482a:	f7fc fe79 	bl	8001520 <HAL_Delay>
      ms += 10U;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	330a      	adds	r3, #10
 8004832:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f000 fa2b 	bl	8004c90 <USB_GetMode>
 800483a:	4603      	mov	r3, r0
 800483c:	2b01      	cmp	r3, #1
 800483e:	d01e      	beq.n	800487e <USB_SetCurrentMode+0x84>
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2bc7      	cmp	r3, #199	@ 0xc7
 8004844:	d9f0      	bls.n	8004828 <USB_SetCurrentMode+0x2e>
 8004846:	e01a      	b.n	800487e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004848:	78fb      	ldrb	r3, [r7, #3]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d115      	bne.n	800487a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	68db      	ldr	r3, [r3, #12]
 8004852:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800485a:	200a      	movs	r0, #10
 800485c:	f7fc fe60 	bl	8001520 <HAL_Delay>
      ms += 10U;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	330a      	adds	r3, #10
 8004864:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f000 fa12 	bl	8004c90 <USB_GetMode>
 800486c:	4603      	mov	r3, r0
 800486e:	2b00      	cmp	r3, #0
 8004870:	d005      	beq.n	800487e <USB_SetCurrentMode+0x84>
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2bc7      	cmp	r3, #199	@ 0xc7
 8004876:	d9f0      	bls.n	800485a <USB_SetCurrentMode+0x60>
 8004878:	e001      	b.n	800487e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e005      	b.n	800488a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2bc8      	cmp	r3, #200	@ 0xc8
 8004882:	d101      	bne.n	8004888 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e000      	b.n	800488a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004888:	2300      	movs	r3, #0
}
 800488a:	4618      	mov	r0, r3
 800488c:	3710      	adds	r7, #16
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
	...

08004894 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004894:	b084      	sub	sp, #16
 8004896:	b580      	push	{r7, lr}
 8004898:	b086      	sub	sp, #24
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
 800489e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80048a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80048a6:	2300      	movs	r3, #0
 80048a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80048ae:	2300      	movs	r3, #0
 80048b0:	613b      	str	r3, [r7, #16]
 80048b2:	e009      	b.n	80048c8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	3340      	adds	r3, #64	@ 0x40
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	4413      	add	r3, r2
 80048be:	2200      	movs	r2, #0
 80048c0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	3301      	adds	r3, #1
 80048c6:	613b      	str	r3, [r7, #16]
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	2b0e      	cmp	r3, #14
 80048cc:	d9f2      	bls.n	80048b4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80048ce:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d11c      	bne.n	8004910 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	68fa      	ldr	r2, [r7, #12]
 80048e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80048e4:	f043 0302 	orr.w	r3, r3, #2
 80048e8:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048ee:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048fa:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004906:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	639a      	str	r2, [r3, #56]	@ 0x38
 800490e:	e00b      	b.n	8004928 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004914:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004920:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800492e:	461a      	mov	r2, r3
 8004930:	2300      	movs	r3, #0
 8004932:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004934:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004938:	2b01      	cmp	r3, #1
 800493a:	d10d      	bne.n	8004958 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800493c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004940:	2b00      	cmp	r3, #0
 8004942:	d104      	bne.n	800494e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004944:	2100      	movs	r1, #0
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f000 f968 	bl	8004c1c <USB_SetDevSpeed>
 800494c:	e008      	b.n	8004960 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800494e:	2101      	movs	r1, #1
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f000 f963 	bl	8004c1c <USB_SetDevSpeed>
 8004956:	e003      	b.n	8004960 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004958:	2103      	movs	r1, #3
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 f95e 	bl	8004c1c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004960:	2110      	movs	r1, #16
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f000 f8fa 	bl	8004b5c <USB_FlushTxFifo>
 8004968:	4603      	mov	r3, r0
 800496a:	2b00      	cmp	r3, #0
 800496c:	d001      	beq.n	8004972 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f000 f924 	bl	8004bc0 <USB_FlushRxFifo>
 8004978:	4603      	mov	r3, r0
 800497a:	2b00      	cmp	r3, #0
 800497c:	d001      	beq.n	8004982 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004988:	461a      	mov	r2, r3
 800498a:	2300      	movs	r3, #0
 800498c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004994:	461a      	mov	r2, r3
 8004996:	2300      	movs	r3, #0
 8004998:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049a0:	461a      	mov	r2, r3
 80049a2:	2300      	movs	r3, #0
 80049a4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80049a6:	2300      	movs	r3, #0
 80049a8:	613b      	str	r3, [r7, #16]
 80049aa:	e043      	b.n	8004a34 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	015a      	lsls	r2, r3, #5
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	4413      	add	r3, r2
 80049b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80049be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80049c2:	d118      	bne.n	80049f6 <USB_DevInit+0x162>
    {
      if (i == 0U)
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d10a      	bne.n	80049e0 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	015a      	lsls	r2, r3, #5
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	4413      	add	r3, r2
 80049d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049d6:	461a      	mov	r2, r3
 80049d8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80049dc:	6013      	str	r3, [r2, #0]
 80049de:	e013      	b.n	8004a08 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	015a      	lsls	r2, r3, #5
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	4413      	add	r3, r2
 80049e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049ec:	461a      	mov	r2, r3
 80049ee:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80049f2:	6013      	str	r3, [r2, #0]
 80049f4:	e008      	b.n	8004a08 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	015a      	lsls	r2, r3, #5
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	4413      	add	r3, r2
 80049fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a02:	461a      	mov	r2, r3
 8004a04:	2300      	movs	r3, #0
 8004a06:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	015a      	lsls	r2, r3, #5
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	4413      	add	r3, r2
 8004a10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a14:	461a      	mov	r2, r3
 8004a16:	2300      	movs	r3, #0
 8004a18:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	015a      	lsls	r2, r3, #5
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	4413      	add	r3, r2
 8004a22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a26:	461a      	mov	r2, r3
 8004a28:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004a2c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	3301      	adds	r3, #1
 8004a32:	613b      	str	r3, [r7, #16]
 8004a34:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004a38:	461a      	mov	r2, r3
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d3b5      	bcc.n	80049ac <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a40:	2300      	movs	r3, #0
 8004a42:	613b      	str	r3, [r7, #16]
 8004a44:	e043      	b.n	8004ace <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	015a      	lsls	r2, r3, #5
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	4413      	add	r3, r2
 8004a4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004a58:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004a5c:	d118      	bne.n	8004a90 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d10a      	bne.n	8004a7a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	015a      	lsls	r2, r3, #5
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	4413      	add	r3, r2
 8004a6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a70:	461a      	mov	r2, r3
 8004a72:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004a76:	6013      	str	r3, [r2, #0]
 8004a78:	e013      	b.n	8004aa2 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	015a      	lsls	r2, r3, #5
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	4413      	add	r3, r2
 8004a82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a86:	461a      	mov	r2, r3
 8004a88:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004a8c:	6013      	str	r3, [r2, #0]
 8004a8e:	e008      	b.n	8004aa2 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	015a      	lsls	r2, r3, #5
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	4413      	add	r3, r2
 8004a98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	015a      	lsls	r2, r3, #5
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	4413      	add	r3, r2
 8004aaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004aae:	461a      	mov	r2, r3
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	015a      	lsls	r2, r3, #5
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	4413      	add	r3, r2
 8004abc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004ac6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	3301      	adds	r3, #1
 8004acc:	613b      	str	r3, [r7, #16]
 8004ace:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d3b5      	bcc.n	8004a46 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	68fa      	ldr	r2, [r7, #12]
 8004ae4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004ae8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004aec:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004afa:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004afc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d105      	bne.n	8004b10 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	699b      	ldr	r3, [r3, #24]
 8004b08:	f043 0210 	orr.w	r2, r3, #16
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	699a      	ldr	r2, [r3, #24]
 8004b14:	4b10      	ldr	r3, [pc, #64]	@ (8004b58 <USB_DevInit+0x2c4>)
 8004b16:	4313      	orrs	r3, r2
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004b1c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d005      	beq.n	8004b30 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	699b      	ldr	r3, [r3, #24]
 8004b28:	f043 0208 	orr.w	r2, r3, #8
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004b30:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d107      	bne.n	8004b48 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	699b      	ldr	r3, [r3, #24]
 8004b3c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004b40:	f043 0304 	orr.w	r3, r3, #4
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004b48:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3718      	adds	r7, #24
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b54:	b004      	add	sp, #16
 8004b56:	4770      	bx	lr
 8004b58:	803c3800 	.word	0x803c3800

08004b5c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b085      	sub	sp, #20
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004b66:	2300      	movs	r3, #0
 8004b68:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	3301      	adds	r3, #1
 8004b6e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004b76:	d901      	bls.n	8004b7c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004b78:	2303      	movs	r3, #3
 8004b7a:	e01b      	b.n	8004bb4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	691b      	ldr	r3, [r3, #16]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	daf2      	bge.n	8004b6a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004b84:	2300      	movs	r3, #0
 8004b86:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	019b      	lsls	r3, r3, #6
 8004b8c:	f043 0220 	orr.w	r2, r3, #32
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	3301      	adds	r3, #1
 8004b98:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004ba0:	d901      	bls.n	8004ba6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004ba2:	2303      	movs	r3, #3
 8004ba4:	e006      	b.n	8004bb4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	691b      	ldr	r3, [r3, #16]
 8004baa:	f003 0320 	and.w	r3, r3, #32
 8004bae:	2b20      	cmp	r3, #32
 8004bb0:	d0f0      	beq.n	8004b94 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004bb2:	2300      	movs	r3, #0
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3714      	adds	r7, #20
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr

08004bc0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b085      	sub	sp, #20
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	3301      	adds	r3, #1
 8004bd0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004bd8:	d901      	bls.n	8004bde <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004bda:	2303      	movs	r3, #3
 8004bdc:	e018      	b.n	8004c10 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	691b      	ldr	r3, [r3, #16]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	daf2      	bge.n	8004bcc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004be6:	2300      	movs	r3, #0
 8004be8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2210      	movs	r2, #16
 8004bee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	3301      	adds	r3, #1
 8004bf4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004bfc:	d901      	bls.n	8004c02 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004bfe:	2303      	movs	r3, #3
 8004c00:	e006      	b.n	8004c10 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	691b      	ldr	r3, [r3, #16]
 8004c06:	f003 0310 	and.w	r3, r3, #16
 8004c0a:	2b10      	cmp	r3, #16
 8004c0c:	d0f0      	beq.n	8004bf0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004c0e:	2300      	movs	r3, #0
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3714      	adds	r7, #20
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr

08004c1c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b085      	sub	sp, #20
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	460b      	mov	r3, r1
 8004c26:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	78fb      	ldrb	r3, [r7, #3]
 8004c36:	68f9      	ldr	r1, [r7, #12]
 8004c38:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004c40:	2300      	movs	r3, #0
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3714      	adds	r7, #20
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr

08004c4e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004c4e:	b480      	push	{r7}
 8004c50:	b085      	sub	sp, #20
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	68fa      	ldr	r2, [r7, #12]
 8004c64:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004c68:	f023 0303 	bic.w	r3, r3, #3
 8004c6c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	68fa      	ldr	r2, [r7, #12]
 8004c78:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004c7c:	f043 0302 	orr.w	r3, r3, #2
 8004c80:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004c82:	2300      	movs	r3, #0
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	3714      	adds	r7, #20
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr

08004c90 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b083      	sub	sp, #12
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	695b      	ldr	r3, [r3, #20]
 8004c9c:	f003 0301 	and.w	r3, r3, #1
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	370c      	adds	r7, #12
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr

08004cac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b085      	sub	sp, #20
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	3301      	adds	r3, #1
 8004cbc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004cc4:	d901      	bls.n	8004cca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004cc6:	2303      	movs	r3, #3
 8004cc8:	e01b      	b.n	8004d02 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	691b      	ldr	r3, [r3, #16]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	daf2      	bge.n	8004cb8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	691b      	ldr	r3, [r3, #16]
 8004cda:	f043 0201 	orr.w	r2, r3, #1
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	3301      	adds	r3, #1
 8004ce6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004cee:	d901      	bls.n	8004cf4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	e006      	b.n	8004d02 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	691b      	ldr	r3, [r3, #16]
 8004cf8:	f003 0301 	and.w	r3, r3, #1
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d0f0      	beq.n	8004ce2 <USB_CoreReset+0x36>

  return HAL_OK;
 8004d00:	2300      	movs	r3, #0
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3714      	adds	r7, #20
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr
	...

08004d10 <siprintf>:
 8004d10:	b40e      	push	{r1, r2, r3}
 8004d12:	b500      	push	{lr}
 8004d14:	b09c      	sub	sp, #112	@ 0x70
 8004d16:	ab1d      	add	r3, sp, #116	@ 0x74
 8004d18:	9002      	str	r0, [sp, #8]
 8004d1a:	9006      	str	r0, [sp, #24]
 8004d1c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004d20:	4809      	ldr	r0, [pc, #36]	@ (8004d48 <siprintf+0x38>)
 8004d22:	9107      	str	r1, [sp, #28]
 8004d24:	9104      	str	r1, [sp, #16]
 8004d26:	4909      	ldr	r1, [pc, #36]	@ (8004d4c <siprintf+0x3c>)
 8004d28:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d2c:	9105      	str	r1, [sp, #20]
 8004d2e:	6800      	ldr	r0, [r0, #0]
 8004d30:	9301      	str	r3, [sp, #4]
 8004d32:	a902      	add	r1, sp, #8
 8004d34:	f000 f994 	bl	8005060 <_svfiprintf_r>
 8004d38:	9b02      	ldr	r3, [sp, #8]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	701a      	strb	r2, [r3, #0]
 8004d3e:	b01c      	add	sp, #112	@ 0x70
 8004d40:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d44:	b003      	add	sp, #12
 8004d46:	4770      	bx	lr
 8004d48:	2000000c 	.word	0x2000000c
 8004d4c:	ffff0208 	.word	0xffff0208

08004d50 <memset>:
 8004d50:	4402      	add	r2, r0
 8004d52:	4603      	mov	r3, r0
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d100      	bne.n	8004d5a <memset+0xa>
 8004d58:	4770      	bx	lr
 8004d5a:	f803 1b01 	strb.w	r1, [r3], #1
 8004d5e:	e7f9      	b.n	8004d54 <memset+0x4>

08004d60 <__errno>:
 8004d60:	4b01      	ldr	r3, [pc, #4]	@ (8004d68 <__errno+0x8>)
 8004d62:	6818      	ldr	r0, [r3, #0]
 8004d64:	4770      	bx	lr
 8004d66:	bf00      	nop
 8004d68:	2000000c 	.word	0x2000000c

08004d6c <__libc_init_array>:
 8004d6c:	b570      	push	{r4, r5, r6, lr}
 8004d6e:	4d0d      	ldr	r5, [pc, #52]	@ (8004da4 <__libc_init_array+0x38>)
 8004d70:	4c0d      	ldr	r4, [pc, #52]	@ (8004da8 <__libc_init_array+0x3c>)
 8004d72:	1b64      	subs	r4, r4, r5
 8004d74:	10a4      	asrs	r4, r4, #2
 8004d76:	2600      	movs	r6, #0
 8004d78:	42a6      	cmp	r6, r4
 8004d7a:	d109      	bne.n	8004d90 <__libc_init_array+0x24>
 8004d7c:	4d0b      	ldr	r5, [pc, #44]	@ (8004dac <__libc_init_array+0x40>)
 8004d7e:	4c0c      	ldr	r4, [pc, #48]	@ (8004db0 <__libc_init_array+0x44>)
 8004d80:	f000 fc66 	bl	8005650 <_init>
 8004d84:	1b64      	subs	r4, r4, r5
 8004d86:	10a4      	asrs	r4, r4, #2
 8004d88:	2600      	movs	r6, #0
 8004d8a:	42a6      	cmp	r6, r4
 8004d8c:	d105      	bne.n	8004d9a <__libc_init_array+0x2e>
 8004d8e:	bd70      	pop	{r4, r5, r6, pc}
 8004d90:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d94:	4798      	blx	r3
 8004d96:	3601      	adds	r6, #1
 8004d98:	e7ee      	b.n	8004d78 <__libc_init_array+0xc>
 8004d9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d9e:	4798      	blx	r3
 8004da0:	3601      	adds	r6, #1
 8004da2:	e7f2      	b.n	8004d8a <__libc_init_array+0x1e>
 8004da4:	080056d4 	.word	0x080056d4
 8004da8:	080056d4 	.word	0x080056d4
 8004dac:	080056d4 	.word	0x080056d4
 8004db0:	080056d8 	.word	0x080056d8

08004db4 <__retarget_lock_acquire_recursive>:
 8004db4:	4770      	bx	lr

08004db6 <__retarget_lock_release_recursive>:
 8004db6:	4770      	bx	lr

08004db8 <_free_r>:
 8004db8:	b538      	push	{r3, r4, r5, lr}
 8004dba:	4605      	mov	r5, r0
 8004dbc:	2900      	cmp	r1, #0
 8004dbe:	d041      	beq.n	8004e44 <_free_r+0x8c>
 8004dc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004dc4:	1f0c      	subs	r4, r1, #4
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	bfb8      	it	lt
 8004dca:	18e4      	addlt	r4, r4, r3
 8004dcc:	f000 f8e0 	bl	8004f90 <__malloc_lock>
 8004dd0:	4a1d      	ldr	r2, [pc, #116]	@ (8004e48 <_free_r+0x90>)
 8004dd2:	6813      	ldr	r3, [r2, #0]
 8004dd4:	b933      	cbnz	r3, 8004de4 <_free_r+0x2c>
 8004dd6:	6063      	str	r3, [r4, #4]
 8004dd8:	6014      	str	r4, [r2, #0]
 8004dda:	4628      	mov	r0, r5
 8004ddc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004de0:	f000 b8dc 	b.w	8004f9c <__malloc_unlock>
 8004de4:	42a3      	cmp	r3, r4
 8004de6:	d908      	bls.n	8004dfa <_free_r+0x42>
 8004de8:	6820      	ldr	r0, [r4, #0]
 8004dea:	1821      	adds	r1, r4, r0
 8004dec:	428b      	cmp	r3, r1
 8004dee:	bf01      	itttt	eq
 8004df0:	6819      	ldreq	r1, [r3, #0]
 8004df2:	685b      	ldreq	r3, [r3, #4]
 8004df4:	1809      	addeq	r1, r1, r0
 8004df6:	6021      	streq	r1, [r4, #0]
 8004df8:	e7ed      	b.n	8004dd6 <_free_r+0x1e>
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	b10b      	cbz	r3, 8004e04 <_free_r+0x4c>
 8004e00:	42a3      	cmp	r3, r4
 8004e02:	d9fa      	bls.n	8004dfa <_free_r+0x42>
 8004e04:	6811      	ldr	r1, [r2, #0]
 8004e06:	1850      	adds	r0, r2, r1
 8004e08:	42a0      	cmp	r0, r4
 8004e0a:	d10b      	bne.n	8004e24 <_free_r+0x6c>
 8004e0c:	6820      	ldr	r0, [r4, #0]
 8004e0e:	4401      	add	r1, r0
 8004e10:	1850      	adds	r0, r2, r1
 8004e12:	4283      	cmp	r3, r0
 8004e14:	6011      	str	r1, [r2, #0]
 8004e16:	d1e0      	bne.n	8004dda <_free_r+0x22>
 8004e18:	6818      	ldr	r0, [r3, #0]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	6053      	str	r3, [r2, #4]
 8004e1e:	4408      	add	r0, r1
 8004e20:	6010      	str	r0, [r2, #0]
 8004e22:	e7da      	b.n	8004dda <_free_r+0x22>
 8004e24:	d902      	bls.n	8004e2c <_free_r+0x74>
 8004e26:	230c      	movs	r3, #12
 8004e28:	602b      	str	r3, [r5, #0]
 8004e2a:	e7d6      	b.n	8004dda <_free_r+0x22>
 8004e2c:	6820      	ldr	r0, [r4, #0]
 8004e2e:	1821      	adds	r1, r4, r0
 8004e30:	428b      	cmp	r3, r1
 8004e32:	bf04      	itt	eq
 8004e34:	6819      	ldreq	r1, [r3, #0]
 8004e36:	685b      	ldreq	r3, [r3, #4]
 8004e38:	6063      	str	r3, [r4, #4]
 8004e3a:	bf04      	itt	eq
 8004e3c:	1809      	addeq	r1, r1, r0
 8004e3e:	6021      	streq	r1, [r4, #0]
 8004e40:	6054      	str	r4, [r2, #4]
 8004e42:	e7ca      	b.n	8004dda <_free_r+0x22>
 8004e44:	bd38      	pop	{r3, r4, r5, pc}
 8004e46:	bf00      	nop
 8004e48:	200009f8 	.word	0x200009f8

08004e4c <sbrk_aligned>:
 8004e4c:	b570      	push	{r4, r5, r6, lr}
 8004e4e:	4e0f      	ldr	r6, [pc, #60]	@ (8004e8c <sbrk_aligned+0x40>)
 8004e50:	460c      	mov	r4, r1
 8004e52:	6831      	ldr	r1, [r6, #0]
 8004e54:	4605      	mov	r5, r0
 8004e56:	b911      	cbnz	r1, 8004e5e <sbrk_aligned+0x12>
 8004e58:	f000 fba6 	bl	80055a8 <_sbrk_r>
 8004e5c:	6030      	str	r0, [r6, #0]
 8004e5e:	4621      	mov	r1, r4
 8004e60:	4628      	mov	r0, r5
 8004e62:	f000 fba1 	bl	80055a8 <_sbrk_r>
 8004e66:	1c43      	adds	r3, r0, #1
 8004e68:	d103      	bne.n	8004e72 <sbrk_aligned+0x26>
 8004e6a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004e6e:	4620      	mov	r0, r4
 8004e70:	bd70      	pop	{r4, r5, r6, pc}
 8004e72:	1cc4      	adds	r4, r0, #3
 8004e74:	f024 0403 	bic.w	r4, r4, #3
 8004e78:	42a0      	cmp	r0, r4
 8004e7a:	d0f8      	beq.n	8004e6e <sbrk_aligned+0x22>
 8004e7c:	1a21      	subs	r1, r4, r0
 8004e7e:	4628      	mov	r0, r5
 8004e80:	f000 fb92 	bl	80055a8 <_sbrk_r>
 8004e84:	3001      	adds	r0, #1
 8004e86:	d1f2      	bne.n	8004e6e <sbrk_aligned+0x22>
 8004e88:	e7ef      	b.n	8004e6a <sbrk_aligned+0x1e>
 8004e8a:	bf00      	nop
 8004e8c:	200009f4 	.word	0x200009f4

08004e90 <_malloc_r>:
 8004e90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e94:	1ccd      	adds	r5, r1, #3
 8004e96:	f025 0503 	bic.w	r5, r5, #3
 8004e9a:	3508      	adds	r5, #8
 8004e9c:	2d0c      	cmp	r5, #12
 8004e9e:	bf38      	it	cc
 8004ea0:	250c      	movcc	r5, #12
 8004ea2:	2d00      	cmp	r5, #0
 8004ea4:	4606      	mov	r6, r0
 8004ea6:	db01      	blt.n	8004eac <_malloc_r+0x1c>
 8004ea8:	42a9      	cmp	r1, r5
 8004eaa:	d904      	bls.n	8004eb6 <_malloc_r+0x26>
 8004eac:	230c      	movs	r3, #12
 8004eae:	6033      	str	r3, [r6, #0]
 8004eb0:	2000      	movs	r0, #0
 8004eb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004eb6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004f8c <_malloc_r+0xfc>
 8004eba:	f000 f869 	bl	8004f90 <__malloc_lock>
 8004ebe:	f8d8 3000 	ldr.w	r3, [r8]
 8004ec2:	461c      	mov	r4, r3
 8004ec4:	bb44      	cbnz	r4, 8004f18 <_malloc_r+0x88>
 8004ec6:	4629      	mov	r1, r5
 8004ec8:	4630      	mov	r0, r6
 8004eca:	f7ff ffbf 	bl	8004e4c <sbrk_aligned>
 8004ece:	1c43      	adds	r3, r0, #1
 8004ed0:	4604      	mov	r4, r0
 8004ed2:	d158      	bne.n	8004f86 <_malloc_r+0xf6>
 8004ed4:	f8d8 4000 	ldr.w	r4, [r8]
 8004ed8:	4627      	mov	r7, r4
 8004eda:	2f00      	cmp	r7, #0
 8004edc:	d143      	bne.n	8004f66 <_malloc_r+0xd6>
 8004ede:	2c00      	cmp	r4, #0
 8004ee0:	d04b      	beq.n	8004f7a <_malloc_r+0xea>
 8004ee2:	6823      	ldr	r3, [r4, #0]
 8004ee4:	4639      	mov	r1, r7
 8004ee6:	4630      	mov	r0, r6
 8004ee8:	eb04 0903 	add.w	r9, r4, r3
 8004eec:	f000 fb5c 	bl	80055a8 <_sbrk_r>
 8004ef0:	4581      	cmp	r9, r0
 8004ef2:	d142      	bne.n	8004f7a <_malloc_r+0xea>
 8004ef4:	6821      	ldr	r1, [r4, #0]
 8004ef6:	1a6d      	subs	r5, r5, r1
 8004ef8:	4629      	mov	r1, r5
 8004efa:	4630      	mov	r0, r6
 8004efc:	f7ff ffa6 	bl	8004e4c <sbrk_aligned>
 8004f00:	3001      	adds	r0, #1
 8004f02:	d03a      	beq.n	8004f7a <_malloc_r+0xea>
 8004f04:	6823      	ldr	r3, [r4, #0]
 8004f06:	442b      	add	r3, r5
 8004f08:	6023      	str	r3, [r4, #0]
 8004f0a:	f8d8 3000 	ldr.w	r3, [r8]
 8004f0e:	685a      	ldr	r2, [r3, #4]
 8004f10:	bb62      	cbnz	r2, 8004f6c <_malloc_r+0xdc>
 8004f12:	f8c8 7000 	str.w	r7, [r8]
 8004f16:	e00f      	b.n	8004f38 <_malloc_r+0xa8>
 8004f18:	6822      	ldr	r2, [r4, #0]
 8004f1a:	1b52      	subs	r2, r2, r5
 8004f1c:	d420      	bmi.n	8004f60 <_malloc_r+0xd0>
 8004f1e:	2a0b      	cmp	r2, #11
 8004f20:	d917      	bls.n	8004f52 <_malloc_r+0xc2>
 8004f22:	1961      	adds	r1, r4, r5
 8004f24:	42a3      	cmp	r3, r4
 8004f26:	6025      	str	r5, [r4, #0]
 8004f28:	bf18      	it	ne
 8004f2a:	6059      	strne	r1, [r3, #4]
 8004f2c:	6863      	ldr	r3, [r4, #4]
 8004f2e:	bf08      	it	eq
 8004f30:	f8c8 1000 	streq.w	r1, [r8]
 8004f34:	5162      	str	r2, [r4, r5]
 8004f36:	604b      	str	r3, [r1, #4]
 8004f38:	4630      	mov	r0, r6
 8004f3a:	f000 f82f 	bl	8004f9c <__malloc_unlock>
 8004f3e:	f104 000b 	add.w	r0, r4, #11
 8004f42:	1d23      	adds	r3, r4, #4
 8004f44:	f020 0007 	bic.w	r0, r0, #7
 8004f48:	1ac2      	subs	r2, r0, r3
 8004f4a:	bf1c      	itt	ne
 8004f4c:	1a1b      	subne	r3, r3, r0
 8004f4e:	50a3      	strne	r3, [r4, r2]
 8004f50:	e7af      	b.n	8004eb2 <_malloc_r+0x22>
 8004f52:	6862      	ldr	r2, [r4, #4]
 8004f54:	42a3      	cmp	r3, r4
 8004f56:	bf0c      	ite	eq
 8004f58:	f8c8 2000 	streq.w	r2, [r8]
 8004f5c:	605a      	strne	r2, [r3, #4]
 8004f5e:	e7eb      	b.n	8004f38 <_malloc_r+0xa8>
 8004f60:	4623      	mov	r3, r4
 8004f62:	6864      	ldr	r4, [r4, #4]
 8004f64:	e7ae      	b.n	8004ec4 <_malloc_r+0x34>
 8004f66:	463c      	mov	r4, r7
 8004f68:	687f      	ldr	r7, [r7, #4]
 8004f6a:	e7b6      	b.n	8004eda <_malloc_r+0x4a>
 8004f6c:	461a      	mov	r2, r3
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	42a3      	cmp	r3, r4
 8004f72:	d1fb      	bne.n	8004f6c <_malloc_r+0xdc>
 8004f74:	2300      	movs	r3, #0
 8004f76:	6053      	str	r3, [r2, #4]
 8004f78:	e7de      	b.n	8004f38 <_malloc_r+0xa8>
 8004f7a:	230c      	movs	r3, #12
 8004f7c:	6033      	str	r3, [r6, #0]
 8004f7e:	4630      	mov	r0, r6
 8004f80:	f000 f80c 	bl	8004f9c <__malloc_unlock>
 8004f84:	e794      	b.n	8004eb0 <_malloc_r+0x20>
 8004f86:	6005      	str	r5, [r0, #0]
 8004f88:	e7d6      	b.n	8004f38 <_malloc_r+0xa8>
 8004f8a:	bf00      	nop
 8004f8c:	200009f8 	.word	0x200009f8

08004f90 <__malloc_lock>:
 8004f90:	4801      	ldr	r0, [pc, #4]	@ (8004f98 <__malloc_lock+0x8>)
 8004f92:	f7ff bf0f 	b.w	8004db4 <__retarget_lock_acquire_recursive>
 8004f96:	bf00      	nop
 8004f98:	200009f0 	.word	0x200009f0

08004f9c <__malloc_unlock>:
 8004f9c:	4801      	ldr	r0, [pc, #4]	@ (8004fa4 <__malloc_unlock+0x8>)
 8004f9e:	f7ff bf0a 	b.w	8004db6 <__retarget_lock_release_recursive>
 8004fa2:	bf00      	nop
 8004fa4:	200009f0 	.word	0x200009f0

08004fa8 <__ssputs_r>:
 8004fa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fac:	688e      	ldr	r6, [r1, #8]
 8004fae:	461f      	mov	r7, r3
 8004fb0:	42be      	cmp	r6, r7
 8004fb2:	680b      	ldr	r3, [r1, #0]
 8004fb4:	4682      	mov	sl, r0
 8004fb6:	460c      	mov	r4, r1
 8004fb8:	4690      	mov	r8, r2
 8004fba:	d82d      	bhi.n	8005018 <__ssputs_r+0x70>
 8004fbc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004fc0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004fc4:	d026      	beq.n	8005014 <__ssputs_r+0x6c>
 8004fc6:	6965      	ldr	r5, [r4, #20]
 8004fc8:	6909      	ldr	r1, [r1, #16]
 8004fca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004fce:	eba3 0901 	sub.w	r9, r3, r1
 8004fd2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004fd6:	1c7b      	adds	r3, r7, #1
 8004fd8:	444b      	add	r3, r9
 8004fda:	106d      	asrs	r5, r5, #1
 8004fdc:	429d      	cmp	r5, r3
 8004fde:	bf38      	it	cc
 8004fe0:	461d      	movcc	r5, r3
 8004fe2:	0553      	lsls	r3, r2, #21
 8004fe4:	d527      	bpl.n	8005036 <__ssputs_r+0x8e>
 8004fe6:	4629      	mov	r1, r5
 8004fe8:	f7ff ff52 	bl	8004e90 <_malloc_r>
 8004fec:	4606      	mov	r6, r0
 8004fee:	b360      	cbz	r0, 800504a <__ssputs_r+0xa2>
 8004ff0:	6921      	ldr	r1, [r4, #16]
 8004ff2:	464a      	mov	r2, r9
 8004ff4:	f000 fae8 	bl	80055c8 <memcpy>
 8004ff8:	89a3      	ldrh	r3, [r4, #12]
 8004ffa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004ffe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005002:	81a3      	strh	r3, [r4, #12]
 8005004:	6126      	str	r6, [r4, #16]
 8005006:	6165      	str	r5, [r4, #20]
 8005008:	444e      	add	r6, r9
 800500a:	eba5 0509 	sub.w	r5, r5, r9
 800500e:	6026      	str	r6, [r4, #0]
 8005010:	60a5      	str	r5, [r4, #8]
 8005012:	463e      	mov	r6, r7
 8005014:	42be      	cmp	r6, r7
 8005016:	d900      	bls.n	800501a <__ssputs_r+0x72>
 8005018:	463e      	mov	r6, r7
 800501a:	6820      	ldr	r0, [r4, #0]
 800501c:	4632      	mov	r2, r6
 800501e:	4641      	mov	r1, r8
 8005020:	f000 faa8 	bl	8005574 <memmove>
 8005024:	68a3      	ldr	r3, [r4, #8]
 8005026:	1b9b      	subs	r3, r3, r6
 8005028:	60a3      	str	r3, [r4, #8]
 800502a:	6823      	ldr	r3, [r4, #0]
 800502c:	4433      	add	r3, r6
 800502e:	6023      	str	r3, [r4, #0]
 8005030:	2000      	movs	r0, #0
 8005032:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005036:	462a      	mov	r2, r5
 8005038:	f000 fad4 	bl	80055e4 <_realloc_r>
 800503c:	4606      	mov	r6, r0
 800503e:	2800      	cmp	r0, #0
 8005040:	d1e0      	bne.n	8005004 <__ssputs_r+0x5c>
 8005042:	6921      	ldr	r1, [r4, #16]
 8005044:	4650      	mov	r0, sl
 8005046:	f7ff feb7 	bl	8004db8 <_free_r>
 800504a:	230c      	movs	r3, #12
 800504c:	f8ca 3000 	str.w	r3, [sl]
 8005050:	89a3      	ldrh	r3, [r4, #12]
 8005052:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005056:	81a3      	strh	r3, [r4, #12]
 8005058:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800505c:	e7e9      	b.n	8005032 <__ssputs_r+0x8a>
	...

08005060 <_svfiprintf_r>:
 8005060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005064:	4698      	mov	r8, r3
 8005066:	898b      	ldrh	r3, [r1, #12]
 8005068:	061b      	lsls	r3, r3, #24
 800506a:	b09d      	sub	sp, #116	@ 0x74
 800506c:	4607      	mov	r7, r0
 800506e:	460d      	mov	r5, r1
 8005070:	4614      	mov	r4, r2
 8005072:	d510      	bpl.n	8005096 <_svfiprintf_r+0x36>
 8005074:	690b      	ldr	r3, [r1, #16]
 8005076:	b973      	cbnz	r3, 8005096 <_svfiprintf_r+0x36>
 8005078:	2140      	movs	r1, #64	@ 0x40
 800507a:	f7ff ff09 	bl	8004e90 <_malloc_r>
 800507e:	6028      	str	r0, [r5, #0]
 8005080:	6128      	str	r0, [r5, #16]
 8005082:	b930      	cbnz	r0, 8005092 <_svfiprintf_r+0x32>
 8005084:	230c      	movs	r3, #12
 8005086:	603b      	str	r3, [r7, #0]
 8005088:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800508c:	b01d      	add	sp, #116	@ 0x74
 800508e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005092:	2340      	movs	r3, #64	@ 0x40
 8005094:	616b      	str	r3, [r5, #20]
 8005096:	2300      	movs	r3, #0
 8005098:	9309      	str	r3, [sp, #36]	@ 0x24
 800509a:	2320      	movs	r3, #32
 800509c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80050a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80050a4:	2330      	movs	r3, #48	@ 0x30
 80050a6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005244 <_svfiprintf_r+0x1e4>
 80050aa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80050ae:	f04f 0901 	mov.w	r9, #1
 80050b2:	4623      	mov	r3, r4
 80050b4:	469a      	mov	sl, r3
 80050b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80050ba:	b10a      	cbz	r2, 80050c0 <_svfiprintf_r+0x60>
 80050bc:	2a25      	cmp	r2, #37	@ 0x25
 80050be:	d1f9      	bne.n	80050b4 <_svfiprintf_r+0x54>
 80050c0:	ebba 0b04 	subs.w	fp, sl, r4
 80050c4:	d00b      	beq.n	80050de <_svfiprintf_r+0x7e>
 80050c6:	465b      	mov	r3, fp
 80050c8:	4622      	mov	r2, r4
 80050ca:	4629      	mov	r1, r5
 80050cc:	4638      	mov	r0, r7
 80050ce:	f7ff ff6b 	bl	8004fa8 <__ssputs_r>
 80050d2:	3001      	adds	r0, #1
 80050d4:	f000 80a7 	beq.w	8005226 <_svfiprintf_r+0x1c6>
 80050d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80050da:	445a      	add	r2, fp
 80050dc:	9209      	str	r2, [sp, #36]	@ 0x24
 80050de:	f89a 3000 	ldrb.w	r3, [sl]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	f000 809f 	beq.w	8005226 <_svfiprintf_r+0x1c6>
 80050e8:	2300      	movs	r3, #0
 80050ea:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80050ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80050f2:	f10a 0a01 	add.w	sl, sl, #1
 80050f6:	9304      	str	r3, [sp, #16]
 80050f8:	9307      	str	r3, [sp, #28]
 80050fa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80050fe:	931a      	str	r3, [sp, #104]	@ 0x68
 8005100:	4654      	mov	r4, sl
 8005102:	2205      	movs	r2, #5
 8005104:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005108:	484e      	ldr	r0, [pc, #312]	@ (8005244 <_svfiprintf_r+0x1e4>)
 800510a:	f7fb f871 	bl	80001f0 <memchr>
 800510e:	9a04      	ldr	r2, [sp, #16]
 8005110:	b9d8      	cbnz	r0, 800514a <_svfiprintf_r+0xea>
 8005112:	06d0      	lsls	r0, r2, #27
 8005114:	bf44      	itt	mi
 8005116:	2320      	movmi	r3, #32
 8005118:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800511c:	0711      	lsls	r1, r2, #28
 800511e:	bf44      	itt	mi
 8005120:	232b      	movmi	r3, #43	@ 0x2b
 8005122:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005126:	f89a 3000 	ldrb.w	r3, [sl]
 800512a:	2b2a      	cmp	r3, #42	@ 0x2a
 800512c:	d015      	beq.n	800515a <_svfiprintf_r+0xfa>
 800512e:	9a07      	ldr	r2, [sp, #28]
 8005130:	4654      	mov	r4, sl
 8005132:	2000      	movs	r0, #0
 8005134:	f04f 0c0a 	mov.w	ip, #10
 8005138:	4621      	mov	r1, r4
 800513a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800513e:	3b30      	subs	r3, #48	@ 0x30
 8005140:	2b09      	cmp	r3, #9
 8005142:	d94b      	bls.n	80051dc <_svfiprintf_r+0x17c>
 8005144:	b1b0      	cbz	r0, 8005174 <_svfiprintf_r+0x114>
 8005146:	9207      	str	r2, [sp, #28]
 8005148:	e014      	b.n	8005174 <_svfiprintf_r+0x114>
 800514a:	eba0 0308 	sub.w	r3, r0, r8
 800514e:	fa09 f303 	lsl.w	r3, r9, r3
 8005152:	4313      	orrs	r3, r2
 8005154:	9304      	str	r3, [sp, #16]
 8005156:	46a2      	mov	sl, r4
 8005158:	e7d2      	b.n	8005100 <_svfiprintf_r+0xa0>
 800515a:	9b03      	ldr	r3, [sp, #12]
 800515c:	1d19      	adds	r1, r3, #4
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	9103      	str	r1, [sp, #12]
 8005162:	2b00      	cmp	r3, #0
 8005164:	bfbb      	ittet	lt
 8005166:	425b      	neglt	r3, r3
 8005168:	f042 0202 	orrlt.w	r2, r2, #2
 800516c:	9307      	strge	r3, [sp, #28]
 800516e:	9307      	strlt	r3, [sp, #28]
 8005170:	bfb8      	it	lt
 8005172:	9204      	strlt	r2, [sp, #16]
 8005174:	7823      	ldrb	r3, [r4, #0]
 8005176:	2b2e      	cmp	r3, #46	@ 0x2e
 8005178:	d10a      	bne.n	8005190 <_svfiprintf_r+0x130>
 800517a:	7863      	ldrb	r3, [r4, #1]
 800517c:	2b2a      	cmp	r3, #42	@ 0x2a
 800517e:	d132      	bne.n	80051e6 <_svfiprintf_r+0x186>
 8005180:	9b03      	ldr	r3, [sp, #12]
 8005182:	1d1a      	adds	r2, r3, #4
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	9203      	str	r2, [sp, #12]
 8005188:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800518c:	3402      	adds	r4, #2
 800518e:	9305      	str	r3, [sp, #20]
 8005190:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005254 <_svfiprintf_r+0x1f4>
 8005194:	7821      	ldrb	r1, [r4, #0]
 8005196:	2203      	movs	r2, #3
 8005198:	4650      	mov	r0, sl
 800519a:	f7fb f829 	bl	80001f0 <memchr>
 800519e:	b138      	cbz	r0, 80051b0 <_svfiprintf_r+0x150>
 80051a0:	9b04      	ldr	r3, [sp, #16]
 80051a2:	eba0 000a 	sub.w	r0, r0, sl
 80051a6:	2240      	movs	r2, #64	@ 0x40
 80051a8:	4082      	lsls	r2, r0
 80051aa:	4313      	orrs	r3, r2
 80051ac:	3401      	adds	r4, #1
 80051ae:	9304      	str	r3, [sp, #16]
 80051b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051b4:	4824      	ldr	r0, [pc, #144]	@ (8005248 <_svfiprintf_r+0x1e8>)
 80051b6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80051ba:	2206      	movs	r2, #6
 80051bc:	f7fb f818 	bl	80001f0 <memchr>
 80051c0:	2800      	cmp	r0, #0
 80051c2:	d036      	beq.n	8005232 <_svfiprintf_r+0x1d2>
 80051c4:	4b21      	ldr	r3, [pc, #132]	@ (800524c <_svfiprintf_r+0x1ec>)
 80051c6:	bb1b      	cbnz	r3, 8005210 <_svfiprintf_r+0x1b0>
 80051c8:	9b03      	ldr	r3, [sp, #12]
 80051ca:	3307      	adds	r3, #7
 80051cc:	f023 0307 	bic.w	r3, r3, #7
 80051d0:	3308      	adds	r3, #8
 80051d2:	9303      	str	r3, [sp, #12]
 80051d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80051d6:	4433      	add	r3, r6
 80051d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80051da:	e76a      	b.n	80050b2 <_svfiprintf_r+0x52>
 80051dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80051e0:	460c      	mov	r4, r1
 80051e2:	2001      	movs	r0, #1
 80051e4:	e7a8      	b.n	8005138 <_svfiprintf_r+0xd8>
 80051e6:	2300      	movs	r3, #0
 80051e8:	3401      	adds	r4, #1
 80051ea:	9305      	str	r3, [sp, #20]
 80051ec:	4619      	mov	r1, r3
 80051ee:	f04f 0c0a 	mov.w	ip, #10
 80051f2:	4620      	mov	r0, r4
 80051f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80051f8:	3a30      	subs	r2, #48	@ 0x30
 80051fa:	2a09      	cmp	r2, #9
 80051fc:	d903      	bls.n	8005206 <_svfiprintf_r+0x1a6>
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d0c6      	beq.n	8005190 <_svfiprintf_r+0x130>
 8005202:	9105      	str	r1, [sp, #20]
 8005204:	e7c4      	b.n	8005190 <_svfiprintf_r+0x130>
 8005206:	fb0c 2101 	mla	r1, ip, r1, r2
 800520a:	4604      	mov	r4, r0
 800520c:	2301      	movs	r3, #1
 800520e:	e7f0      	b.n	80051f2 <_svfiprintf_r+0x192>
 8005210:	ab03      	add	r3, sp, #12
 8005212:	9300      	str	r3, [sp, #0]
 8005214:	462a      	mov	r2, r5
 8005216:	4b0e      	ldr	r3, [pc, #56]	@ (8005250 <_svfiprintf_r+0x1f0>)
 8005218:	a904      	add	r1, sp, #16
 800521a:	4638      	mov	r0, r7
 800521c:	f3af 8000 	nop.w
 8005220:	1c42      	adds	r2, r0, #1
 8005222:	4606      	mov	r6, r0
 8005224:	d1d6      	bne.n	80051d4 <_svfiprintf_r+0x174>
 8005226:	89ab      	ldrh	r3, [r5, #12]
 8005228:	065b      	lsls	r3, r3, #25
 800522a:	f53f af2d 	bmi.w	8005088 <_svfiprintf_r+0x28>
 800522e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005230:	e72c      	b.n	800508c <_svfiprintf_r+0x2c>
 8005232:	ab03      	add	r3, sp, #12
 8005234:	9300      	str	r3, [sp, #0]
 8005236:	462a      	mov	r2, r5
 8005238:	4b05      	ldr	r3, [pc, #20]	@ (8005250 <_svfiprintf_r+0x1f0>)
 800523a:	a904      	add	r1, sp, #16
 800523c:	4638      	mov	r0, r7
 800523e:	f000 f879 	bl	8005334 <_printf_i>
 8005242:	e7ed      	b.n	8005220 <_svfiprintf_r+0x1c0>
 8005244:	08005698 	.word	0x08005698
 8005248:	080056a2 	.word	0x080056a2
 800524c:	00000000 	.word	0x00000000
 8005250:	08004fa9 	.word	0x08004fa9
 8005254:	0800569e 	.word	0x0800569e

08005258 <_printf_common>:
 8005258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800525c:	4616      	mov	r6, r2
 800525e:	4698      	mov	r8, r3
 8005260:	688a      	ldr	r2, [r1, #8]
 8005262:	690b      	ldr	r3, [r1, #16]
 8005264:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005268:	4293      	cmp	r3, r2
 800526a:	bfb8      	it	lt
 800526c:	4613      	movlt	r3, r2
 800526e:	6033      	str	r3, [r6, #0]
 8005270:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005274:	4607      	mov	r7, r0
 8005276:	460c      	mov	r4, r1
 8005278:	b10a      	cbz	r2, 800527e <_printf_common+0x26>
 800527a:	3301      	adds	r3, #1
 800527c:	6033      	str	r3, [r6, #0]
 800527e:	6823      	ldr	r3, [r4, #0]
 8005280:	0699      	lsls	r1, r3, #26
 8005282:	bf42      	ittt	mi
 8005284:	6833      	ldrmi	r3, [r6, #0]
 8005286:	3302      	addmi	r3, #2
 8005288:	6033      	strmi	r3, [r6, #0]
 800528a:	6825      	ldr	r5, [r4, #0]
 800528c:	f015 0506 	ands.w	r5, r5, #6
 8005290:	d106      	bne.n	80052a0 <_printf_common+0x48>
 8005292:	f104 0a19 	add.w	sl, r4, #25
 8005296:	68e3      	ldr	r3, [r4, #12]
 8005298:	6832      	ldr	r2, [r6, #0]
 800529a:	1a9b      	subs	r3, r3, r2
 800529c:	42ab      	cmp	r3, r5
 800529e:	dc26      	bgt.n	80052ee <_printf_common+0x96>
 80052a0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80052a4:	6822      	ldr	r2, [r4, #0]
 80052a6:	3b00      	subs	r3, #0
 80052a8:	bf18      	it	ne
 80052aa:	2301      	movne	r3, #1
 80052ac:	0692      	lsls	r2, r2, #26
 80052ae:	d42b      	bmi.n	8005308 <_printf_common+0xb0>
 80052b0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80052b4:	4641      	mov	r1, r8
 80052b6:	4638      	mov	r0, r7
 80052b8:	47c8      	blx	r9
 80052ba:	3001      	adds	r0, #1
 80052bc:	d01e      	beq.n	80052fc <_printf_common+0xa4>
 80052be:	6823      	ldr	r3, [r4, #0]
 80052c0:	6922      	ldr	r2, [r4, #16]
 80052c2:	f003 0306 	and.w	r3, r3, #6
 80052c6:	2b04      	cmp	r3, #4
 80052c8:	bf02      	ittt	eq
 80052ca:	68e5      	ldreq	r5, [r4, #12]
 80052cc:	6833      	ldreq	r3, [r6, #0]
 80052ce:	1aed      	subeq	r5, r5, r3
 80052d0:	68a3      	ldr	r3, [r4, #8]
 80052d2:	bf0c      	ite	eq
 80052d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80052d8:	2500      	movne	r5, #0
 80052da:	4293      	cmp	r3, r2
 80052dc:	bfc4      	itt	gt
 80052de:	1a9b      	subgt	r3, r3, r2
 80052e0:	18ed      	addgt	r5, r5, r3
 80052e2:	2600      	movs	r6, #0
 80052e4:	341a      	adds	r4, #26
 80052e6:	42b5      	cmp	r5, r6
 80052e8:	d11a      	bne.n	8005320 <_printf_common+0xc8>
 80052ea:	2000      	movs	r0, #0
 80052ec:	e008      	b.n	8005300 <_printf_common+0xa8>
 80052ee:	2301      	movs	r3, #1
 80052f0:	4652      	mov	r2, sl
 80052f2:	4641      	mov	r1, r8
 80052f4:	4638      	mov	r0, r7
 80052f6:	47c8      	blx	r9
 80052f8:	3001      	adds	r0, #1
 80052fa:	d103      	bne.n	8005304 <_printf_common+0xac>
 80052fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005304:	3501      	adds	r5, #1
 8005306:	e7c6      	b.n	8005296 <_printf_common+0x3e>
 8005308:	18e1      	adds	r1, r4, r3
 800530a:	1c5a      	adds	r2, r3, #1
 800530c:	2030      	movs	r0, #48	@ 0x30
 800530e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005312:	4422      	add	r2, r4
 8005314:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005318:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800531c:	3302      	adds	r3, #2
 800531e:	e7c7      	b.n	80052b0 <_printf_common+0x58>
 8005320:	2301      	movs	r3, #1
 8005322:	4622      	mov	r2, r4
 8005324:	4641      	mov	r1, r8
 8005326:	4638      	mov	r0, r7
 8005328:	47c8      	blx	r9
 800532a:	3001      	adds	r0, #1
 800532c:	d0e6      	beq.n	80052fc <_printf_common+0xa4>
 800532e:	3601      	adds	r6, #1
 8005330:	e7d9      	b.n	80052e6 <_printf_common+0x8e>
	...

08005334 <_printf_i>:
 8005334:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005338:	7e0f      	ldrb	r7, [r1, #24]
 800533a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800533c:	2f78      	cmp	r7, #120	@ 0x78
 800533e:	4691      	mov	r9, r2
 8005340:	4680      	mov	r8, r0
 8005342:	460c      	mov	r4, r1
 8005344:	469a      	mov	sl, r3
 8005346:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800534a:	d807      	bhi.n	800535c <_printf_i+0x28>
 800534c:	2f62      	cmp	r7, #98	@ 0x62
 800534e:	d80a      	bhi.n	8005366 <_printf_i+0x32>
 8005350:	2f00      	cmp	r7, #0
 8005352:	f000 80d2 	beq.w	80054fa <_printf_i+0x1c6>
 8005356:	2f58      	cmp	r7, #88	@ 0x58
 8005358:	f000 80b9 	beq.w	80054ce <_printf_i+0x19a>
 800535c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005360:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005364:	e03a      	b.n	80053dc <_printf_i+0xa8>
 8005366:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800536a:	2b15      	cmp	r3, #21
 800536c:	d8f6      	bhi.n	800535c <_printf_i+0x28>
 800536e:	a101      	add	r1, pc, #4	@ (adr r1, 8005374 <_printf_i+0x40>)
 8005370:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005374:	080053cd 	.word	0x080053cd
 8005378:	080053e1 	.word	0x080053e1
 800537c:	0800535d 	.word	0x0800535d
 8005380:	0800535d 	.word	0x0800535d
 8005384:	0800535d 	.word	0x0800535d
 8005388:	0800535d 	.word	0x0800535d
 800538c:	080053e1 	.word	0x080053e1
 8005390:	0800535d 	.word	0x0800535d
 8005394:	0800535d 	.word	0x0800535d
 8005398:	0800535d 	.word	0x0800535d
 800539c:	0800535d 	.word	0x0800535d
 80053a0:	080054e1 	.word	0x080054e1
 80053a4:	0800540b 	.word	0x0800540b
 80053a8:	0800549b 	.word	0x0800549b
 80053ac:	0800535d 	.word	0x0800535d
 80053b0:	0800535d 	.word	0x0800535d
 80053b4:	08005503 	.word	0x08005503
 80053b8:	0800535d 	.word	0x0800535d
 80053bc:	0800540b 	.word	0x0800540b
 80053c0:	0800535d 	.word	0x0800535d
 80053c4:	0800535d 	.word	0x0800535d
 80053c8:	080054a3 	.word	0x080054a3
 80053cc:	6833      	ldr	r3, [r6, #0]
 80053ce:	1d1a      	adds	r2, r3, #4
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	6032      	str	r2, [r6, #0]
 80053d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80053d8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80053dc:	2301      	movs	r3, #1
 80053de:	e09d      	b.n	800551c <_printf_i+0x1e8>
 80053e0:	6833      	ldr	r3, [r6, #0]
 80053e2:	6820      	ldr	r0, [r4, #0]
 80053e4:	1d19      	adds	r1, r3, #4
 80053e6:	6031      	str	r1, [r6, #0]
 80053e8:	0606      	lsls	r6, r0, #24
 80053ea:	d501      	bpl.n	80053f0 <_printf_i+0xbc>
 80053ec:	681d      	ldr	r5, [r3, #0]
 80053ee:	e003      	b.n	80053f8 <_printf_i+0xc4>
 80053f0:	0645      	lsls	r5, r0, #25
 80053f2:	d5fb      	bpl.n	80053ec <_printf_i+0xb8>
 80053f4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80053f8:	2d00      	cmp	r5, #0
 80053fa:	da03      	bge.n	8005404 <_printf_i+0xd0>
 80053fc:	232d      	movs	r3, #45	@ 0x2d
 80053fe:	426d      	negs	r5, r5
 8005400:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005404:	4859      	ldr	r0, [pc, #356]	@ (800556c <_printf_i+0x238>)
 8005406:	230a      	movs	r3, #10
 8005408:	e011      	b.n	800542e <_printf_i+0xfa>
 800540a:	6821      	ldr	r1, [r4, #0]
 800540c:	6833      	ldr	r3, [r6, #0]
 800540e:	0608      	lsls	r0, r1, #24
 8005410:	f853 5b04 	ldr.w	r5, [r3], #4
 8005414:	d402      	bmi.n	800541c <_printf_i+0xe8>
 8005416:	0649      	lsls	r1, r1, #25
 8005418:	bf48      	it	mi
 800541a:	b2ad      	uxthmi	r5, r5
 800541c:	2f6f      	cmp	r7, #111	@ 0x6f
 800541e:	4853      	ldr	r0, [pc, #332]	@ (800556c <_printf_i+0x238>)
 8005420:	6033      	str	r3, [r6, #0]
 8005422:	bf14      	ite	ne
 8005424:	230a      	movne	r3, #10
 8005426:	2308      	moveq	r3, #8
 8005428:	2100      	movs	r1, #0
 800542a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800542e:	6866      	ldr	r6, [r4, #4]
 8005430:	60a6      	str	r6, [r4, #8]
 8005432:	2e00      	cmp	r6, #0
 8005434:	bfa2      	ittt	ge
 8005436:	6821      	ldrge	r1, [r4, #0]
 8005438:	f021 0104 	bicge.w	r1, r1, #4
 800543c:	6021      	strge	r1, [r4, #0]
 800543e:	b90d      	cbnz	r5, 8005444 <_printf_i+0x110>
 8005440:	2e00      	cmp	r6, #0
 8005442:	d04b      	beq.n	80054dc <_printf_i+0x1a8>
 8005444:	4616      	mov	r6, r2
 8005446:	fbb5 f1f3 	udiv	r1, r5, r3
 800544a:	fb03 5711 	mls	r7, r3, r1, r5
 800544e:	5dc7      	ldrb	r7, [r0, r7]
 8005450:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005454:	462f      	mov	r7, r5
 8005456:	42bb      	cmp	r3, r7
 8005458:	460d      	mov	r5, r1
 800545a:	d9f4      	bls.n	8005446 <_printf_i+0x112>
 800545c:	2b08      	cmp	r3, #8
 800545e:	d10b      	bne.n	8005478 <_printf_i+0x144>
 8005460:	6823      	ldr	r3, [r4, #0]
 8005462:	07df      	lsls	r7, r3, #31
 8005464:	d508      	bpl.n	8005478 <_printf_i+0x144>
 8005466:	6923      	ldr	r3, [r4, #16]
 8005468:	6861      	ldr	r1, [r4, #4]
 800546a:	4299      	cmp	r1, r3
 800546c:	bfde      	ittt	le
 800546e:	2330      	movle	r3, #48	@ 0x30
 8005470:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005474:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005478:	1b92      	subs	r2, r2, r6
 800547a:	6122      	str	r2, [r4, #16]
 800547c:	f8cd a000 	str.w	sl, [sp]
 8005480:	464b      	mov	r3, r9
 8005482:	aa03      	add	r2, sp, #12
 8005484:	4621      	mov	r1, r4
 8005486:	4640      	mov	r0, r8
 8005488:	f7ff fee6 	bl	8005258 <_printf_common>
 800548c:	3001      	adds	r0, #1
 800548e:	d14a      	bne.n	8005526 <_printf_i+0x1f2>
 8005490:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005494:	b004      	add	sp, #16
 8005496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800549a:	6823      	ldr	r3, [r4, #0]
 800549c:	f043 0320 	orr.w	r3, r3, #32
 80054a0:	6023      	str	r3, [r4, #0]
 80054a2:	4833      	ldr	r0, [pc, #204]	@ (8005570 <_printf_i+0x23c>)
 80054a4:	2778      	movs	r7, #120	@ 0x78
 80054a6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80054aa:	6823      	ldr	r3, [r4, #0]
 80054ac:	6831      	ldr	r1, [r6, #0]
 80054ae:	061f      	lsls	r7, r3, #24
 80054b0:	f851 5b04 	ldr.w	r5, [r1], #4
 80054b4:	d402      	bmi.n	80054bc <_printf_i+0x188>
 80054b6:	065f      	lsls	r7, r3, #25
 80054b8:	bf48      	it	mi
 80054ba:	b2ad      	uxthmi	r5, r5
 80054bc:	6031      	str	r1, [r6, #0]
 80054be:	07d9      	lsls	r1, r3, #31
 80054c0:	bf44      	itt	mi
 80054c2:	f043 0320 	orrmi.w	r3, r3, #32
 80054c6:	6023      	strmi	r3, [r4, #0]
 80054c8:	b11d      	cbz	r5, 80054d2 <_printf_i+0x19e>
 80054ca:	2310      	movs	r3, #16
 80054cc:	e7ac      	b.n	8005428 <_printf_i+0xf4>
 80054ce:	4827      	ldr	r0, [pc, #156]	@ (800556c <_printf_i+0x238>)
 80054d0:	e7e9      	b.n	80054a6 <_printf_i+0x172>
 80054d2:	6823      	ldr	r3, [r4, #0]
 80054d4:	f023 0320 	bic.w	r3, r3, #32
 80054d8:	6023      	str	r3, [r4, #0]
 80054da:	e7f6      	b.n	80054ca <_printf_i+0x196>
 80054dc:	4616      	mov	r6, r2
 80054de:	e7bd      	b.n	800545c <_printf_i+0x128>
 80054e0:	6833      	ldr	r3, [r6, #0]
 80054e2:	6825      	ldr	r5, [r4, #0]
 80054e4:	6961      	ldr	r1, [r4, #20]
 80054e6:	1d18      	adds	r0, r3, #4
 80054e8:	6030      	str	r0, [r6, #0]
 80054ea:	062e      	lsls	r6, r5, #24
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	d501      	bpl.n	80054f4 <_printf_i+0x1c0>
 80054f0:	6019      	str	r1, [r3, #0]
 80054f2:	e002      	b.n	80054fa <_printf_i+0x1c6>
 80054f4:	0668      	lsls	r0, r5, #25
 80054f6:	d5fb      	bpl.n	80054f0 <_printf_i+0x1bc>
 80054f8:	8019      	strh	r1, [r3, #0]
 80054fa:	2300      	movs	r3, #0
 80054fc:	6123      	str	r3, [r4, #16]
 80054fe:	4616      	mov	r6, r2
 8005500:	e7bc      	b.n	800547c <_printf_i+0x148>
 8005502:	6833      	ldr	r3, [r6, #0]
 8005504:	1d1a      	adds	r2, r3, #4
 8005506:	6032      	str	r2, [r6, #0]
 8005508:	681e      	ldr	r6, [r3, #0]
 800550a:	6862      	ldr	r2, [r4, #4]
 800550c:	2100      	movs	r1, #0
 800550e:	4630      	mov	r0, r6
 8005510:	f7fa fe6e 	bl	80001f0 <memchr>
 8005514:	b108      	cbz	r0, 800551a <_printf_i+0x1e6>
 8005516:	1b80      	subs	r0, r0, r6
 8005518:	6060      	str	r0, [r4, #4]
 800551a:	6863      	ldr	r3, [r4, #4]
 800551c:	6123      	str	r3, [r4, #16]
 800551e:	2300      	movs	r3, #0
 8005520:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005524:	e7aa      	b.n	800547c <_printf_i+0x148>
 8005526:	6923      	ldr	r3, [r4, #16]
 8005528:	4632      	mov	r2, r6
 800552a:	4649      	mov	r1, r9
 800552c:	4640      	mov	r0, r8
 800552e:	47d0      	blx	sl
 8005530:	3001      	adds	r0, #1
 8005532:	d0ad      	beq.n	8005490 <_printf_i+0x15c>
 8005534:	6823      	ldr	r3, [r4, #0]
 8005536:	079b      	lsls	r3, r3, #30
 8005538:	d413      	bmi.n	8005562 <_printf_i+0x22e>
 800553a:	68e0      	ldr	r0, [r4, #12]
 800553c:	9b03      	ldr	r3, [sp, #12]
 800553e:	4298      	cmp	r0, r3
 8005540:	bfb8      	it	lt
 8005542:	4618      	movlt	r0, r3
 8005544:	e7a6      	b.n	8005494 <_printf_i+0x160>
 8005546:	2301      	movs	r3, #1
 8005548:	4632      	mov	r2, r6
 800554a:	4649      	mov	r1, r9
 800554c:	4640      	mov	r0, r8
 800554e:	47d0      	blx	sl
 8005550:	3001      	adds	r0, #1
 8005552:	d09d      	beq.n	8005490 <_printf_i+0x15c>
 8005554:	3501      	adds	r5, #1
 8005556:	68e3      	ldr	r3, [r4, #12]
 8005558:	9903      	ldr	r1, [sp, #12]
 800555a:	1a5b      	subs	r3, r3, r1
 800555c:	42ab      	cmp	r3, r5
 800555e:	dcf2      	bgt.n	8005546 <_printf_i+0x212>
 8005560:	e7eb      	b.n	800553a <_printf_i+0x206>
 8005562:	2500      	movs	r5, #0
 8005564:	f104 0619 	add.w	r6, r4, #25
 8005568:	e7f5      	b.n	8005556 <_printf_i+0x222>
 800556a:	bf00      	nop
 800556c:	080056a9 	.word	0x080056a9
 8005570:	080056ba 	.word	0x080056ba

08005574 <memmove>:
 8005574:	4288      	cmp	r0, r1
 8005576:	b510      	push	{r4, lr}
 8005578:	eb01 0402 	add.w	r4, r1, r2
 800557c:	d902      	bls.n	8005584 <memmove+0x10>
 800557e:	4284      	cmp	r4, r0
 8005580:	4623      	mov	r3, r4
 8005582:	d807      	bhi.n	8005594 <memmove+0x20>
 8005584:	1e43      	subs	r3, r0, #1
 8005586:	42a1      	cmp	r1, r4
 8005588:	d008      	beq.n	800559c <memmove+0x28>
 800558a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800558e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005592:	e7f8      	b.n	8005586 <memmove+0x12>
 8005594:	4402      	add	r2, r0
 8005596:	4601      	mov	r1, r0
 8005598:	428a      	cmp	r2, r1
 800559a:	d100      	bne.n	800559e <memmove+0x2a>
 800559c:	bd10      	pop	{r4, pc}
 800559e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80055a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80055a6:	e7f7      	b.n	8005598 <memmove+0x24>

080055a8 <_sbrk_r>:
 80055a8:	b538      	push	{r3, r4, r5, lr}
 80055aa:	4d06      	ldr	r5, [pc, #24]	@ (80055c4 <_sbrk_r+0x1c>)
 80055ac:	2300      	movs	r3, #0
 80055ae:	4604      	mov	r4, r0
 80055b0:	4608      	mov	r0, r1
 80055b2:	602b      	str	r3, [r5, #0]
 80055b4:	f7fb fed0 	bl	8001358 <_sbrk>
 80055b8:	1c43      	adds	r3, r0, #1
 80055ba:	d102      	bne.n	80055c2 <_sbrk_r+0x1a>
 80055bc:	682b      	ldr	r3, [r5, #0]
 80055be:	b103      	cbz	r3, 80055c2 <_sbrk_r+0x1a>
 80055c0:	6023      	str	r3, [r4, #0]
 80055c2:	bd38      	pop	{r3, r4, r5, pc}
 80055c4:	200009ec 	.word	0x200009ec

080055c8 <memcpy>:
 80055c8:	440a      	add	r2, r1
 80055ca:	4291      	cmp	r1, r2
 80055cc:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80055d0:	d100      	bne.n	80055d4 <memcpy+0xc>
 80055d2:	4770      	bx	lr
 80055d4:	b510      	push	{r4, lr}
 80055d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80055da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80055de:	4291      	cmp	r1, r2
 80055e0:	d1f9      	bne.n	80055d6 <memcpy+0xe>
 80055e2:	bd10      	pop	{r4, pc}

080055e4 <_realloc_r>:
 80055e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055e8:	4680      	mov	r8, r0
 80055ea:	4615      	mov	r5, r2
 80055ec:	460c      	mov	r4, r1
 80055ee:	b921      	cbnz	r1, 80055fa <_realloc_r+0x16>
 80055f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80055f4:	4611      	mov	r1, r2
 80055f6:	f7ff bc4b 	b.w	8004e90 <_malloc_r>
 80055fa:	b92a      	cbnz	r2, 8005608 <_realloc_r+0x24>
 80055fc:	f7ff fbdc 	bl	8004db8 <_free_r>
 8005600:	2400      	movs	r4, #0
 8005602:	4620      	mov	r0, r4
 8005604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005608:	f000 f81a 	bl	8005640 <_malloc_usable_size_r>
 800560c:	4285      	cmp	r5, r0
 800560e:	4606      	mov	r6, r0
 8005610:	d802      	bhi.n	8005618 <_realloc_r+0x34>
 8005612:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005616:	d8f4      	bhi.n	8005602 <_realloc_r+0x1e>
 8005618:	4629      	mov	r1, r5
 800561a:	4640      	mov	r0, r8
 800561c:	f7ff fc38 	bl	8004e90 <_malloc_r>
 8005620:	4607      	mov	r7, r0
 8005622:	2800      	cmp	r0, #0
 8005624:	d0ec      	beq.n	8005600 <_realloc_r+0x1c>
 8005626:	42b5      	cmp	r5, r6
 8005628:	462a      	mov	r2, r5
 800562a:	4621      	mov	r1, r4
 800562c:	bf28      	it	cs
 800562e:	4632      	movcs	r2, r6
 8005630:	f7ff ffca 	bl	80055c8 <memcpy>
 8005634:	4621      	mov	r1, r4
 8005636:	4640      	mov	r0, r8
 8005638:	f7ff fbbe 	bl	8004db8 <_free_r>
 800563c:	463c      	mov	r4, r7
 800563e:	e7e0      	b.n	8005602 <_realloc_r+0x1e>

08005640 <_malloc_usable_size_r>:
 8005640:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005644:	1f18      	subs	r0, r3, #4
 8005646:	2b00      	cmp	r3, #0
 8005648:	bfbc      	itt	lt
 800564a:	580b      	ldrlt	r3, [r1, r0]
 800564c:	18c0      	addlt	r0, r0, r3
 800564e:	4770      	bx	lr

08005650 <_init>:
 8005650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005652:	bf00      	nop
 8005654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005656:	bc08      	pop	{r3}
 8005658:	469e      	mov	lr, r3
 800565a:	4770      	bx	lr

0800565c <_fini>:
 800565c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800565e:	bf00      	nop
 8005660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005662:	bc08      	pop	{r3}
 8005664:	469e      	mov	lr, r3
 8005666:	4770      	bx	lr
