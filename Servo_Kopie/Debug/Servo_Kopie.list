
Servo_Kopie.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005650  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08005800  08005800  00015800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005864  08005864  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08005864  08005864  00015864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800586c  0800586c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800586c  0800586c  0001586c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005870  08005870  00015870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08005874  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
 10 .bss          000009a0  2000005c  2000005c  0002005c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200009fc  200009fc  0002005c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00014b13  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000026c6  00000000  00000000  00034be2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000011d8  00000000  00000000  000372a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000df8  00000000  00000000  00038480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00026781  00000000  00000000  00039278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00013b62  00000000  00000000  0005f9f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000eeca8  00000000  00000000  0007355b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005244  00000000  00000000  00162204  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  00167448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000005c 	.word	0x2000005c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080057e8 	.word	0x080057e8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000060 	.word	0x20000060
 80001ec:	080057e8 	.word	0x080057e8

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b970 	b.w	8000598 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	460d      	mov	r5, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	460f      	mov	r7, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4694      	mov	ip, r2
 80002e4:	d965      	bls.n	80003b2 <__udivmoddi4+0xe2>
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	b143      	cbz	r3, 80002fe <__udivmoddi4+0x2e>
 80002ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80002f0:	f1c3 0220 	rsb	r2, r3, #32
 80002f4:	409f      	lsls	r7, r3
 80002f6:	fa20 f202 	lsr.w	r2, r0, r2
 80002fa:	4317      	orrs	r7, r2
 80002fc:	409c      	lsls	r4, r3
 80002fe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000302:	fa1f f58c 	uxth.w	r5, ip
 8000306:	fbb7 f1fe 	udiv	r1, r7, lr
 800030a:	0c22      	lsrs	r2, r4, #16
 800030c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000310:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000314:	fb01 f005 	mul.w	r0, r1, r5
 8000318:	4290      	cmp	r0, r2
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x62>
 800031c:	eb1c 0202 	adds.w	r2, ip, r2
 8000320:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000324:	f080 811c 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000328:	4290      	cmp	r0, r2
 800032a:	f240 8119 	bls.w	8000560 <__udivmoddi4+0x290>
 800032e:	3902      	subs	r1, #2
 8000330:	4462      	add	r2, ip
 8000332:	1a12      	subs	r2, r2, r0
 8000334:	b2a4      	uxth	r4, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000342:	fb00 f505 	mul.w	r5, r0, r5
 8000346:	42a5      	cmp	r5, r4
 8000348:	d90a      	bls.n	8000360 <__udivmoddi4+0x90>
 800034a:	eb1c 0404 	adds.w	r4, ip, r4
 800034e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000352:	f080 8107 	bcs.w	8000564 <__udivmoddi4+0x294>
 8000356:	42a5      	cmp	r5, r4
 8000358:	f240 8104 	bls.w	8000564 <__udivmoddi4+0x294>
 800035c:	4464      	add	r4, ip
 800035e:	3802      	subs	r0, #2
 8000360:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000364:	1b64      	subs	r4, r4, r5
 8000366:	2100      	movs	r1, #0
 8000368:	b11e      	cbz	r6, 8000372 <__udivmoddi4+0xa2>
 800036a:	40dc      	lsrs	r4, r3
 800036c:	2300      	movs	r3, #0
 800036e:	e9c6 4300 	strd	r4, r3, [r6]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0xbc>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80ed 	beq.w	800055a <__udivmoddi4+0x28a>
 8000380:	2100      	movs	r1, #0
 8000382:	e9c6 0500 	strd	r0, r5, [r6]
 8000386:	4608      	mov	r0, r1
 8000388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038c:	fab3 f183 	clz	r1, r3
 8000390:	2900      	cmp	r1, #0
 8000392:	d149      	bne.n	8000428 <__udivmoddi4+0x158>
 8000394:	42ab      	cmp	r3, r5
 8000396:	d302      	bcc.n	800039e <__udivmoddi4+0xce>
 8000398:	4282      	cmp	r2, r0
 800039a:	f200 80f8 	bhi.w	800058e <__udivmoddi4+0x2be>
 800039e:	1a84      	subs	r4, r0, r2
 80003a0:	eb65 0203 	sbc.w	r2, r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	4617      	mov	r7, r2
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	d0e2      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	e9c6 4700 	strd	r4, r7, [r6]
 80003b0:	e7df      	b.n	8000372 <__udivmoddi4+0xa2>
 80003b2:	b902      	cbnz	r2, 80003b6 <__udivmoddi4+0xe6>
 80003b4:	deff      	udf	#255	; 0xff
 80003b6:	fab2 f382 	clz	r3, r2
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8090 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c0:	1a8a      	subs	r2, r1, r2
 80003c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003c6:	fa1f fe8c 	uxth.w	lr, ip
 80003ca:	2101      	movs	r1, #1
 80003cc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003d0:	fb07 2015 	mls	r0, r7, r5, r2
 80003d4:	0c22      	lsrs	r2, r4, #16
 80003d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003da:	fb0e f005 	mul.w	r0, lr, r5
 80003de:	4290      	cmp	r0, r2
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e2:	eb1c 0202 	adds.w	r2, ip, r2
 80003e6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4290      	cmp	r0, r2
 80003ee:	f200 80cb 	bhi.w	8000588 <__udivmoddi4+0x2b8>
 80003f2:	4645      	mov	r5, r8
 80003f4:	1a12      	subs	r2, r2, r0
 80003f6:	b2a4      	uxth	r4, r4
 80003f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000400:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000404:	fb0e fe00 	mul.w	lr, lr, r0
 8000408:	45a6      	cmp	lr, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x14e>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x14c>
 8000416:	45a6      	cmp	lr, r4
 8000418:	f200 80bb 	bhi.w	8000592 <__udivmoddi4+0x2c2>
 800041c:	4610      	mov	r0, r2
 800041e:	eba4 040e 	sub.w	r4, r4, lr
 8000422:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000426:	e79f      	b.n	8000368 <__udivmoddi4+0x98>
 8000428:	f1c1 0720 	rsb	r7, r1, #32
 800042c:	408b      	lsls	r3, r1
 800042e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000432:	ea4c 0c03 	orr.w	ip, ip, r3
 8000436:	fa05 f401 	lsl.w	r4, r5, r1
 800043a:	fa20 f307 	lsr.w	r3, r0, r7
 800043e:	40fd      	lsrs	r5, r7
 8000440:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000444:	4323      	orrs	r3, r4
 8000446:	fbb5 f8f9 	udiv	r8, r5, r9
 800044a:	fa1f fe8c 	uxth.w	lr, ip
 800044e:	fb09 5518 	mls	r5, r9, r8, r5
 8000452:	0c1c      	lsrs	r4, r3, #16
 8000454:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000458:	fb08 f50e 	mul.w	r5, r8, lr
 800045c:	42a5      	cmp	r5, r4
 800045e:	fa02 f201 	lsl.w	r2, r2, r1
 8000462:	fa00 f001 	lsl.w	r0, r0, r1
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000470:	f080 8088 	bcs.w	8000584 <__udivmoddi4+0x2b4>
 8000474:	42a5      	cmp	r5, r4
 8000476:	f240 8085 	bls.w	8000584 <__udivmoddi4+0x2b4>
 800047a:	f1a8 0802 	sub.w	r8, r8, #2
 800047e:	4464      	add	r4, ip
 8000480:	1b64      	subs	r4, r4, r5
 8000482:	b29d      	uxth	r5, r3
 8000484:	fbb4 f3f9 	udiv	r3, r4, r9
 8000488:	fb09 4413 	mls	r4, r9, r3, r4
 800048c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000490:	fb03 fe0e 	mul.w	lr, r3, lr
 8000494:	45a6      	cmp	lr, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004a0:	d26c      	bcs.n	800057c <__udivmoddi4+0x2ac>
 80004a2:	45a6      	cmp	lr, r4
 80004a4:	d96a      	bls.n	800057c <__udivmoddi4+0x2ac>
 80004a6:	3b02      	subs	r3, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ae:	fba3 9502 	umull	r9, r5, r3, r2
 80004b2:	eba4 040e 	sub.w	r4, r4, lr
 80004b6:	42ac      	cmp	r4, r5
 80004b8:	46c8      	mov	r8, r9
 80004ba:	46ae      	mov	lr, r5
 80004bc:	d356      	bcc.n	800056c <__udivmoddi4+0x29c>
 80004be:	d053      	beq.n	8000568 <__udivmoddi4+0x298>
 80004c0:	b156      	cbz	r6, 80004d8 <__udivmoddi4+0x208>
 80004c2:	ebb0 0208 	subs.w	r2, r0, r8
 80004c6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ca:	fa04 f707 	lsl.w	r7, r4, r7
 80004ce:	40ca      	lsrs	r2, r1
 80004d0:	40cc      	lsrs	r4, r1
 80004d2:	4317      	orrs	r7, r2
 80004d4:	e9c6 7400 	strd	r7, r4, [r6]
 80004d8:	4618      	mov	r0, r3
 80004da:	2100      	movs	r1, #0
 80004dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e0:	f1c3 0120 	rsb	r1, r3, #32
 80004e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004e8:	fa20 f201 	lsr.w	r2, r0, r1
 80004ec:	fa25 f101 	lsr.w	r1, r5, r1
 80004f0:	409d      	lsls	r5, r3
 80004f2:	432a      	orrs	r2, r5
 80004f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f8:	fa1f fe8c 	uxth.w	lr, ip
 80004fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000500:	fb07 1510 	mls	r5, r7, r0, r1
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800050a:	fb00 f50e 	mul.w	r5, r0, lr
 800050e:	428d      	cmp	r5, r1
 8000510:	fa04 f403 	lsl.w	r4, r4, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x258>
 8000516:	eb1c 0101 	adds.w	r1, ip, r1
 800051a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800051e:	d22f      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000520:	428d      	cmp	r5, r1
 8000522:	d92d      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000524:	3802      	subs	r0, #2
 8000526:	4461      	add	r1, ip
 8000528:	1b49      	subs	r1, r1, r5
 800052a:	b292      	uxth	r2, r2
 800052c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000530:	fb07 1115 	mls	r1, r7, r5, r1
 8000534:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000538:	fb05 f10e 	mul.w	r1, r5, lr
 800053c:	4291      	cmp	r1, r2
 800053e:	d908      	bls.n	8000552 <__udivmoddi4+0x282>
 8000540:	eb1c 0202 	adds.w	r2, ip, r2
 8000544:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000548:	d216      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 800054a:	4291      	cmp	r1, r2
 800054c:	d914      	bls.n	8000578 <__udivmoddi4+0x2a8>
 800054e:	3d02      	subs	r5, #2
 8000550:	4462      	add	r2, ip
 8000552:	1a52      	subs	r2, r2, r1
 8000554:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000558:	e738      	b.n	80003cc <__udivmoddi4+0xfc>
 800055a:	4631      	mov	r1, r6
 800055c:	4630      	mov	r0, r6
 800055e:	e708      	b.n	8000372 <__udivmoddi4+0xa2>
 8000560:	4639      	mov	r1, r7
 8000562:	e6e6      	b.n	8000332 <__udivmoddi4+0x62>
 8000564:	4610      	mov	r0, r2
 8000566:	e6fb      	b.n	8000360 <__udivmoddi4+0x90>
 8000568:	4548      	cmp	r0, r9
 800056a:	d2a9      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 800056c:	ebb9 0802 	subs.w	r8, r9, r2
 8000570:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000574:	3b01      	subs	r3, #1
 8000576:	e7a3      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000578:	4645      	mov	r5, r8
 800057a:	e7ea      	b.n	8000552 <__udivmoddi4+0x282>
 800057c:	462b      	mov	r3, r5
 800057e:	e794      	b.n	80004aa <__udivmoddi4+0x1da>
 8000580:	4640      	mov	r0, r8
 8000582:	e7d1      	b.n	8000528 <__udivmoddi4+0x258>
 8000584:	46d0      	mov	r8, sl
 8000586:	e77b      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000588:	3d02      	subs	r5, #2
 800058a:	4462      	add	r2, ip
 800058c:	e732      	b.n	80003f4 <__udivmoddi4+0x124>
 800058e:	4608      	mov	r0, r1
 8000590:	e70a      	b.n	80003a8 <__udivmoddi4+0xd8>
 8000592:	4464      	add	r4, ip
 8000594:	3802      	subs	r0, #2
 8000596:	e742      	b.n	800041e <__udivmoddi4+0x14e>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <Degree90_Init>:
 */
#include "Degree90.h"
#include <stdio.h>
#include <string.h>

void Degree90_Init(Degree90* controller, ADC_HandleTypeDef* adc1, ADC_HandleTypeDef* adc2, TIM_HandleTypeDef* tim, UART_HandleTypeDef* uart) {
 800059c:	b480      	push	{r7}
 800059e:	b085      	sub	sp, #20
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	60f8      	str	r0, [r7, #12]
 80005a4:	60b9      	str	r1, [r7, #8]
 80005a6:	607a      	str	r2, [r7, #4]
 80005a8:	603b      	str	r3, [r7, #0]
    controller->hadc1 = adc1;
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	68ba      	ldr	r2, [r7, #8]
 80005ae:	601a      	str	r2, [r3, #0]
    controller->hadc2 = adc2;
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	687a      	ldr	r2, [r7, #4]
 80005b4:	605a      	str	r2, [r3, #4]
    controller->htim = tim;
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	683a      	ldr	r2, [r7, #0]
 80005ba:	609a      	str	r2, [r3, #8]
    controller->huart = uart;
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	69ba      	ldr	r2, [r7, #24]
 80005c0:	60da      	str	r2, [r3, #12]
}
 80005c2:	bf00      	nop
 80005c4:	3714      	adds	r7, #20
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr
	...

080005d0 <Degree90_ReadADCAndControlServo>:

void Degree90_ReadADCAndControlServo(Degree90* controller) {
 80005d0:	b590      	push	{r4, r7, lr}
 80005d2:	b093      	sub	sp, #76	; 0x4c
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
    uint32_t raw1 = 0, raw2 = 0;
 80005d8:	2300      	movs	r3, #0
 80005da:	647b      	str	r3, [r7, #68]	; 0x44
 80005dc:	2300      	movs	r3, #0
 80005de:	643b      	str	r3, [r7, #64]	; 0x40
    char msg[50];

    // Read from ADC1
    HAL_ADC_Start(controller->hadc1);
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4618      	mov	r0, r3
 80005e6:	f000 ff83 	bl	80014f0 <HAL_ADC_Start>
    if (HAL_ADC_PollForConversion(controller->hadc1, HAL_MAX_DELAY) == HAL_OK) {
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80005f2:	4618      	mov	r0, r3
 80005f4:	f001 f84e 	bl	8001694 <HAL_ADC_PollForConversion>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d128      	bne.n	8000650 <Degree90_ReadADCAndControlServo+0x80>
        raw1 = HAL_ADC_GetValue(controller->hadc1);
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	4618      	mov	r0, r3
 8000604:	f001 f8d1 	bl	80017aa <HAL_ADC_GetValue>
 8000608:	6478      	str	r0, [r7, #68]	; 0x44
        sprintf(msg, "ADC1: %lu\r\n", raw1);
 800060a:	f107 030c 	add.w	r3, r7, #12
 800060e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000610:	4940      	ldr	r1, [pc, #256]	; (8000714 <Degree90_ReadADCAndControlServo+0x144>)
 8000612:	4618      	mov	r0, r3
 8000614:	f004 fc44 	bl	8004ea0 <siprintf>
        HAL_UART_Transmit(controller->huart, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	68dc      	ldr	r4, [r3, #12]
 800061c:	f107 030c 	add.w	r3, r7, #12
 8000620:	4618      	mov	r0, r3
 8000622:	f7ff fde5 	bl	80001f0 <strlen>
 8000626:	4603      	mov	r3, r0
 8000628:	b29a      	uxth	r2, r3
 800062a:	f107 010c 	add.w	r1, r7, #12
 800062e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000632:	4620      	mov	r0, r4
 8000634:	f003 fd78 	bl	8004128 <HAL_UART_Transmit>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, (raw1 > 2048) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000638:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800063a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800063e:	bf94      	ite	ls
 8000640:	2301      	movls	r3, #1
 8000642:	2300      	movhi	r3, #0
 8000644:	b2db      	uxtb	r3, r3
 8000646:	461a      	mov	r2, r3
 8000648:	2101      	movs	r1, #1
 800064a:	4833      	ldr	r0, [pc, #204]	; (8000718 <Degree90_ReadADCAndControlServo+0x148>)
 800064c:	f002 f8ca 	bl	80027e4 <HAL_GPIO_WritePin>
    }

    HAL_Delay(100);
 8000650:	2064      	movs	r0, #100	; 0x64
 8000652:	f000 fee5 	bl	8001420 <HAL_Delay>

    // Read from ADC2
    HAL_ADC_Start(controller->hadc2);
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	685b      	ldr	r3, [r3, #4]
 800065a:	4618      	mov	r0, r3
 800065c:	f000 ff48 	bl	80014f0 <HAL_ADC_Start>
    if (HAL_ADC_PollForConversion(controller->hadc2, HAL_MAX_DELAY) == HAL_OK) {
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	685b      	ldr	r3, [r3, #4]
 8000664:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000668:	4618      	mov	r0, r3
 800066a:	f001 f813 	bl	8001694 <HAL_ADC_PollForConversion>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d128      	bne.n	80006c6 <Degree90_ReadADCAndControlServo+0xf6>
        raw2 = HAL_ADC_GetValue(controller->hadc2);
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	685b      	ldr	r3, [r3, #4]
 8000678:	4618      	mov	r0, r3
 800067a:	f001 f896 	bl	80017aa <HAL_ADC_GetValue>
 800067e:	6438      	str	r0, [r7, #64]	; 0x40
        sprintf(msg, "ADC2: %lu\r\n", raw2);
 8000680:	f107 030c 	add.w	r3, r7, #12
 8000684:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000686:	4925      	ldr	r1, [pc, #148]	; (800071c <Degree90_ReadADCAndControlServo+0x14c>)
 8000688:	4618      	mov	r0, r3
 800068a:	f004 fc09 	bl	8004ea0 <siprintf>
        HAL_UART_Transmit(controller->huart, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	68dc      	ldr	r4, [r3, #12]
 8000692:	f107 030c 	add.w	r3, r7, #12
 8000696:	4618      	mov	r0, r3
 8000698:	f7ff fdaa 	bl	80001f0 <strlen>
 800069c:	4603      	mov	r3, r0
 800069e:	b29a      	uxth	r2, r3
 80006a0:	f107 010c 	add.w	r1, r7, #12
 80006a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006a8:	4620      	mov	r0, r4
 80006aa:	f003 fd3d 	bl	8004128 <HAL_UART_Transmit>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, (raw2 > 2048) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80006ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80006b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80006b4:	bf94      	ite	ls
 80006b6:	2301      	movls	r3, #1
 80006b8:	2300      	movhi	r3, #0
 80006ba:	b2db      	uxtb	r3, r3
 80006bc:	461a      	mov	r2, r3
 80006be:	2180      	movs	r1, #128	; 0x80
 80006c0:	4815      	ldr	r0, [pc, #84]	; (8000718 <Degree90_ReadADCAndControlServo+0x148>)
 80006c2:	f002 f88f 	bl	80027e4 <HAL_GPIO_WritePin>
    }

    HAL_Delay(100);
 80006c6:	2064      	movs	r0, #100	; 0x64
 80006c8:	f000 feaa 	bl	8001420 <HAL_Delay>

    // Control servo based on ADC values
    if (raw1 > raw2) {
 80006cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80006ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80006d0:	429a      	cmp	r2, r3
 80006d2:	d905      	bls.n	80006e0 <Degree90_ReadADCAndControlServo+0x110>
        controller->htim->Instance->CCR1 = 250;
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	689b      	ldr	r3, [r3, #8]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	22fa      	movs	r2, #250	; 0xfa
 80006dc:	635a      	str	r2, [r3, #52]	; 0x34
 80006de:	e010      	b.n	8000702 <Degree90_ReadADCAndControlServo+0x132>
    } else if (raw1 < raw2) {
 80006e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80006e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80006e4:	429a      	cmp	r2, r3
 80006e6:	d206      	bcs.n	80006f6 <Degree90_ReadADCAndControlServo+0x126>
        controller->htim->Instance->CCR1 = 1250;
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	689b      	ldr	r3, [r3, #8]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	f240 42e2 	movw	r2, #1250	; 0x4e2
 80006f2:	635a      	str	r2, [r3, #52]	; 0x34
 80006f4:	e005      	b.n	8000702 <Degree90_ReadADCAndControlServo+0x132>
    } else {
        controller->htim->Instance->CCR1 = 750;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	689b      	ldr	r3, [r3, #8]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	f240 22ee 	movw	r2, #750	; 0x2ee
 8000700:	635a      	str	r2, [r3, #52]	; 0x34
    }

    HAL_Delay(1000);
 8000702:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000706:	f000 fe8b 	bl	8001420 <HAL_Delay>
}
 800070a:	bf00      	nop
 800070c:	374c      	adds	r7, #76	; 0x4c
 800070e:	46bd      	mov	sp, r7
 8000710:	bd90      	pop	{r4, r7, pc}
 8000712:	bf00      	nop
 8000714:	08005800 	.word	0x08005800
 8000718:	40020400 	.word	0x40020400
 800071c:	0800580c 	.word	0x0800580c

08000720 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b088      	sub	sp, #32
 8000724:	af02      	add	r7, sp, #8
int main(void)
 8000726:	f107 0320 	add.w	r3, r7, #32
 800072a:	617b      	str	r3, [r7, #20]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800072c:	f000 fe06 	bl	800133c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000730:	f000 f82e 	bl	8000790 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000734:	f000 fa56 	bl	8000be4 <MX_GPIO_Init>
  MX_ETH_Init();
 8000738:	f000 f938 	bl	80009ac <MX_ETH_Init>
  MX_USART3_UART_Init();
 800073c:	f000 f9fa 	bl	8000b34 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000740:	f000 fa22 	bl	8000b88 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8000744:	f000 f88e 	bl	8000864 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000748:	f000 f8de 	bl	8000908 <MX_ADC2_Init>
  MX_TIM2_Init();
 800074c:	f000 f97c 	bl	8000a48 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000750:	2100      	movs	r1, #0
 8000752:	480b      	ldr	r0, [pc, #44]	; (8000780 <main+0x60>)
 8000754:	f002 feae 	bl	80034b4 <HAL_TIM_PWM_Start>
  HAL_ADC_Start(&hadc1);
 8000758:	480a      	ldr	r0, [pc, #40]	; (8000784 <main+0x64>)
 800075a:	f000 fec9 	bl	80014f0 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc2);
 800075e:	480a      	ldr	r0, [pc, #40]	; (8000788 <main+0x68>)
 8000760:	f000 fec6 	bl	80014f0 <HAL_ADC_Start>
  Degree90 degree90Controller;
  Degree90_Init(&degree90Controller, &hadc1, &hadc2, &htim2, &huart3);
 8000764:	1d38      	adds	r0, r7, #4
 8000766:	4b09      	ldr	r3, [pc, #36]	; (800078c <main+0x6c>)
 8000768:	9300      	str	r3, [sp, #0]
 800076a:	4b05      	ldr	r3, [pc, #20]	; (8000780 <main+0x60>)
 800076c:	4a06      	ldr	r2, [pc, #24]	; (8000788 <main+0x68>)
 800076e:	4905      	ldr	r1, [pc, #20]	; (8000784 <main+0x64>)
 8000770:	f7ff ff14 	bl	800059c <Degree90_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

      Degree90_ReadADCAndControlServo(&degree90Controller);
 8000774:	1d3b      	adds	r3, r7, #4
 8000776:	4618      	mov	r0, r3
 8000778:	f7ff ff2a 	bl	80005d0 <Degree90_ReadADCAndControlServo>
 800077c:	e7fa      	b.n	8000774 <main+0x54>
 800077e:	bf00      	nop
 8000780:	20000330 	.word	0x20000330
 8000784:	200001f0 	.word	0x200001f0
 8000788:	20000238 	.word	0x20000238
 800078c:	20000378 	.word	0x20000378

08000790 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b094      	sub	sp, #80	; 0x50
 8000794:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000796:	f107 0320 	add.w	r3, r7, #32
 800079a:	2230      	movs	r2, #48	; 0x30
 800079c:	2100      	movs	r1, #0
 800079e:	4618      	mov	r0, r3
 80007a0:	f004 fb9e 	bl	8004ee0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a4:	f107 030c 	add.w	r3, r7, #12
 80007a8:	2200      	movs	r2, #0
 80007aa:	601a      	str	r2, [r3, #0]
 80007ac:	605a      	str	r2, [r3, #4]
 80007ae:	609a      	str	r2, [r3, #8]
 80007b0:	60da      	str	r2, [r3, #12]
 80007b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007b4:	2300      	movs	r3, #0
 80007b6:	60bb      	str	r3, [r7, #8]
 80007b8:	4b28      	ldr	r3, [pc, #160]	; (800085c <SystemClock_Config+0xcc>)
 80007ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007bc:	4a27      	ldr	r2, [pc, #156]	; (800085c <SystemClock_Config+0xcc>)
 80007be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007c2:	6413      	str	r3, [r2, #64]	; 0x40
 80007c4:	4b25      	ldr	r3, [pc, #148]	; (800085c <SystemClock_Config+0xcc>)
 80007c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007cc:	60bb      	str	r3, [r7, #8]
 80007ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007d0:	2300      	movs	r3, #0
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	4b22      	ldr	r3, [pc, #136]	; (8000860 <SystemClock_Config+0xd0>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a21      	ldr	r2, [pc, #132]	; (8000860 <SystemClock_Config+0xd0>)
 80007da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007de:	6013      	str	r3, [r2, #0]
 80007e0:	4b1f      	ldr	r3, [pc, #124]	; (8000860 <SystemClock_Config+0xd0>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007e8:	607b      	str	r3, [r7, #4]
 80007ea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007ec:	2301      	movs	r3, #1
 80007ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007f0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80007f4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007f6:	2302      	movs	r3, #2
 80007f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000800:	2304      	movs	r3, #4
 8000802:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000804:	23a8      	movs	r3, #168	; 0xa8
 8000806:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000808:	2302      	movs	r3, #2
 800080a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800080c:	2307      	movs	r3, #7
 800080e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000810:	f107 0320 	add.w	r3, r7, #32
 8000814:	4618      	mov	r0, r3
 8000816:	f002 f90d 	bl	8002a34 <HAL_RCC_OscConfig>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000820:	f000 fa8e 	bl	8000d40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000824:	230f      	movs	r3, #15
 8000826:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000828:	2302      	movs	r3, #2
 800082a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800082c:	2300      	movs	r3, #0
 800082e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000830:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000834:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 8000836:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800083a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800083c:	f107 030c 	add.w	r3, r7, #12
 8000840:	2105      	movs	r1, #5
 8000842:	4618      	mov	r0, r3
 8000844:	f002 fb6e 	bl	8002f24 <HAL_RCC_ClockConfig>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800084e:	f000 fa77 	bl	8000d40 <Error_Handler>
  }
}
 8000852:	bf00      	nop
 8000854:	3750      	adds	r7, #80	; 0x50
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	40023800 	.word	0x40023800
 8000860:	40007000 	.word	0x40007000

08000864 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b084      	sub	sp, #16
 8000868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800086a:	463b      	mov	r3, r7
 800086c:	2200      	movs	r2, #0
 800086e:	601a      	str	r2, [r3, #0]
 8000870:	605a      	str	r2, [r3, #4]
 8000872:	609a      	str	r2, [r3, #8]
 8000874:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000876:	4b21      	ldr	r3, [pc, #132]	; (80008fc <MX_ADC1_Init+0x98>)
 8000878:	4a21      	ldr	r2, [pc, #132]	; (8000900 <MX_ADC1_Init+0x9c>)
 800087a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800087c:	4b1f      	ldr	r3, [pc, #124]	; (80008fc <MX_ADC1_Init+0x98>)
 800087e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000882:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000884:	4b1d      	ldr	r3, [pc, #116]	; (80008fc <MX_ADC1_Init+0x98>)
 8000886:	2200      	movs	r2, #0
 8000888:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800088a:	4b1c      	ldr	r3, [pc, #112]	; (80008fc <MX_ADC1_Init+0x98>)
 800088c:	2200      	movs	r2, #0
 800088e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000890:	4b1a      	ldr	r3, [pc, #104]	; (80008fc <MX_ADC1_Init+0x98>)
 8000892:	2200      	movs	r2, #0
 8000894:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000896:	4b19      	ldr	r3, [pc, #100]	; (80008fc <MX_ADC1_Init+0x98>)
 8000898:	2200      	movs	r2, #0
 800089a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800089e:	4b17      	ldr	r3, [pc, #92]	; (80008fc <MX_ADC1_Init+0x98>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008a4:	4b15      	ldr	r3, [pc, #84]	; (80008fc <MX_ADC1_Init+0x98>)
 80008a6:	4a17      	ldr	r2, [pc, #92]	; (8000904 <MX_ADC1_Init+0xa0>)
 80008a8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008aa:	4b14      	ldr	r3, [pc, #80]	; (80008fc <MX_ADC1_Init+0x98>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80008b0:	4b12      	ldr	r3, [pc, #72]	; (80008fc <MX_ADC1_Init+0x98>)
 80008b2:	2201      	movs	r2, #1
 80008b4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008b6:	4b11      	ldr	r3, [pc, #68]	; (80008fc <MX_ADC1_Init+0x98>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008be:	4b0f      	ldr	r3, [pc, #60]	; (80008fc <MX_ADC1_Init+0x98>)
 80008c0:	2201      	movs	r2, #1
 80008c2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008c4:	480d      	ldr	r0, [pc, #52]	; (80008fc <MX_ADC1_Init+0x98>)
 80008c6:	f000 fdcf 	bl	8001468 <HAL_ADC_Init>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80008d0:	f000 fa36 	bl	8000d40 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80008d4:	2303      	movs	r3, #3
 80008d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80008d8:	2301      	movs	r3, #1
 80008da:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80008dc:	2300      	movs	r3, #0
 80008de:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008e0:	463b      	mov	r3, r7
 80008e2:	4619      	mov	r1, r3
 80008e4:	4805      	ldr	r0, [pc, #20]	; (80008fc <MX_ADC1_Init+0x98>)
 80008e6:	f000 ff6d 	bl	80017c4 <HAL_ADC_ConfigChannel>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80008f0:	f000 fa26 	bl	8000d40 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008f4:	bf00      	nop
 80008f6:	3710      	adds	r7, #16
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	200001f0 	.word	0x200001f0
 8000900:	40012000 	.word	0x40012000
 8000904:	0f000001 	.word	0x0f000001

08000908 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b084      	sub	sp, #16
 800090c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800090e:	463b      	mov	r3, r7
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	605a      	str	r2, [r3, #4]
 8000916:	609a      	str	r2, [r3, #8]
 8000918:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800091a:	4b21      	ldr	r3, [pc, #132]	; (80009a0 <MX_ADC2_Init+0x98>)
 800091c:	4a21      	ldr	r2, [pc, #132]	; (80009a4 <MX_ADC2_Init+0x9c>)
 800091e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8000920:	4b1f      	ldr	r3, [pc, #124]	; (80009a0 <MX_ADC2_Init+0x98>)
 8000922:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000926:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000928:	4b1d      	ldr	r3, [pc, #116]	; (80009a0 <MX_ADC2_Init+0x98>)
 800092a:	2200      	movs	r2, #0
 800092c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800092e:	4b1c      	ldr	r3, [pc, #112]	; (80009a0 <MX_ADC2_Init+0x98>)
 8000930:	2200      	movs	r2, #0
 8000932:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000934:	4b1a      	ldr	r3, [pc, #104]	; (80009a0 <MX_ADC2_Init+0x98>)
 8000936:	2200      	movs	r2, #0
 8000938:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800093a:	4b19      	ldr	r3, [pc, #100]	; (80009a0 <MX_ADC2_Init+0x98>)
 800093c:	2200      	movs	r2, #0
 800093e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000942:	4b17      	ldr	r3, [pc, #92]	; (80009a0 <MX_ADC2_Init+0x98>)
 8000944:	2200      	movs	r2, #0
 8000946:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000948:	4b15      	ldr	r3, [pc, #84]	; (80009a0 <MX_ADC2_Init+0x98>)
 800094a:	4a17      	ldr	r2, [pc, #92]	; (80009a8 <MX_ADC2_Init+0xa0>)
 800094c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800094e:	4b14      	ldr	r3, [pc, #80]	; (80009a0 <MX_ADC2_Init+0x98>)
 8000950:	2200      	movs	r2, #0
 8000952:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000954:	4b12      	ldr	r3, [pc, #72]	; (80009a0 <MX_ADC2_Init+0x98>)
 8000956:	2201      	movs	r2, #1
 8000958:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800095a:	4b11      	ldr	r3, [pc, #68]	; (80009a0 <MX_ADC2_Init+0x98>)
 800095c:	2200      	movs	r2, #0
 800095e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000962:	4b0f      	ldr	r3, [pc, #60]	; (80009a0 <MX_ADC2_Init+0x98>)
 8000964:	2201      	movs	r2, #1
 8000966:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000968:	480d      	ldr	r0, [pc, #52]	; (80009a0 <MX_ADC2_Init+0x98>)
 800096a:	f000 fd7d 	bl	8001468 <HAL_ADC_Init>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8000974:	f000 f9e4 	bl	8000d40 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000978:	2304      	movs	r3, #4
 800097a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800097c:	2301      	movs	r3, #1
 800097e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000980:	2300      	movs	r3, #0
 8000982:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000984:	463b      	mov	r3, r7
 8000986:	4619      	mov	r1, r3
 8000988:	4805      	ldr	r0, [pc, #20]	; (80009a0 <MX_ADC2_Init+0x98>)
 800098a:	f000 ff1b 	bl	80017c4 <HAL_ADC_ConfigChannel>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8000994:	f000 f9d4 	bl	8000d40 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000998:	bf00      	nop
 800099a:	3710      	adds	r7, #16
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	20000238 	.word	0x20000238
 80009a4:	40012100 	.word	0x40012100
 80009a8:	0f000001 	.word	0x0f000001

080009ac <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80009b0:	4b1f      	ldr	r3, [pc, #124]	; (8000a30 <MX_ETH_Init+0x84>)
 80009b2:	4a20      	ldr	r2, [pc, #128]	; (8000a34 <MX_ETH_Init+0x88>)
 80009b4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80009b6:	4b20      	ldr	r3, [pc, #128]	; (8000a38 <MX_ETH_Init+0x8c>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80009bc:	4b1e      	ldr	r3, [pc, #120]	; (8000a38 <MX_ETH_Init+0x8c>)
 80009be:	2280      	movs	r2, #128	; 0x80
 80009c0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80009c2:	4b1d      	ldr	r3, [pc, #116]	; (8000a38 <MX_ETH_Init+0x8c>)
 80009c4:	22e1      	movs	r2, #225	; 0xe1
 80009c6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80009c8:	4b1b      	ldr	r3, [pc, #108]	; (8000a38 <MX_ETH_Init+0x8c>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80009ce:	4b1a      	ldr	r3, [pc, #104]	; (8000a38 <MX_ETH_Init+0x8c>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80009d4:	4b18      	ldr	r3, [pc, #96]	; (8000a38 <MX_ETH_Init+0x8c>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80009da:	4b15      	ldr	r3, [pc, #84]	; (8000a30 <MX_ETH_Init+0x84>)
 80009dc:	4a16      	ldr	r2, [pc, #88]	; (8000a38 <MX_ETH_Init+0x8c>)
 80009de:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80009e0:	4b13      	ldr	r3, [pc, #76]	; (8000a30 <MX_ETH_Init+0x84>)
 80009e2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80009e6:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80009e8:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <MX_ETH_Init+0x84>)
 80009ea:	4a14      	ldr	r2, [pc, #80]	; (8000a3c <MX_ETH_Init+0x90>)
 80009ec:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80009ee:	4b10      	ldr	r3, [pc, #64]	; (8000a30 <MX_ETH_Init+0x84>)
 80009f0:	4a13      	ldr	r2, [pc, #76]	; (8000a40 <MX_ETH_Init+0x94>)
 80009f2:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80009f4:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <MX_ETH_Init+0x84>)
 80009f6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80009fa:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80009fc:	480c      	ldr	r0, [pc, #48]	; (8000a30 <MX_ETH_Init+0x84>)
 80009fe:	f001 f9f5 	bl	8001dec <HAL_ETH_Init>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000a08:	f000 f99a 	bl	8000d40 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000a0c:	2238      	movs	r2, #56	; 0x38
 8000a0e:	2100      	movs	r1, #0
 8000a10:	480c      	ldr	r0, [pc, #48]	; (8000a44 <MX_ETH_Init+0x98>)
 8000a12:	f004 fa65 	bl	8004ee0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000a16:	4b0b      	ldr	r3, [pc, #44]	; (8000a44 <MX_ETH_Init+0x98>)
 8000a18:	2221      	movs	r2, #33	; 0x21
 8000a1a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000a1c:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <MX_ETH_Init+0x98>)
 8000a1e:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000a22:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000a24:	4b07      	ldr	r3, [pc, #28]	; (8000a44 <MX_ETH_Init+0x98>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	20000280 	.word	0x20000280
 8000a34:	40028000 	.word	0x40028000
 8000a38:	200008a4 	.word	0x200008a4
 8000a3c:	20000150 	.word	0x20000150
 8000a40:	200000b0 	.word	0x200000b0
 8000a44:	20000078 	.word	0x20000078

08000a48 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b08e      	sub	sp, #56	; 0x38
 8000a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a52:	2200      	movs	r2, #0
 8000a54:	601a      	str	r2, [r3, #0]
 8000a56:	605a      	str	r2, [r3, #4]
 8000a58:	609a      	str	r2, [r3, #8]
 8000a5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a5c:	f107 0320 	add.w	r3, r7, #32
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a66:	1d3b      	adds	r3, r7, #4
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]
 8000a72:	611a      	str	r2, [r3, #16]
 8000a74:	615a      	str	r2, [r3, #20]
 8000a76:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a78:	4b2d      	ldr	r3, [pc, #180]	; (8000b30 <MX_TIM2_Init+0xe8>)
 8000a7a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a7e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8000a80:	4b2b      	ldr	r3, [pc, #172]	; (8000b30 <MX_TIM2_Init+0xe8>)
 8000a82:	2253      	movs	r2, #83	; 0x53
 8000a84:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a86:	4b2a      	ldr	r3, [pc, #168]	; (8000b30 <MX_TIM2_Init+0xe8>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8000a8c:	4b28      	ldr	r3, [pc, #160]	; (8000b30 <MX_TIM2_Init+0xe8>)
 8000a8e:	f242 720f 	movw	r2, #9999	; 0x270f
 8000a92:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a94:	4b26      	ldr	r3, [pc, #152]	; (8000b30 <MX_TIM2_Init+0xe8>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a9a:	4b25      	ldr	r3, [pc, #148]	; (8000b30 <MX_TIM2_Init+0xe8>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000aa0:	4823      	ldr	r0, [pc, #140]	; (8000b30 <MX_TIM2_Init+0xe8>)
 8000aa2:	f002 fc5f 	bl	8003364 <HAL_TIM_Base_Init>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000aac:	f000 f948 	bl	8000d40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ab0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ab4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ab6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000aba:	4619      	mov	r1, r3
 8000abc:	481c      	ldr	r0, [pc, #112]	; (8000b30 <MX_TIM2_Init+0xe8>)
 8000abe:	f002 fe83 	bl	80037c8 <HAL_TIM_ConfigClockSource>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000ac8:	f000 f93a 	bl	8000d40 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000acc:	4818      	ldr	r0, [pc, #96]	; (8000b30 <MX_TIM2_Init+0xe8>)
 8000ace:	f002 fc98 	bl	8003402 <HAL_TIM_PWM_Init>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000ad8:	f000 f932 	bl	8000d40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000adc:	2300      	movs	r3, #0
 8000ade:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ae4:	f107 0320 	add.w	r3, r7, #32
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4811      	ldr	r0, [pc, #68]	; (8000b30 <MX_TIM2_Init+0xe8>)
 8000aec:	f003 fa50 	bl	8003f90 <HAL_TIMEx_MasterConfigSynchronization>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000af6:	f000 f923 	bl	8000d40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000afa:	2360      	movs	r3, #96	; 0x60
 8000afc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000afe:	2300      	movs	r3, #0
 8000b00:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b02:	2300      	movs	r3, #0
 8000b04:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b06:	2300      	movs	r3, #0
 8000b08:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b0a:	1d3b      	adds	r3, r7, #4
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4807      	ldr	r0, [pc, #28]	; (8000b30 <MX_TIM2_Init+0xe8>)
 8000b12:	f002 fd97 	bl	8003644 <HAL_TIM_PWM_ConfigChannel>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000b1c:	f000 f910 	bl	8000d40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000b20:	4803      	ldr	r0, [pc, #12]	; (8000b30 <MX_TIM2_Init+0xe8>)
 8000b22:	f000 fa95 	bl	8001050 <HAL_TIM_MspPostInit>

}
 8000b26:	bf00      	nop
 8000b28:	3738      	adds	r7, #56	; 0x38
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	20000330 	.word	0x20000330

08000b34 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b38:	4b11      	ldr	r3, [pc, #68]	; (8000b80 <MX_USART3_UART_Init+0x4c>)
 8000b3a:	4a12      	ldr	r2, [pc, #72]	; (8000b84 <MX_USART3_UART_Init+0x50>)
 8000b3c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b3e:	4b10      	ldr	r3, [pc, #64]	; (8000b80 <MX_USART3_UART_Init+0x4c>)
 8000b40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b44:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b46:	4b0e      	ldr	r3, [pc, #56]	; (8000b80 <MX_USART3_UART_Init+0x4c>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b4c:	4b0c      	ldr	r3, [pc, #48]	; (8000b80 <MX_USART3_UART_Init+0x4c>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b52:	4b0b      	ldr	r3, [pc, #44]	; (8000b80 <MX_USART3_UART_Init+0x4c>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b58:	4b09      	ldr	r3, [pc, #36]	; (8000b80 <MX_USART3_UART_Init+0x4c>)
 8000b5a:	220c      	movs	r2, #12
 8000b5c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b5e:	4b08      	ldr	r3, [pc, #32]	; (8000b80 <MX_USART3_UART_Init+0x4c>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b64:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <MX_USART3_UART_Init+0x4c>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b6a:	4805      	ldr	r0, [pc, #20]	; (8000b80 <MX_USART3_UART_Init+0x4c>)
 8000b6c:	f003 fa8c 	bl	8004088 <HAL_UART_Init>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000b76:	f000 f8e3 	bl	8000d40 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b7a:	bf00      	nop
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	20000378 	.word	0x20000378
 8000b84:	40004800 	.word	0x40004800

08000b88 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b8c:	4b14      	ldr	r3, [pc, #80]	; (8000be0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b8e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000b92:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000b94:	4b12      	ldr	r3, [pc, #72]	; (8000be0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b96:	2204      	movs	r2, #4
 8000b98:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000b9a:	4b11      	ldr	r3, [pc, #68]	; (8000be0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b9c:	2202      	movs	r2, #2
 8000b9e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000ba0:	4b0f      	ldr	r3, [pc, #60]	; (8000be0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ba6:	4b0e      	ldr	r3, [pc, #56]	; (8000be0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ba8:	2202      	movs	r2, #2
 8000baa:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000bac:	4b0c      	ldr	r3, [pc, #48]	; (8000be0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bae:	2201      	movs	r2, #1
 8000bb0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000bb2:	4b0b      	ldr	r3, [pc, #44]	; (8000be0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000bb8:	4b09      	ldr	r3, [pc, #36]	; (8000be0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000bbe:	4b08      	ldr	r3, [pc, #32]	; (8000be0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000bc4:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000bca:	4805      	ldr	r0, [pc, #20]	; (8000be0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bcc:	f001 fe23 	bl	8002816 <HAL_PCD_Init>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000bd6:	f000 f8b3 	bl	8000d40 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	200003c0 	.word	0x200003c0

08000be4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08c      	sub	sp, #48	; 0x30
 8000be8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bea:	f107 031c 	add.w	r3, r7, #28
 8000bee:	2200      	movs	r2, #0
 8000bf0:	601a      	str	r2, [r3, #0]
 8000bf2:	605a      	str	r2, [r3, #4]
 8000bf4:	609a      	str	r2, [r3, #8]
 8000bf6:	60da      	str	r2, [r3, #12]
 8000bf8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	61bb      	str	r3, [r7, #24]
 8000bfe:	4b4c      	ldr	r3, [pc, #304]	; (8000d30 <MX_GPIO_Init+0x14c>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	4a4b      	ldr	r2, [pc, #300]	; (8000d30 <MX_GPIO_Init+0x14c>)
 8000c04:	f043 0304 	orr.w	r3, r3, #4
 8000c08:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0a:	4b49      	ldr	r3, [pc, #292]	; (8000d30 <MX_GPIO_Init+0x14c>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	f003 0304 	and.w	r3, r3, #4
 8000c12:	61bb      	str	r3, [r7, #24]
 8000c14:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	617b      	str	r3, [r7, #20]
 8000c1a:	4b45      	ldr	r3, [pc, #276]	; (8000d30 <MX_GPIO_Init+0x14c>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	4a44      	ldr	r2, [pc, #272]	; (8000d30 <MX_GPIO_Init+0x14c>)
 8000c20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c24:	6313      	str	r3, [r2, #48]	; 0x30
 8000c26:	4b42      	ldr	r3, [pc, #264]	; (8000d30 <MX_GPIO_Init+0x14c>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c2e:	617b      	str	r3, [r7, #20]
 8000c30:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	613b      	str	r3, [r7, #16]
 8000c36:	4b3e      	ldr	r3, [pc, #248]	; (8000d30 <MX_GPIO_Init+0x14c>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	4a3d      	ldr	r2, [pc, #244]	; (8000d30 <MX_GPIO_Init+0x14c>)
 8000c3c:	f043 0301 	orr.w	r3, r3, #1
 8000c40:	6313      	str	r3, [r2, #48]	; 0x30
 8000c42:	4b3b      	ldr	r3, [pc, #236]	; (8000d30 <MX_GPIO_Init+0x14c>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	f003 0301 	and.w	r3, r3, #1
 8000c4a:	613b      	str	r3, [r7, #16]
 8000c4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	60fb      	str	r3, [r7, #12]
 8000c52:	4b37      	ldr	r3, [pc, #220]	; (8000d30 <MX_GPIO_Init+0x14c>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	4a36      	ldr	r2, [pc, #216]	; (8000d30 <MX_GPIO_Init+0x14c>)
 8000c58:	f043 0302 	orr.w	r3, r3, #2
 8000c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5e:	4b34      	ldr	r3, [pc, #208]	; (8000d30 <MX_GPIO_Init+0x14c>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	f003 0302 	and.w	r3, r3, #2
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	60bb      	str	r3, [r7, #8]
 8000c6e:	4b30      	ldr	r3, [pc, #192]	; (8000d30 <MX_GPIO_Init+0x14c>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	4a2f      	ldr	r2, [pc, #188]	; (8000d30 <MX_GPIO_Init+0x14c>)
 8000c74:	f043 0308 	orr.w	r3, r3, #8
 8000c78:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7a:	4b2d      	ldr	r3, [pc, #180]	; (8000d30 <MX_GPIO_Init+0x14c>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	f003 0308 	and.w	r3, r3, #8
 8000c82:	60bb      	str	r3, [r7, #8]
 8000c84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	607b      	str	r3, [r7, #4]
 8000c8a:	4b29      	ldr	r3, [pc, #164]	; (8000d30 <MX_GPIO_Init+0x14c>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	4a28      	ldr	r2, [pc, #160]	; (8000d30 <MX_GPIO_Init+0x14c>)
 8000c90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c94:	6313      	str	r3, [r2, #48]	; 0x30
 8000c96:	4b26      	ldr	r3, [pc, #152]	; (8000d30 <MX_GPIO_Init+0x14c>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c9e:	607b      	str	r3, [r7, #4]
 8000ca0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	f244 0181 	movw	r1, #16513	; 0x4081
 8000ca8:	4822      	ldr	r0, [pc, #136]	; (8000d34 <MX_GPIO_Init+0x150>)
 8000caa:	f001 fd9b 	bl	80027e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	2140      	movs	r1, #64	; 0x40
 8000cb2:	4821      	ldr	r0, [pc, #132]	; (8000d38 <MX_GPIO_Init+0x154>)
 8000cb4:	f001 fd96 	bl	80027e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000cb8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cbe:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000cc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000cc8:	f107 031c 	add.w	r3, r7, #28
 8000ccc:	4619      	mov	r1, r3
 8000cce:	481b      	ldr	r0, [pc, #108]	; (8000d3c <MX_GPIO_Init+0x158>)
 8000cd0:	f001 fbdc 	bl	800248c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000cd4:	f244 0381 	movw	r3, #16513	; 0x4081
 8000cd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ce6:	f107 031c 	add.w	r3, r7, #28
 8000cea:	4619      	mov	r1, r3
 8000cec:	4811      	ldr	r0, [pc, #68]	; (8000d34 <MX_GPIO_Init+0x150>)
 8000cee:	f001 fbcd 	bl	800248c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000cf2:	2340      	movs	r3, #64	; 0x40
 8000cf4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000d02:	f107 031c 	add.w	r3, r7, #28
 8000d06:	4619      	mov	r1, r3
 8000d08:	480b      	ldr	r0, [pc, #44]	; (8000d38 <MX_GPIO_Init+0x154>)
 8000d0a:	f001 fbbf 	bl	800248c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000d0e:	2380      	movs	r3, #128	; 0x80
 8000d10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d12:	2300      	movs	r3, #0
 8000d14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	2300      	movs	r3, #0
 8000d18:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d1a:	f107 031c 	add.w	r3, r7, #28
 8000d1e:	4619      	mov	r1, r3
 8000d20:	4805      	ldr	r0, [pc, #20]	; (8000d38 <MX_GPIO_Init+0x154>)
 8000d22:	f001 fbb3 	bl	800248c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d26:	bf00      	nop
 8000d28:	3730      	adds	r7, #48	; 0x30
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	40023800 	.word	0x40023800
 8000d34:	40020400 	.word	0x40020400
 8000d38:	40021800 	.word	0x40021800
 8000d3c:	40020800 	.word	0x40020800

08000d40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d44:	b672      	cpsid	i
}
 8000d46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d48:	e7fe      	b.n	8000d48 <Error_Handler+0x8>
	...

08000d4c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	607b      	str	r3, [r7, #4]
 8000d56:	4b10      	ldr	r3, [pc, #64]	; (8000d98 <HAL_MspInit+0x4c>)
 8000d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d5a:	4a0f      	ldr	r2, [pc, #60]	; (8000d98 <HAL_MspInit+0x4c>)
 8000d5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d60:	6453      	str	r3, [r2, #68]	; 0x44
 8000d62:	4b0d      	ldr	r3, [pc, #52]	; (8000d98 <HAL_MspInit+0x4c>)
 8000d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d6a:	607b      	str	r3, [r7, #4]
 8000d6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	603b      	str	r3, [r7, #0]
 8000d72:	4b09      	ldr	r3, [pc, #36]	; (8000d98 <HAL_MspInit+0x4c>)
 8000d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d76:	4a08      	ldr	r2, [pc, #32]	; (8000d98 <HAL_MspInit+0x4c>)
 8000d78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d7e:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <HAL_MspInit+0x4c>)
 8000d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d86:	603b      	str	r3, [r7, #0]
 8000d88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	370c      	adds	r7, #12
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	40023800 	.word	0x40023800

08000d9c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b08c      	sub	sp, #48	; 0x30
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da4:	f107 031c 	add.w	r3, r7, #28
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	605a      	str	r2, [r3, #4]
 8000dae:	609a      	str	r2, [r3, #8]
 8000db0:	60da      	str	r2, [r3, #12]
 8000db2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a2e      	ldr	r2, [pc, #184]	; (8000e74 <HAL_ADC_MspInit+0xd8>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d128      	bne.n	8000e10 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	61bb      	str	r3, [r7, #24]
 8000dc2:	4b2d      	ldr	r3, [pc, #180]	; (8000e78 <HAL_ADC_MspInit+0xdc>)
 8000dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc6:	4a2c      	ldr	r2, [pc, #176]	; (8000e78 <HAL_ADC_MspInit+0xdc>)
 8000dc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dcc:	6453      	str	r3, [r2, #68]	; 0x44
 8000dce:	4b2a      	ldr	r3, [pc, #168]	; (8000e78 <HAL_ADC_MspInit+0xdc>)
 8000dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dd6:	61bb      	str	r3, [r7, #24]
 8000dd8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	617b      	str	r3, [r7, #20]
 8000dde:	4b26      	ldr	r3, [pc, #152]	; (8000e78 <HAL_ADC_MspInit+0xdc>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de2:	4a25      	ldr	r2, [pc, #148]	; (8000e78 <HAL_ADC_MspInit+0xdc>)
 8000de4:	f043 0301 	orr.w	r3, r3, #1
 8000de8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dea:	4b23      	ldr	r3, [pc, #140]	; (8000e78 <HAL_ADC_MspInit+0xdc>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dee:	f003 0301 	and.w	r3, r3, #1
 8000df2:	617b      	str	r3, [r7, #20]
 8000df4:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000df6:	2308      	movs	r3, #8
 8000df8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dfa:	2303      	movs	r3, #3
 8000dfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e02:	f107 031c 	add.w	r3, r7, #28
 8000e06:	4619      	mov	r1, r3
 8000e08:	481c      	ldr	r0, [pc, #112]	; (8000e7c <HAL_ADC_MspInit+0xe0>)
 8000e0a:	f001 fb3f 	bl	800248c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000e0e:	e02c      	b.n	8000e6a <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a1a      	ldr	r2, [pc, #104]	; (8000e80 <HAL_ADC_MspInit+0xe4>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d127      	bne.n	8000e6a <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	613b      	str	r3, [r7, #16]
 8000e1e:	4b16      	ldr	r3, [pc, #88]	; (8000e78 <HAL_ADC_MspInit+0xdc>)
 8000e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e22:	4a15      	ldr	r2, [pc, #84]	; (8000e78 <HAL_ADC_MspInit+0xdc>)
 8000e24:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e28:	6453      	str	r3, [r2, #68]	; 0x44
 8000e2a:	4b13      	ldr	r3, [pc, #76]	; (8000e78 <HAL_ADC_MspInit+0xdc>)
 8000e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e32:	613b      	str	r3, [r7, #16]
 8000e34:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	60fb      	str	r3, [r7, #12]
 8000e3a:	4b0f      	ldr	r3, [pc, #60]	; (8000e78 <HAL_ADC_MspInit+0xdc>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	4a0e      	ldr	r2, [pc, #56]	; (8000e78 <HAL_ADC_MspInit+0xdc>)
 8000e40:	f043 0301 	orr.w	r3, r3, #1
 8000e44:	6313      	str	r3, [r2, #48]	; 0x30
 8000e46:	4b0c      	ldr	r3, [pc, #48]	; (8000e78 <HAL_ADC_MspInit+0xdc>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	f003 0301 	and.w	r3, r3, #1
 8000e4e:	60fb      	str	r3, [r7, #12]
 8000e50:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000e52:	2310      	movs	r3, #16
 8000e54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e56:	2303      	movs	r3, #3
 8000e58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e5e:	f107 031c 	add.w	r3, r7, #28
 8000e62:	4619      	mov	r1, r3
 8000e64:	4805      	ldr	r0, [pc, #20]	; (8000e7c <HAL_ADC_MspInit+0xe0>)
 8000e66:	f001 fb11 	bl	800248c <HAL_GPIO_Init>
}
 8000e6a:	bf00      	nop
 8000e6c:	3730      	adds	r7, #48	; 0x30
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40012000 	.word	0x40012000
 8000e78:	40023800 	.word	0x40023800
 8000e7c:	40020000 	.word	0x40020000
 8000e80:	40012100 	.word	0x40012100

08000e84 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b08e      	sub	sp, #56	; 0x38
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	605a      	str	r2, [r3, #4]
 8000e96:	609a      	str	r2, [r3, #8]
 8000e98:	60da      	str	r2, [r3, #12]
 8000e9a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a55      	ldr	r2, [pc, #340]	; (8000ff8 <HAL_ETH_MspInit+0x174>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	f040 80a4 	bne.w	8000ff0 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	623b      	str	r3, [r7, #32]
 8000eac:	4b53      	ldr	r3, [pc, #332]	; (8000ffc <HAL_ETH_MspInit+0x178>)
 8000eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb0:	4a52      	ldr	r2, [pc, #328]	; (8000ffc <HAL_ETH_MspInit+0x178>)
 8000eb2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000eb6:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb8:	4b50      	ldr	r3, [pc, #320]	; (8000ffc <HAL_ETH_MspInit+0x178>)
 8000eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ec0:	623b      	str	r3, [r7, #32]
 8000ec2:	6a3b      	ldr	r3, [r7, #32]
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	61fb      	str	r3, [r7, #28]
 8000ec8:	4b4c      	ldr	r3, [pc, #304]	; (8000ffc <HAL_ETH_MspInit+0x178>)
 8000eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ecc:	4a4b      	ldr	r2, [pc, #300]	; (8000ffc <HAL_ETH_MspInit+0x178>)
 8000ece:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000ed2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed4:	4b49      	ldr	r3, [pc, #292]	; (8000ffc <HAL_ETH_MspInit+0x178>)
 8000ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000edc:	61fb      	str	r3, [r7, #28]
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	61bb      	str	r3, [r7, #24]
 8000ee4:	4b45      	ldr	r3, [pc, #276]	; (8000ffc <HAL_ETH_MspInit+0x178>)
 8000ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee8:	4a44      	ldr	r2, [pc, #272]	; (8000ffc <HAL_ETH_MspInit+0x178>)
 8000eea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000eee:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef0:	4b42      	ldr	r3, [pc, #264]	; (8000ffc <HAL_ETH_MspInit+0x178>)
 8000ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000ef8:	61bb      	str	r3, [r7, #24]
 8000efa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000efc:	2300      	movs	r3, #0
 8000efe:	617b      	str	r3, [r7, #20]
 8000f00:	4b3e      	ldr	r3, [pc, #248]	; (8000ffc <HAL_ETH_MspInit+0x178>)
 8000f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f04:	4a3d      	ldr	r2, [pc, #244]	; (8000ffc <HAL_ETH_MspInit+0x178>)
 8000f06:	f043 0304 	orr.w	r3, r3, #4
 8000f0a:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0c:	4b3b      	ldr	r3, [pc, #236]	; (8000ffc <HAL_ETH_MspInit+0x178>)
 8000f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f10:	f003 0304 	and.w	r3, r3, #4
 8000f14:	617b      	str	r3, [r7, #20]
 8000f16:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f18:	2300      	movs	r3, #0
 8000f1a:	613b      	str	r3, [r7, #16]
 8000f1c:	4b37      	ldr	r3, [pc, #220]	; (8000ffc <HAL_ETH_MspInit+0x178>)
 8000f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f20:	4a36      	ldr	r2, [pc, #216]	; (8000ffc <HAL_ETH_MspInit+0x178>)
 8000f22:	f043 0301 	orr.w	r3, r3, #1
 8000f26:	6313      	str	r3, [r2, #48]	; 0x30
 8000f28:	4b34      	ldr	r3, [pc, #208]	; (8000ffc <HAL_ETH_MspInit+0x178>)
 8000f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2c:	f003 0301 	and.w	r3, r3, #1
 8000f30:	613b      	str	r3, [r7, #16]
 8000f32:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f34:	2300      	movs	r3, #0
 8000f36:	60fb      	str	r3, [r7, #12]
 8000f38:	4b30      	ldr	r3, [pc, #192]	; (8000ffc <HAL_ETH_MspInit+0x178>)
 8000f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3c:	4a2f      	ldr	r2, [pc, #188]	; (8000ffc <HAL_ETH_MspInit+0x178>)
 8000f3e:	f043 0302 	orr.w	r3, r3, #2
 8000f42:	6313      	str	r3, [r2, #48]	; 0x30
 8000f44:	4b2d      	ldr	r3, [pc, #180]	; (8000ffc <HAL_ETH_MspInit+0x178>)
 8000f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f48:	f003 0302 	and.w	r3, r3, #2
 8000f4c:	60fb      	str	r3, [r7, #12]
 8000f4e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f50:	2300      	movs	r3, #0
 8000f52:	60bb      	str	r3, [r7, #8]
 8000f54:	4b29      	ldr	r3, [pc, #164]	; (8000ffc <HAL_ETH_MspInit+0x178>)
 8000f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f58:	4a28      	ldr	r2, [pc, #160]	; (8000ffc <HAL_ETH_MspInit+0x178>)
 8000f5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f5e:	6313      	str	r3, [r2, #48]	; 0x30
 8000f60:	4b26      	ldr	r3, [pc, #152]	; (8000ffc <HAL_ETH_MspInit+0x178>)
 8000f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f68:	60bb      	str	r3, [r7, #8]
 8000f6a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000f6c:	2332      	movs	r3, #50	; 0x32
 8000f6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f70:	2302      	movs	r3, #2
 8000f72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f74:	2300      	movs	r3, #0
 8000f76:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f78:	2303      	movs	r3, #3
 8000f7a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f7c:	230b      	movs	r3, #11
 8000f7e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f84:	4619      	mov	r1, r3
 8000f86:	481e      	ldr	r0, [pc, #120]	; (8001000 <HAL_ETH_MspInit+0x17c>)
 8000f88:	f001 fa80 	bl	800248c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000f8c:	2386      	movs	r3, #134	; 0x86
 8000f8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f90:	2302      	movs	r3, #2
 8000f92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f94:	2300      	movs	r3, #0
 8000f96:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f98:	2303      	movs	r3, #3
 8000f9a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f9c:	230b      	movs	r3, #11
 8000f9e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4817      	ldr	r0, [pc, #92]	; (8001004 <HAL_ETH_MspInit+0x180>)
 8000fa8:	f001 fa70 	bl	800248c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000fac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fb0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fba:	2303      	movs	r3, #3
 8000fbc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fbe:	230b      	movs	r3, #11
 8000fc0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000fc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	480f      	ldr	r0, [pc, #60]	; (8001008 <HAL_ETH_MspInit+0x184>)
 8000fca:	f001 fa5f 	bl	800248c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000fce:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000fd2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fdc:	2303      	movs	r3, #3
 8000fde:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fe0:	230b      	movs	r3, #11
 8000fe2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fe4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4808      	ldr	r0, [pc, #32]	; (800100c <HAL_ETH_MspInit+0x188>)
 8000fec:	f001 fa4e 	bl	800248c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000ff0:	bf00      	nop
 8000ff2:	3738      	adds	r7, #56	; 0x38
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	40028000 	.word	0x40028000
 8000ffc:	40023800 	.word	0x40023800
 8001000:	40020800 	.word	0x40020800
 8001004:	40020000 	.word	0x40020000
 8001008:	40020400 	.word	0x40020400
 800100c:	40021800 	.word	0x40021800

08001010 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001010:	b480      	push	{r7}
 8001012:	b085      	sub	sp, #20
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001020:	d10d      	bne.n	800103e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	60fb      	str	r3, [r7, #12]
 8001026:	4b09      	ldr	r3, [pc, #36]	; (800104c <HAL_TIM_Base_MspInit+0x3c>)
 8001028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102a:	4a08      	ldr	r2, [pc, #32]	; (800104c <HAL_TIM_Base_MspInit+0x3c>)
 800102c:	f043 0301 	orr.w	r3, r3, #1
 8001030:	6413      	str	r3, [r2, #64]	; 0x40
 8001032:	4b06      	ldr	r3, [pc, #24]	; (800104c <HAL_TIM_Base_MspInit+0x3c>)
 8001034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001036:	f003 0301 	and.w	r3, r3, #1
 800103a:	60fb      	str	r3, [r7, #12]
 800103c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800103e:	bf00      	nop
 8001040:	3714      	adds	r7, #20
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	40023800 	.word	0x40023800

08001050 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b088      	sub	sp, #32
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001058:	f107 030c 	add.w	r3, r7, #12
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]
 8001064:	60da      	str	r2, [r3, #12]
 8001066:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001070:	d11d      	bne.n	80010ae <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001072:	2300      	movs	r3, #0
 8001074:	60bb      	str	r3, [r7, #8]
 8001076:	4b10      	ldr	r3, [pc, #64]	; (80010b8 <HAL_TIM_MspPostInit+0x68>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	4a0f      	ldr	r2, [pc, #60]	; (80010b8 <HAL_TIM_MspPostInit+0x68>)
 800107c:	f043 0301 	orr.w	r3, r3, #1
 8001080:	6313      	str	r3, [r2, #48]	; 0x30
 8001082:	4b0d      	ldr	r3, [pc, #52]	; (80010b8 <HAL_TIM_MspPostInit+0x68>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	f003 0301 	and.w	r3, r3, #1
 800108a:	60bb      	str	r3, [r7, #8]
 800108c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800108e:	2320      	movs	r3, #32
 8001090:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001092:	2302      	movs	r3, #2
 8001094:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001096:	2300      	movs	r3, #0
 8001098:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109a:	2300      	movs	r3, #0
 800109c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800109e:	2301      	movs	r3, #1
 80010a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a2:	f107 030c 	add.w	r3, r7, #12
 80010a6:	4619      	mov	r1, r3
 80010a8:	4804      	ldr	r0, [pc, #16]	; (80010bc <HAL_TIM_MspPostInit+0x6c>)
 80010aa:	f001 f9ef 	bl	800248c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80010ae:	bf00      	nop
 80010b0:	3720      	adds	r7, #32
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	40023800 	.word	0x40023800
 80010bc:	40020000 	.word	0x40020000

080010c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b08a      	sub	sp, #40	; 0x28
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c8:	f107 0314 	add.w	r3, r7, #20
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	605a      	str	r2, [r3, #4]
 80010d2:	609a      	str	r2, [r3, #8]
 80010d4:	60da      	str	r2, [r3, #12]
 80010d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a19      	ldr	r2, [pc, #100]	; (8001144 <HAL_UART_MspInit+0x84>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d12c      	bne.n	800113c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	613b      	str	r3, [r7, #16]
 80010e6:	4b18      	ldr	r3, [pc, #96]	; (8001148 <HAL_UART_MspInit+0x88>)
 80010e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ea:	4a17      	ldr	r2, [pc, #92]	; (8001148 <HAL_UART_MspInit+0x88>)
 80010ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010f0:	6413      	str	r3, [r2, #64]	; 0x40
 80010f2:	4b15      	ldr	r3, [pc, #84]	; (8001148 <HAL_UART_MspInit+0x88>)
 80010f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010fa:	613b      	str	r3, [r7, #16]
 80010fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	4b11      	ldr	r3, [pc, #68]	; (8001148 <HAL_UART_MspInit+0x88>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	4a10      	ldr	r2, [pc, #64]	; (8001148 <HAL_UART_MspInit+0x88>)
 8001108:	f043 0308 	orr.w	r3, r3, #8
 800110c:	6313      	str	r3, [r2, #48]	; 0x30
 800110e:	4b0e      	ldr	r3, [pc, #56]	; (8001148 <HAL_UART_MspInit+0x88>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	f003 0308 	and.w	r3, r3, #8
 8001116:	60fb      	str	r3, [r7, #12]
 8001118:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800111a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800111e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001120:	2302      	movs	r3, #2
 8001122:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	2300      	movs	r3, #0
 8001126:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001128:	2303      	movs	r3, #3
 800112a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800112c:	2307      	movs	r3, #7
 800112e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001130:	f107 0314 	add.w	r3, r7, #20
 8001134:	4619      	mov	r1, r3
 8001136:	4805      	ldr	r0, [pc, #20]	; (800114c <HAL_UART_MspInit+0x8c>)
 8001138:	f001 f9a8 	bl	800248c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800113c:	bf00      	nop
 800113e:	3728      	adds	r7, #40	; 0x28
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	40004800 	.word	0x40004800
 8001148:	40023800 	.word	0x40023800
 800114c:	40020c00 	.word	0x40020c00

08001150 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b08a      	sub	sp, #40	; 0x28
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001158:	f107 0314 	add.w	r3, r7, #20
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
 8001164:	60da      	str	r2, [r3, #12]
 8001166:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001170:	d13f      	bne.n	80011f2 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	613b      	str	r3, [r7, #16]
 8001176:	4b21      	ldr	r3, [pc, #132]	; (80011fc <HAL_PCD_MspInit+0xac>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	4a20      	ldr	r2, [pc, #128]	; (80011fc <HAL_PCD_MspInit+0xac>)
 800117c:	f043 0301 	orr.w	r3, r3, #1
 8001180:	6313      	str	r3, [r2, #48]	; 0x30
 8001182:	4b1e      	ldr	r3, [pc, #120]	; (80011fc <HAL_PCD_MspInit+0xac>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	613b      	str	r3, [r7, #16]
 800118c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800118e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001192:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001194:	2302      	movs	r3, #2
 8001196:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001198:	2300      	movs	r3, #0
 800119a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800119c:	2303      	movs	r3, #3
 800119e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80011a0:	230a      	movs	r3, #10
 80011a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a4:	f107 0314 	add.w	r3, r7, #20
 80011a8:	4619      	mov	r1, r3
 80011aa:	4815      	ldr	r0, [pc, #84]	; (8001200 <HAL_PCD_MspInit+0xb0>)
 80011ac:	f001 f96e 	bl	800248c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80011b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011b6:	2300      	movs	r3, #0
 80011b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ba:	2300      	movs	r3, #0
 80011bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80011be:	f107 0314 	add.w	r3, r7, #20
 80011c2:	4619      	mov	r1, r3
 80011c4:	480e      	ldr	r0, [pc, #56]	; (8001200 <HAL_PCD_MspInit+0xb0>)
 80011c6:	f001 f961 	bl	800248c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80011ca:	4b0c      	ldr	r3, [pc, #48]	; (80011fc <HAL_PCD_MspInit+0xac>)
 80011cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011ce:	4a0b      	ldr	r2, [pc, #44]	; (80011fc <HAL_PCD_MspInit+0xac>)
 80011d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011d4:	6353      	str	r3, [r2, #52]	; 0x34
 80011d6:	2300      	movs	r3, #0
 80011d8:	60fb      	str	r3, [r7, #12]
 80011da:	4b08      	ldr	r3, [pc, #32]	; (80011fc <HAL_PCD_MspInit+0xac>)
 80011dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011de:	4a07      	ldr	r2, [pc, #28]	; (80011fc <HAL_PCD_MspInit+0xac>)
 80011e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011e4:	6453      	str	r3, [r2, #68]	; 0x44
 80011e6:	4b05      	ldr	r3, [pc, #20]	; (80011fc <HAL_PCD_MspInit+0xac>)
 80011e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011ee:	60fb      	str	r3, [r7, #12]
 80011f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80011f2:	bf00      	nop
 80011f4:	3728      	adds	r7, #40	; 0x28
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	40023800 	.word	0x40023800
 8001200:	40020000 	.word	0x40020000

08001204 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001208:	e7fe      	b.n	8001208 <NMI_Handler+0x4>

0800120a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800120a:	b480      	push	{r7}
 800120c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800120e:	e7fe      	b.n	800120e <HardFault_Handler+0x4>

08001210 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001214:	e7fe      	b.n	8001214 <MemManage_Handler+0x4>

08001216 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001216:	b480      	push	{r7}
 8001218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800121a:	e7fe      	b.n	800121a <BusFault_Handler+0x4>

0800121c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001220:	e7fe      	b.n	8001220 <UsageFault_Handler+0x4>

08001222 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001222:	b480      	push	{r7}
 8001224:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001226:	bf00      	nop
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr

08001230 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001234:	bf00      	nop
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr

0800123e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800123e:	b480      	push	{r7}
 8001240:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001242:	bf00      	nop
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr

0800124c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001250:	f000 f8c6 	bl	80013e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001254:	bf00      	nop
 8001256:	bd80      	pop	{r7, pc}

08001258 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b086      	sub	sp, #24
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001260:	4a14      	ldr	r2, [pc, #80]	; (80012b4 <_sbrk+0x5c>)
 8001262:	4b15      	ldr	r3, [pc, #84]	; (80012b8 <_sbrk+0x60>)
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800126c:	4b13      	ldr	r3, [pc, #76]	; (80012bc <_sbrk+0x64>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d102      	bne.n	800127a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001274:	4b11      	ldr	r3, [pc, #68]	; (80012bc <_sbrk+0x64>)
 8001276:	4a12      	ldr	r2, [pc, #72]	; (80012c0 <_sbrk+0x68>)
 8001278:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800127a:	4b10      	ldr	r3, [pc, #64]	; (80012bc <_sbrk+0x64>)
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4413      	add	r3, r2
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	429a      	cmp	r2, r3
 8001286:	d207      	bcs.n	8001298 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001288:	f003 fe32 	bl	8004ef0 <__errno>
 800128c:	4603      	mov	r3, r0
 800128e:	220c      	movs	r2, #12
 8001290:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001292:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001296:	e009      	b.n	80012ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001298:	4b08      	ldr	r3, [pc, #32]	; (80012bc <_sbrk+0x64>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800129e:	4b07      	ldr	r3, [pc, #28]	; (80012bc <_sbrk+0x64>)
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4413      	add	r3, r2
 80012a6:	4a05      	ldr	r2, [pc, #20]	; (80012bc <_sbrk+0x64>)
 80012a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012aa:	68fb      	ldr	r3, [r7, #12]
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3718      	adds	r7, #24
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	20030000 	.word	0x20030000
 80012b8:	00000400 	.word	0x00000400
 80012bc:	200008ac 	.word	0x200008ac
 80012c0:	20000a00 	.word	0x20000a00

080012c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012c8:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <SystemInit+0x20>)
 80012ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012ce:	4a05      	ldr	r2, [pc, #20]	; (80012e4 <SystemInit+0x20>)
 80012d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012d8:	bf00      	nop
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	e000ed00 	.word	0xe000ed00

080012e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80012e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001320 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012ec:	f7ff ffea 	bl	80012c4 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012f0:	480c      	ldr	r0, [pc, #48]	; (8001324 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012f2:	490d      	ldr	r1, [pc, #52]	; (8001328 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012f4:	4a0d      	ldr	r2, [pc, #52]	; (800132c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012f8:	e002      	b.n	8001300 <LoopCopyDataInit>

080012fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012fe:	3304      	adds	r3, #4

08001300 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001300:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001302:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001304:	d3f9      	bcc.n	80012fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001306:	4a0a      	ldr	r2, [pc, #40]	; (8001330 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001308:	4c0a      	ldr	r4, [pc, #40]	; (8001334 <LoopFillZerobss+0x22>)
  movs r3, #0
 800130a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800130c:	e001      	b.n	8001312 <LoopFillZerobss>

0800130e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800130e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001310:	3204      	adds	r2, #4

08001312 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001312:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001314:	d3fb      	bcc.n	800130e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001316:	f003 fdf1 	bl	8004efc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800131a:	f7ff fa01 	bl	8000720 <main>
  bx  lr    
 800131e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001320:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001324:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001328:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800132c:	08005874 	.word	0x08005874
  ldr r2, =_sbss
 8001330:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001334:	200009fc 	.word	0x200009fc

08001338 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001338:	e7fe      	b.n	8001338 <ADC_IRQHandler>
	...

0800133c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001340:	4b0e      	ldr	r3, [pc, #56]	; (800137c <HAL_Init+0x40>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a0d      	ldr	r2, [pc, #52]	; (800137c <HAL_Init+0x40>)
 8001346:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800134a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800134c:	4b0b      	ldr	r3, [pc, #44]	; (800137c <HAL_Init+0x40>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a0a      	ldr	r2, [pc, #40]	; (800137c <HAL_Init+0x40>)
 8001352:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001356:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001358:	4b08      	ldr	r3, [pc, #32]	; (800137c <HAL_Init+0x40>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a07      	ldr	r2, [pc, #28]	; (800137c <HAL_Init+0x40>)
 800135e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001362:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001364:	2003      	movs	r0, #3
 8001366:	f000 fd0d 	bl	8001d84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800136a:	2000      	movs	r0, #0
 800136c:	f000 f808 	bl	8001380 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001370:	f7ff fcec 	bl	8000d4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001374:	2300      	movs	r3, #0
}
 8001376:	4618      	mov	r0, r3
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	40023c00 	.word	0x40023c00

08001380 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001388:	4b12      	ldr	r3, [pc, #72]	; (80013d4 <HAL_InitTick+0x54>)
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	4b12      	ldr	r3, [pc, #72]	; (80013d8 <HAL_InitTick+0x58>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	4619      	mov	r1, r3
 8001392:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001396:	fbb3 f3f1 	udiv	r3, r3, r1
 800139a:	fbb2 f3f3 	udiv	r3, r2, r3
 800139e:	4618      	mov	r0, r3
 80013a0:	f000 fd17 	bl	8001dd2 <HAL_SYSTICK_Config>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	e00e      	b.n	80013cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2b0f      	cmp	r3, #15
 80013b2:	d80a      	bhi.n	80013ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013b4:	2200      	movs	r2, #0
 80013b6:	6879      	ldr	r1, [r7, #4]
 80013b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013bc:	f000 fced 	bl	8001d9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013c0:	4a06      	ldr	r2, [pc, #24]	; (80013dc <HAL_InitTick+0x5c>)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013c6:	2300      	movs	r3, #0
 80013c8:	e000      	b.n	80013cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3708      	adds	r7, #8
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	20000000 	.word	0x20000000
 80013d8:	20000008 	.word	0x20000008
 80013dc:	20000004 	.word	0x20000004

080013e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013e4:	4b06      	ldr	r3, [pc, #24]	; (8001400 <HAL_IncTick+0x20>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	461a      	mov	r2, r3
 80013ea:	4b06      	ldr	r3, [pc, #24]	; (8001404 <HAL_IncTick+0x24>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4413      	add	r3, r2
 80013f0:	4a04      	ldr	r2, [pc, #16]	; (8001404 <HAL_IncTick+0x24>)
 80013f2:	6013      	str	r3, [r2, #0]
}
 80013f4:	bf00      	nop
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	20000008 	.word	0x20000008
 8001404:	200008b0 	.word	0x200008b0

08001408 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  return uwTick;
 800140c:	4b03      	ldr	r3, [pc, #12]	; (800141c <HAL_GetTick+0x14>)
 800140e:	681b      	ldr	r3, [r3, #0]
}
 8001410:	4618      	mov	r0, r3
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	200008b0 	.word	0x200008b0

08001420 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001428:	f7ff ffee 	bl	8001408 <HAL_GetTick>
 800142c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001438:	d005      	beq.n	8001446 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800143a:	4b0a      	ldr	r3, [pc, #40]	; (8001464 <HAL_Delay+0x44>)
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	461a      	mov	r2, r3
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	4413      	add	r3, r2
 8001444:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001446:	bf00      	nop
 8001448:	f7ff ffde 	bl	8001408 <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	68fa      	ldr	r2, [r7, #12]
 8001454:	429a      	cmp	r2, r3
 8001456:	d8f7      	bhi.n	8001448 <HAL_Delay+0x28>
  {
  }
}
 8001458:	bf00      	nop
 800145a:	bf00      	nop
 800145c:	3710      	adds	r7, #16
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	20000008 	.word	0x20000008

08001468 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001470:	2300      	movs	r3, #0
 8001472:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d101      	bne.n	800147e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e033      	b.n	80014e6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001482:	2b00      	cmp	r3, #0
 8001484:	d109      	bne.n	800149a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f7ff fc88 	bl	8000d9c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2200      	movs	r2, #0
 8001490:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2200      	movs	r2, #0
 8001496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149e:	f003 0310 	and.w	r3, r3, #16
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d118      	bne.n	80014d8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014aa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80014ae:	f023 0302 	bic.w	r3, r3, #2
 80014b2:	f043 0202 	orr.w	r2, r3, #2
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f000 fab4 	bl	8001a28 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2200      	movs	r2, #0
 80014c4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ca:	f023 0303 	bic.w	r3, r3, #3
 80014ce:	f043 0201 	orr.w	r2, r3, #1
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	641a      	str	r2, [r3, #64]	; 0x40
 80014d6:	e001      	b.n	80014dc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2200      	movs	r2, #0
 80014e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80014e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3710      	adds	r7, #16
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
	...

080014f0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b085      	sub	sp, #20
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80014f8:	2300      	movs	r3, #0
 80014fa:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001502:	2b01      	cmp	r3, #1
 8001504:	d101      	bne.n	800150a <HAL_ADC_Start+0x1a>
 8001506:	2302      	movs	r3, #2
 8001508:	e0b2      	b.n	8001670 <HAL_ADC_Start+0x180>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2201      	movs	r2, #1
 800150e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	f003 0301 	and.w	r3, r3, #1
 800151c:	2b01      	cmp	r3, #1
 800151e:	d018      	beq.n	8001552 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	689a      	ldr	r2, [r3, #8]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f042 0201 	orr.w	r2, r2, #1
 800152e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001530:	4b52      	ldr	r3, [pc, #328]	; (800167c <HAL_ADC_Start+0x18c>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a52      	ldr	r2, [pc, #328]	; (8001680 <HAL_ADC_Start+0x190>)
 8001536:	fba2 2303 	umull	r2, r3, r2, r3
 800153a:	0c9a      	lsrs	r2, r3, #18
 800153c:	4613      	mov	r3, r2
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	4413      	add	r3, r2
 8001542:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001544:	e002      	b.n	800154c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	3b01      	subs	r3, #1
 800154a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d1f9      	bne.n	8001546 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	f003 0301 	and.w	r3, r3, #1
 800155c:	2b01      	cmp	r3, #1
 800155e:	d17a      	bne.n	8001656 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001564:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001568:	f023 0301 	bic.w	r3, r3, #1
 800156c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800157e:	2b00      	cmp	r3, #0
 8001580:	d007      	beq.n	8001592 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001586:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800158a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001596:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800159a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800159e:	d106      	bne.n	80015ae <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a4:	f023 0206 	bic.w	r2, r3, #6
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	645a      	str	r2, [r3, #68]	; 0x44
 80015ac:	e002      	b.n	80015b4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2200      	movs	r2, #0
 80015b2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2200      	movs	r2, #0
 80015b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015bc:	4b31      	ldr	r3, [pc, #196]	; (8001684 <HAL_ADC_Start+0x194>)
 80015be:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80015c8:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f003 031f 	and.w	r3, r3, #31
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d12a      	bne.n	800162c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a2b      	ldr	r2, [pc, #172]	; (8001688 <HAL_ADC_Start+0x198>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d015      	beq.n	800160c <HAL_ADC_Start+0x11c>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a29      	ldr	r2, [pc, #164]	; (800168c <HAL_ADC_Start+0x19c>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d105      	bne.n	80015f6 <HAL_ADC_Start+0x106>
 80015ea:	4b26      	ldr	r3, [pc, #152]	; (8001684 <HAL_ADC_Start+0x194>)
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f003 031f 	and.w	r3, r3, #31
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d00a      	beq.n	800160c <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a25      	ldr	r2, [pc, #148]	; (8001690 <HAL_ADC_Start+0x1a0>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d136      	bne.n	800166e <HAL_ADC_Start+0x17e>
 8001600:	4b20      	ldr	r3, [pc, #128]	; (8001684 <HAL_ADC_Start+0x194>)
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f003 0310 	and.w	r3, r3, #16
 8001608:	2b00      	cmp	r3, #0
 800160a:	d130      	bne.n	800166e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d129      	bne.n	800166e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	689a      	ldr	r2, [r3, #8]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001628:	609a      	str	r2, [r3, #8]
 800162a:	e020      	b.n	800166e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a15      	ldr	r2, [pc, #84]	; (8001688 <HAL_ADC_Start+0x198>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d11b      	bne.n	800166e <HAL_ADC_Start+0x17e>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001640:	2b00      	cmp	r3, #0
 8001642:	d114      	bne.n	800166e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	689a      	ldr	r2, [r3, #8]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001652:	609a      	str	r2, [r3, #8]
 8001654:	e00b      	b.n	800166e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165a:	f043 0210 	orr.w	r2, r3, #16
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001666:	f043 0201 	orr.w	r2, r3, #1
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 800166e:	2300      	movs	r3, #0
}
 8001670:	4618      	mov	r0, r3
 8001672:	3714      	adds	r7, #20
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr
 800167c:	20000000 	.word	0x20000000
 8001680:	431bde83 	.word	0x431bde83
 8001684:	40012300 	.word	0x40012300
 8001688:	40012000 	.word	0x40012000
 800168c:	40012100 	.word	0x40012100
 8001690:	40012200 	.word	0x40012200

08001694 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800169e:	2300      	movs	r3, #0
 80016a0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016b0:	d113      	bne.n	80016da <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80016bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016c0:	d10b      	bne.n	80016da <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c6:	f043 0220 	orr.w	r2, r3, #32
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2200      	movs	r2, #0
 80016d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e063      	b.n	80017a2 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80016da:	f7ff fe95 	bl	8001408 <HAL_GetTick>
 80016de:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80016e0:	e021      	b.n	8001726 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80016e8:	d01d      	beq.n	8001726 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d007      	beq.n	8001700 <HAL_ADC_PollForConversion+0x6c>
 80016f0:	f7ff fe8a 	bl	8001408 <HAL_GetTick>
 80016f4:	4602      	mov	r2, r0
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	683a      	ldr	r2, [r7, #0]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d212      	bcs.n	8001726 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 0302 	and.w	r3, r3, #2
 800170a:	2b02      	cmp	r3, #2
 800170c:	d00b      	beq.n	8001726 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001712:	f043 0204 	orr.w	r2, r3, #4
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2200      	movs	r2, #0
 800171e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	e03d      	b.n	80017a2 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 0302 	and.w	r3, r3, #2
 8001730:	2b02      	cmp	r3, #2
 8001732:	d1d6      	bne.n	80016e2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f06f 0212 	mvn.w	r2, #18
 800173c:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001742:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001754:	2b00      	cmp	r3, #0
 8001756:	d123      	bne.n	80017a0 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800175c:	2b00      	cmp	r3, #0
 800175e:	d11f      	bne.n	80017a0 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001766:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800176a:	2b00      	cmp	r3, #0
 800176c:	d006      	beq.n	800177c <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001778:	2b00      	cmp	r3, #0
 800177a:	d111      	bne.n	80017a0 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001780:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	641a      	str	r2, [r3, #64]	; 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001790:	2b00      	cmp	r3, #0
 8001792:	d105      	bne.n	80017a0 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001798:	f043 0201 	orr.w	r2, r3, #1
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80017a0:	2300      	movs	r3, #0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3710      	adds	r7, #16
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}

080017aa <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80017aa:	b480      	push	{r7}
 80017ac:	b083      	sub	sp, #12
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	370c      	adds	r7, #12
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr

080017c4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b085      	sub	sp, #20
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80017ce:	2300      	movs	r3, #0
 80017d0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d101      	bne.n	80017e0 <HAL_ADC_ConfigChannel+0x1c>
 80017dc:	2302      	movs	r3, #2
 80017de:	e113      	b.n	8001a08 <HAL_ADC_ConfigChannel+0x244>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2201      	movs	r2, #1
 80017e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2b09      	cmp	r3, #9
 80017ee:	d925      	bls.n	800183c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	68d9      	ldr	r1, [r3, #12]
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	b29b      	uxth	r3, r3
 80017fc:	461a      	mov	r2, r3
 80017fe:	4613      	mov	r3, r2
 8001800:	005b      	lsls	r3, r3, #1
 8001802:	4413      	add	r3, r2
 8001804:	3b1e      	subs	r3, #30
 8001806:	2207      	movs	r2, #7
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	43da      	mvns	r2, r3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	400a      	ands	r2, r1
 8001814:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	68d9      	ldr	r1, [r3, #12]
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	689a      	ldr	r2, [r3, #8]
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	b29b      	uxth	r3, r3
 8001826:	4618      	mov	r0, r3
 8001828:	4603      	mov	r3, r0
 800182a:	005b      	lsls	r3, r3, #1
 800182c:	4403      	add	r3, r0
 800182e:	3b1e      	subs	r3, #30
 8001830:	409a      	lsls	r2, r3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	430a      	orrs	r2, r1
 8001838:	60da      	str	r2, [r3, #12]
 800183a:	e022      	b.n	8001882 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	6919      	ldr	r1, [r3, #16]
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	b29b      	uxth	r3, r3
 8001848:	461a      	mov	r2, r3
 800184a:	4613      	mov	r3, r2
 800184c:	005b      	lsls	r3, r3, #1
 800184e:	4413      	add	r3, r2
 8001850:	2207      	movs	r2, #7
 8001852:	fa02 f303 	lsl.w	r3, r2, r3
 8001856:	43da      	mvns	r2, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	400a      	ands	r2, r1
 800185e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	6919      	ldr	r1, [r3, #16]
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	689a      	ldr	r2, [r3, #8]
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	b29b      	uxth	r3, r3
 8001870:	4618      	mov	r0, r3
 8001872:	4603      	mov	r3, r0
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	4403      	add	r3, r0
 8001878:	409a      	lsls	r2, r3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	430a      	orrs	r2, r1
 8001880:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	2b06      	cmp	r3, #6
 8001888:	d824      	bhi.n	80018d4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685a      	ldr	r2, [r3, #4]
 8001894:	4613      	mov	r3, r2
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	4413      	add	r3, r2
 800189a:	3b05      	subs	r3, #5
 800189c:	221f      	movs	r2, #31
 800189e:	fa02 f303 	lsl.w	r3, r2, r3
 80018a2:	43da      	mvns	r2, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	400a      	ands	r2, r1
 80018aa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	b29b      	uxth	r3, r3
 80018b8:	4618      	mov	r0, r3
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685a      	ldr	r2, [r3, #4]
 80018be:	4613      	mov	r3, r2
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	4413      	add	r3, r2
 80018c4:	3b05      	subs	r3, #5
 80018c6:	fa00 f203 	lsl.w	r2, r0, r3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	430a      	orrs	r2, r1
 80018d0:	635a      	str	r2, [r3, #52]	; 0x34
 80018d2:	e04c      	b.n	800196e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	2b0c      	cmp	r3, #12
 80018da:	d824      	bhi.n	8001926 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	685a      	ldr	r2, [r3, #4]
 80018e6:	4613      	mov	r3, r2
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	4413      	add	r3, r2
 80018ec:	3b23      	subs	r3, #35	; 0x23
 80018ee:	221f      	movs	r2, #31
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	43da      	mvns	r2, r3
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	400a      	ands	r2, r1
 80018fc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	b29b      	uxth	r3, r3
 800190a:	4618      	mov	r0, r3
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685a      	ldr	r2, [r3, #4]
 8001910:	4613      	mov	r3, r2
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	4413      	add	r3, r2
 8001916:	3b23      	subs	r3, #35	; 0x23
 8001918:	fa00 f203 	lsl.w	r2, r0, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	430a      	orrs	r2, r1
 8001922:	631a      	str	r2, [r3, #48]	; 0x30
 8001924:	e023      	b.n	800196e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685a      	ldr	r2, [r3, #4]
 8001930:	4613      	mov	r3, r2
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	4413      	add	r3, r2
 8001936:	3b41      	subs	r3, #65	; 0x41
 8001938:	221f      	movs	r2, #31
 800193a:	fa02 f303 	lsl.w	r3, r2, r3
 800193e:	43da      	mvns	r2, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	400a      	ands	r2, r1
 8001946:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	b29b      	uxth	r3, r3
 8001954:	4618      	mov	r0, r3
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	685a      	ldr	r2, [r3, #4]
 800195a:	4613      	mov	r3, r2
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	4413      	add	r3, r2
 8001960:	3b41      	subs	r3, #65	; 0x41
 8001962:	fa00 f203 	lsl.w	r2, r0, r3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	430a      	orrs	r2, r1
 800196c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800196e:	4b29      	ldr	r3, [pc, #164]	; (8001a14 <HAL_ADC_ConfigChannel+0x250>)
 8001970:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a28      	ldr	r2, [pc, #160]	; (8001a18 <HAL_ADC_ConfigChannel+0x254>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d10f      	bne.n	800199c <HAL_ADC_ConfigChannel+0x1d8>
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2b12      	cmp	r3, #18
 8001982:	d10b      	bne.n	800199c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a1d      	ldr	r2, [pc, #116]	; (8001a18 <HAL_ADC_ConfigChannel+0x254>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d12b      	bne.n	80019fe <HAL_ADC_ConfigChannel+0x23a>
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a1c      	ldr	r2, [pc, #112]	; (8001a1c <HAL_ADC_ConfigChannel+0x258>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d003      	beq.n	80019b8 <HAL_ADC_ConfigChannel+0x1f4>
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2b11      	cmp	r3, #17
 80019b6:	d122      	bne.n	80019fe <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a11      	ldr	r2, [pc, #68]	; (8001a1c <HAL_ADC_ConfigChannel+0x258>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d111      	bne.n	80019fe <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80019da:	4b11      	ldr	r3, [pc, #68]	; (8001a20 <HAL_ADC_ConfigChannel+0x25c>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a11      	ldr	r2, [pc, #68]	; (8001a24 <HAL_ADC_ConfigChannel+0x260>)
 80019e0:	fba2 2303 	umull	r2, r3, r2, r3
 80019e4:	0c9a      	lsrs	r2, r3, #18
 80019e6:	4613      	mov	r3, r2
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	4413      	add	r3, r2
 80019ec:	005b      	lsls	r3, r3, #1
 80019ee:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80019f0:	e002      	b.n	80019f8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	3b01      	subs	r3, #1
 80019f6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d1f9      	bne.n	80019f2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2200      	movs	r2, #0
 8001a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8001a06:	2300      	movs	r3, #0
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3714      	adds	r7, #20
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr
 8001a14:	40012300 	.word	0x40012300
 8001a18:	40012000 	.word	0x40012000
 8001a1c:	10000012 	.word	0x10000012
 8001a20:	20000000 	.word	0x20000000
 8001a24:	431bde83 	.word	0x431bde83

08001a28 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b085      	sub	sp, #20
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a30:	4b79      	ldr	r3, [pc, #484]	; (8001c18 <ADC_Init+0x1f0>)
 8001a32:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	685a      	ldr	r2, [r3, #4]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	431a      	orrs	r2, r3
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	685a      	ldr	r2, [r3, #4]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a5c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	6859      	ldr	r1, [r3, #4]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	691b      	ldr	r3, [r3, #16]
 8001a68:	021a      	lsls	r2, r3, #8
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	430a      	orrs	r2, r1
 8001a70:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	685a      	ldr	r2, [r3, #4]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001a80:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	6859      	ldr	r1, [r3, #4]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	689a      	ldr	r2, [r3, #8]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	430a      	orrs	r2, r1
 8001a92:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	689a      	ldr	r2, [r3, #8]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001aa2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	6899      	ldr	r1, [r3, #8]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	68da      	ldr	r2, [r3, #12]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	430a      	orrs	r2, r1
 8001ab4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aba:	4a58      	ldr	r2, [pc, #352]	; (8001c1c <ADC_Init+0x1f4>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d022      	beq.n	8001b06 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	689a      	ldr	r2, [r3, #8]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ace:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	6899      	ldr	r1, [r3, #8]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	430a      	orrs	r2, r1
 8001ae0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	689a      	ldr	r2, [r3, #8]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001af0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	6899      	ldr	r1, [r3, #8]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	430a      	orrs	r2, r1
 8001b02:	609a      	str	r2, [r3, #8]
 8001b04:	e00f      	b.n	8001b26 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	689a      	ldr	r2, [r3, #8]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b14:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	689a      	ldr	r2, [r3, #8]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b24:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	689a      	ldr	r2, [r3, #8]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f022 0202 	bic.w	r2, r2, #2
 8001b34:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	6899      	ldr	r1, [r3, #8]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	7e1b      	ldrb	r3, [r3, #24]
 8001b40:	005a      	lsls	r2, r3, #1
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	430a      	orrs	r2, r1
 8001b48:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d01b      	beq.n	8001b8c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	685a      	ldr	r2, [r3, #4]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b62:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	685a      	ldr	r2, [r3, #4]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001b72:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	6859      	ldr	r1, [r3, #4]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b7e:	3b01      	subs	r3, #1
 8001b80:	035a      	lsls	r2, r3, #13
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	430a      	orrs	r2, r1
 8001b88:	605a      	str	r2, [r3, #4]
 8001b8a:	e007      	b.n	8001b9c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	685a      	ldr	r2, [r3, #4]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b9a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001baa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	69db      	ldr	r3, [r3, #28]
 8001bb6:	3b01      	subs	r3, #1
 8001bb8:	051a      	lsls	r2, r3, #20
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	430a      	orrs	r2, r1
 8001bc0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	689a      	ldr	r2, [r3, #8]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001bd0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	6899      	ldr	r1, [r3, #8]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001bde:	025a      	lsls	r2, r3, #9
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	430a      	orrs	r2, r1
 8001be6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	689a      	ldr	r2, [r3, #8]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bf6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	6899      	ldr	r1, [r3, #8]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	695b      	ldr	r3, [r3, #20]
 8001c02:	029a      	lsls	r2, r3, #10
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	430a      	orrs	r2, r1
 8001c0a:	609a      	str	r2, [r3, #8]
}
 8001c0c:	bf00      	nop
 8001c0e:	3714      	adds	r7, #20
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr
 8001c18:	40012300 	.word	0x40012300
 8001c1c:	0f000001 	.word	0x0f000001

08001c20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f003 0307 	and.w	r3, r3, #7
 8001c2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c30:	4b0c      	ldr	r3, [pc, #48]	; (8001c64 <__NVIC_SetPriorityGrouping+0x44>)
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c36:	68ba      	ldr	r2, [r7, #8]
 8001c38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c52:	4a04      	ldr	r2, [pc, #16]	; (8001c64 <__NVIC_SetPriorityGrouping+0x44>)
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	60d3      	str	r3, [r2, #12]
}
 8001c58:	bf00      	nop
 8001c5a:	3714      	adds	r7, #20
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr
 8001c64:	e000ed00 	.word	0xe000ed00

08001c68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c6c:	4b04      	ldr	r3, [pc, #16]	; (8001c80 <__NVIC_GetPriorityGrouping+0x18>)
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	0a1b      	lsrs	r3, r3, #8
 8001c72:	f003 0307 	and.w	r3, r3, #7
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr
 8001c80:	e000ed00 	.word	0xe000ed00

08001c84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	6039      	str	r1, [r7, #0]
 8001c8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	db0a      	blt.n	8001cae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	b2da      	uxtb	r2, r3
 8001c9c:	490c      	ldr	r1, [pc, #48]	; (8001cd0 <__NVIC_SetPriority+0x4c>)
 8001c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca2:	0112      	lsls	r2, r2, #4
 8001ca4:	b2d2      	uxtb	r2, r2
 8001ca6:	440b      	add	r3, r1
 8001ca8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cac:	e00a      	b.n	8001cc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	b2da      	uxtb	r2, r3
 8001cb2:	4908      	ldr	r1, [pc, #32]	; (8001cd4 <__NVIC_SetPriority+0x50>)
 8001cb4:	79fb      	ldrb	r3, [r7, #7]
 8001cb6:	f003 030f 	and.w	r3, r3, #15
 8001cba:	3b04      	subs	r3, #4
 8001cbc:	0112      	lsls	r2, r2, #4
 8001cbe:	b2d2      	uxtb	r2, r2
 8001cc0:	440b      	add	r3, r1
 8001cc2:	761a      	strb	r2, [r3, #24]
}
 8001cc4:	bf00      	nop
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr
 8001cd0:	e000e100 	.word	0xe000e100
 8001cd4:	e000ed00 	.word	0xe000ed00

08001cd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b089      	sub	sp, #36	; 0x24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	60b9      	str	r1, [r7, #8]
 8001ce2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	f003 0307 	and.w	r3, r3, #7
 8001cea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	f1c3 0307 	rsb	r3, r3, #7
 8001cf2:	2b04      	cmp	r3, #4
 8001cf4:	bf28      	it	cs
 8001cf6:	2304      	movcs	r3, #4
 8001cf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	3304      	adds	r3, #4
 8001cfe:	2b06      	cmp	r3, #6
 8001d00:	d902      	bls.n	8001d08 <NVIC_EncodePriority+0x30>
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	3b03      	subs	r3, #3
 8001d06:	e000      	b.n	8001d0a <NVIC_EncodePriority+0x32>
 8001d08:	2300      	movs	r3, #0
 8001d0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	fa02 f303 	lsl.w	r3, r2, r3
 8001d16:	43da      	mvns	r2, r3
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	401a      	ands	r2, r3
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d20:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	fa01 f303 	lsl.w	r3, r1, r3
 8001d2a:	43d9      	mvns	r1, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d30:	4313      	orrs	r3, r2
         );
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3724      	adds	r7, #36	; 0x24
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
	...

08001d40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	3b01      	subs	r3, #1
 8001d4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d50:	d301      	bcc.n	8001d56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d52:	2301      	movs	r3, #1
 8001d54:	e00f      	b.n	8001d76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d56:	4a0a      	ldr	r2, [pc, #40]	; (8001d80 <SysTick_Config+0x40>)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	3b01      	subs	r3, #1
 8001d5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d5e:	210f      	movs	r1, #15
 8001d60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d64:	f7ff ff8e 	bl	8001c84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d68:	4b05      	ldr	r3, [pc, #20]	; (8001d80 <SysTick_Config+0x40>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d6e:	4b04      	ldr	r3, [pc, #16]	; (8001d80 <SysTick_Config+0x40>)
 8001d70:	2207      	movs	r2, #7
 8001d72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	e000e010 	.word	0xe000e010

08001d84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f7ff ff47 	bl	8001c20 <__NVIC_SetPriorityGrouping>
}
 8001d92:	bf00      	nop
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b086      	sub	sp, #24
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	4603      	mov	r3, r0
 8001da2:	60b9      	str	r1, [r7, #8]
 8001da4:	607a      	str	r2, [r7, #4]
 8001da6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001da8:	2300      	movs	r3, #0
 8001daa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dac:	f7ff ff5c 	bl	8001c68 <__NVIC_GetPriorityGrouping>
 8001db0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	68b9      	ldr	r1, [r7, #8]
 8001db6:	6978      	ldr	r0, [r7, #20]
 8001db8:	f7ff ff8e 	bl	8001cd8 <NVIC_EncodePriority>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dc2:	4611      	mov	r1, r2
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7ff ff5d 	bl	8001c84 <__NVIC_SetPriority>
}
 8001dca:	bf00      	nop
 8001dcc:	3718      	adds	r7, #24
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b082      	sub	sp, #8
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f7ff ffb0 	bl	8001d40 <SysTick_Config>
 8001de0:	4603      	mov	r3, r0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
	...

08001dec <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d101      	bne.n	8001dfe <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e08a      	b.n	8001f14 <HAL_ETH_Init+0x128>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d106      	bne.n	8001e16 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2223      	movs	r2, #35	; 0x23
 8001e0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f7ff f837 	bl	8000e84 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e16:	2300      	movs	r3, #0
 8001e18:	60bb      	str	r3, [r7, #8]
 8001e1a:	4b40      	ldr	r3, [pc, #256]	; (8001f1c <HAL_ETH_Init+0x130>)
 8001e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1e:	4a3f      	ldr	r2, [pc, #252]	; (8001f1c <HAL_ETH_Init+0x130>)
 8001e20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e24:	6453      	str	r3, [r2, #68]	; 0x44
 8001e26:	4b3d      	ldr	r3, [pc, #244]	; (8001f1c <HAL_ETH_Init+0x130>)
 8001e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e2e:	60bb      	str	r3, [r7, #8]
 8001e30:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001e32:	4b3b      	ldr	r3, [pc, #236]	; (8001f20 <HAL_ETH_Init+0x134>)
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	4a3a      	ldr	r2, [pc, #232]	; (8001f20 <HAL_ETH_Init+0x134>)
 8001e38:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001e3c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001e3e:	4b38      	ldr	r3, [pc, #224]	; (8001f20 <HAL_ETH_Init+0x134>)
 8001e40:	685a      	ldr	r2, [r3, #4]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	4936      	ldr	r1, [pc, #216]	; (8001f20 <HAL_ETH_Init+0x134>)
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001e4c:	4b34      	ldr	r3, [pc, #208]	; (8001f20 <HAL_ETH_Init+0x134>)
 8001e4e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	6812      	ldr	r2, [r2, #0]
 8001e5e:	f043 0301 	orr.w	r3, r3, #1
 8001e62:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e66:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e68:	f7ff face 	bl	8001408 <HAL_GetTick>
 8001e6c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001e6e:	e011      	b.n	8001e94 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001e70:	f7ff faca 	bl	8001408 <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001e7e:	d909      	bls.n	8001e94 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2204      	movs	r2, #4
 8001e84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	22e0      	movs	r2, #224	; 0xe0
 8001e8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e03f      	b.n	8001f14 <HAL_ETH_Init+0x128>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0301 	and.w	r3, r3, #1
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d1e4      	bne.n	8001e70 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f000 f97a 	bl	80021a0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f000 fa25 	bl	80022fc <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f000 fa7b 	bl	80023ae <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	2100      	movs	r1, #0
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f000 f9e3 	bl	800228c <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 8001ed4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	6812      	ldr	r2, [r2, #0]
 8001ee2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ee6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001eea:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 8001efe:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2210      	movs	r2, #16
 8001f0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001f12:	2300      	movs	r3, #0
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3710      	adds	r7, #16
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	40023800 	.word	0x40023800
 8001f20:	40013800 	.word	0x40013800

08001f24 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001f36:	68fa      	ldr	r2, [r7, #12]
 8001f38:	4b53      	ldr	r3, [pc, #332]	; (8002088 <ETH_SetMACConfig+0x164>)
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	7b9b      	ldrb	r3, [r3, #14]
 8001f42:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001f44:	683a      	ldr	r2, [r7, #0]
 8001f46:	7c12      	ldrb	r2, [r2, #16]
 8001f48:	2a00      	cmp	r2, #0
 8001f4a:	d102      	bne.n	8001f52 <ETH_SetMACConfig+0x2e>
 8001f4c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001f50:	e000      	b.n	8001f54 <ETH_SetMACConfig+0x30>
 8001f52:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001f54:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001f56:	683a      	ldr	r2, [r7, #0]
 8001f58:	7c52      	ldrb	r2, [r2, #17]
 8001f5a:	2a00      	cmp	r2, #0
 8001f5c:	d102      	bne.n	8001f64 <ETH_SetMACConfig+0x40>
 8001f5e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001f62:	e000      	b.n	8001f66 <ETH_SetMACConfig+0x42>
 8001f64:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001f66:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001f6c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	7fdb      	ldrb	r3, [r3, #31]
 8001f72:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001f74:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001f7a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001f7c:	683a      	ldr	r2, [r7, #0]
 8001f7e:	7f92      	ldrb	r2, [r2, #30]
 8001f80:	2a00      	cmp	r2, #0
 8001f82:	d102      	bne.n	8001f8a <ETH_SetMACConfig+0x66>
 8001f84:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f88:	e000      	b.n	8001f8c <ETH_SetMACConfig+0x68>
 8001f8a:	2200      	movs	r2, #0
                        macconf->Speed |
 8001f8c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	7f1b      	ldrb	r3, [r3, #28]
 8001f92:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001f94:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001f9a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	791b      	ldrb	r3, [r3, #4]
 8001fa0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001fa2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001fa4:	683a      	ldr	r2, [r7, #0]
 8001fa6:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001faa:	2a00      	cmp	r2, #0
 8001fac:	d102      	bne.n	8001fb4 <ETH_SetMACConfig+0x90>
 8001fae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fb2:	e000      	b.n	8001fb6 <ETH_SetMACConfig+0x92>
 8001fb4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001fb6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	7bdb      	ldrb	r3, [r3, #15]
 8001fbc:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001fbe:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001fc4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001fcc:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	68fa      	ldr	r2, [r7, #12]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	68fa      	ldr	r2, [r7, #12]
 8001fdc:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fe6:	2001      	movs	r0, #1
 8001fe8:	f7ff fa1a 	bl	8001420 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	68fa      	ldr	r2, [r7, #12]
 8001ff2:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	699b      	ldr	r3, [r3, #24]
 8001ffa:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001ffc:	68fa      	ldr	r2, [r7, #12]
 8001ffe:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002002:	4013      	ands	r3, r2
 8002004:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800200a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800200c:	683a      	ldr	r2, [r7, #0]
 800200e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002012:	2a00      	cmp	r2, #0
 8002014:	d101      	bne.n	800201a <ETH_SetMACConfig+0xf6>
 8002016:	2280      	movs	r2, #128	; 0x80
 8002018:	e000      	b.n	800201c <ETH_SetMACConfig+0xf8>
 800201a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800201c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002022:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002024:	683a      	ldr	r2, [r7, #0]
 8002026:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800202a:	2a01      	cmp	r2, #1
 800202c:	d101      	bne.n	8002032 <ETH_SetMACConfig+0x10e>
 800202e:	2208      	movs	r2, #8
 8002030:	e000      	b.n	8002034 <ETH_SetMACConfig+0x110>
 8002032:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002034:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002036:	683a      	ldr	r2, [r7, #0]
 8002038:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 800203c:	2a01      	cmp	r2, #1
 800203e:	d101      	bne.n	8002044 <ETH_SetMACConfig+0x120>
 8002040:	2204      	movs	r2, #4
 8002042:	e000      	b.n	8002046 <ETH_SetMACConfig+0x122>
 8002044:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002046:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002048:	683a      	ldr	r2, [r7, #0]
 800204a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800204e:	2a01      	cmp	r2, #1
 8002050:	d101      	bne.n	8002056 <ETH_SetMACConfig+0x132>
 8002052:	2202      	movs	r2, #2
 8002054:	e000      	b.n	8002058 <ETH_SetMACConfig+0x134>
 8002056:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002058:	4313      	orrs	r3, r2
 800205a:	68fa      	ldr	r2, [r7, #12]
 800205c:	4313      	orrs	r3, r2
 800205e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	68fa      	ldr	r2, [r7, #12]
 8002066:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	699b      	ldr	r3, [r3, #24]
 800206e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002070:	2001      	movs	r0, #1
 8002072:	f7ff f9d5 	bl	8001420 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	68fa      	ldr	r2, [r7, #12]
 800207c:	619a      	str	r2, [r3, #24]
}
 800207e:	bf00      	nop
 8002080:	3710      	adds	r7, #16
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	fd20810f 	.word	0xfd20810f

0800208c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800209e:	699b      	ldr	r3, [r3, #24]
 80020a0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80020a2:	68fa      	ldr	r2, [r7, #12]
 80020a4:	4b3d      	ldr	r3, [pc, #244]	; (800219c <ETH_SetDMAConfig+0x110>)
 80020a6:	4013      	ands	r3, r2
 80020a8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	7b1b      	ldrb	r3, [r3, #12]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d102      	bne.n	80020b8 <ETH_SetDMAConfig+0x2c>
 80020b2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80020b6:	e000      	b.n	80020ba <ETH_SetDMAConfig+0x2e>
 80020b8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	7b5b      	ldrb	r3, [r3, #13]
 80020be:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80020c0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80020c2:	683a      	ldr	r2, [r7, #0]
 80020c4:	7f52      	ldrb	r2, [r2, #29]
 80020c6:	2a00      	cmp	r2, #0
 80020c8:	d102      	bne.n	80020d0 <ETH_SetDMAConfig+0x44>
 80020ca:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80020ce:	e000      	b.n	80020d2 <ETH_SetDMAConfig+0x46>
 80020d0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80020d2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	7b9b      	ldrb	r3, [r3, #14]
 80020d8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80020da:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80020e0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	7f1b      	ldrb	r3, [r3, #28]
 80020e6:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80020e8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	7f9b      	ldrb	r3, [r3, #30]
 80020ee:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80020f0:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80020f6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80020fe:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002100:	4313      	orrs	r3, r2
 8002102:	68fa      	ldr	r2, [r7, #12]
 8002104:	4313      	orrs	r3, r2
 8002106:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002110:	461a      	mov	r2, r3
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800211e:	699b      	ldr	r3, [r3, #24]
 8002120:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002122:	2001      	movs	r0, #1
 8002124:	f7ff f97c 	bl	8001420 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002130:	461a      	mov	r2, r3
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	791b      	ldrb	r3, [r3, #4]
 800213a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002140:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002146:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800214c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002154:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002156:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800215c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800215e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002164:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	6812      	ldr	r2, [r2, #0]
 800216a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800216e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002172:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002180:	2001      	movs	r0, #1
 8002182:	f7ff f94d 	bl	8001420 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800218e:	461a      	mov	r2, r3
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	6013      	str	r3, [r2, #0]
}
 8002194:	bf00      	nop
 8002196:	3710      	adds	r7, #16
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	f8de3f23 	.word	0xf8de3f23

080021a0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b0a6      	sub	sp, #152	; 0x98
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80021a8:	2301      	movs	r3, #1
 80021aa:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80021ae:	2301      	movs	r3, #1
 80021b0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80021b4:	2300      	movs	r3, #0
 80021b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80021b8:	2300      	movs	r3, #0
 80021ba:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80021be:	2301      	movs	r3, #1
 80021c0:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80021c4:	2300      	movs	r3, #0
 80021c6:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80021ca:	2301      	movs	r3, #1
 80021cc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 80021d0:	2301      	movs	r3, #1
 80021d2:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80021d6:	2300      	movs	r3, #0
 80021d8:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80021dc:	2300      	movs	r3, #0
 80021de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80021e2:	2300      	movs	r3, #0
 80021e4:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80021e6:	2300      	movs	r3, #0
 80021e8:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80021ec:	2300      	movs	r3, #0
 80021ee:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80021f0:	2300      	movs	r3, #0
 80021f2:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80021f6:	2300      	movs	r3, #0
 80021f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80021fc:	2300      	movs	r3, #0
 80021fe:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002202:	2300      	movs	r3, #0
 8002204:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002208:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800220c:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800220e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002212:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002214:	2300      	movs	r3, #0
 8002216:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800221a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800221e:	4619      	mov	r1, r3
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f7ff fe7f 	bl	8001f24 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002226:	2301      	movs	r3, #1
 8002228:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800222a:	2301      	movs	r3, #1
 800222c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800222e:	2301      	movs	r3, #1
 8002230:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002234:	2301      	movs	r3, #1
 8002236:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002238:	2300      	movs	r3, #0
 800223a:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800223c:	2300      	movs	r3, #0
 800223e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002242:	2300      	movs	r3, #0
 8002244:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002248:	2300      	movs	r3, #0
 800224a:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800224c:	2301      	movs	r3, #1
 800224e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002252:	2301      	movs	r3, #1
 8002254:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002256:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800225a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800225c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002260:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002262:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002266:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002268:	2301      	movs	r3, #1
 800226a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800226e:	2300      	movs	r3, #0
 8002270:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002272:	2300      	movs	r3, #0
 8002274:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002276:	f107 0308 	add.w	r3, r7, #8
 800227a:	4619      	mov	r1, r3
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f7ff ff05 	bl	800208c <ETH_SetDMAConfig>
}
 8002282:	bf00      	nop
 8002284:	3798      	adds	r7, #152	; 0x98
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
	...

0800228c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800228c:	b480      	push	{r7}
 800228e:	b087      	sub	sp, #28
 8002290:	af00      	add	r7, sp, #0
 8002292:	60f8      	str	r0, [r7, #12]
 8002294:	60b9      	str	r1, [r7, #8]
 8002296:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	3305      	adds	r3, #5
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	021b      	lsls	r3, r3, #8
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	3204      	adds	r2, #4
 80022a4:	7812      	ldrb	r2, [r2, #0]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80022aa:	68ba      	ldr	r2, [r7, #8]
 80022ac:	4b11      	ldr	r3, [pc, #68]	; (80022f4 <ETH_MACAddressConfig+0x68>)
 80022ae:	4413      	add	r3, r2
 80022b0:	461a      	mov	r2, r3
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	3303      	adds	r3, #3
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	061a      	lsls	r2, r3, #24
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	3302      	adds	r3, #2
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	041b      	lsls	r3, r3, #16
 80022c6:	431a      	orrs	r2, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	3301      	adds	r3, #1
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	021b      	lsls	r3, r3, #8
 80022d0:	4313      	orrs	r3, r2
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	7812      	ldrb	r2, [r2, #0]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80022da:	68ba      	ldr	r2, [r7, #8]
 80022dc:	4b06      	ldr	r3, [pc, #24]	; (80022f8 <ETH_MACAddressConfig+0x6c>)
 80022de:	4413      	add	r3, r2
 80022e0:	461a      	mov	r2, r3
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	6013      	str	r3, [r2, #0]
}
 80022e6:	bf00      	nop
 80022e8:	371c      	adds	r7, #28
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	40028040 	.word	0x40028040
 80022f8:	40028044 	.word	0x40028044

080022fc <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b085      	sub	sp, #20
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002304:	2300      	movs	r3, #0
 8002306:	60fb      	str	r3, [r7, #12]
 8002308:	e03e      	b.n	8002388 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	68d9      	ldr	r1, [r3, #12]
 800230e:	68fa      	ldr	r2, [r7, #12]
 8002310:	4613      	mov	r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	4413      	add	r3, r2
 8002316:	00db      	lsls	r3, r3, #3
 8002318:	440b      	add	r3, r1
 800231a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	2200      	movs	r2, #0
 8002320:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	2200      	movs	r2, #0
 8002326:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	2200      	movs	r2, #0
 800232c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	2200      	movs	r2, #0
 8002332:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002334:	68b9      	ldr	r1, [r7, #8]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	68fa      	ldr	r2, [r7, #12]
 800233a:	3206      	adds	r2, #6
 800233c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2b02      	cmp	r3, #2
 8002350:	d80c      	bhi.n	800236c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	68d9      	ldr	r1, [r3, #12]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	1c5a      	adds	r2, r3, #1
 800235a:	4613      	mov	r3, r2
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	4413      	add	r3, r2
 8002360:	00db      	lsls	r3, r3, #3
 8002362:	440b      	add	r3, r1
 8002364:	461a      	mov	r2, r3
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	60da      	str	r2, [r3, #12]
 800236a:	e004      	b.n	8002376 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	461a      	mov	r2, r3
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	3301      	adds	r3, #1
 8002386:	60fb      	str	r3, [r7, #12]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2b03      	cmp	r3, #3
 800238c:	d9bd      	bls.n	800230a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	68da      	ldr	r2, [r3, #12]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023a0:	611a      	str	r2, [r3, #16]
}
 80023a2:	bf00      	nop
 80023a4:	3714      	adds	r7, #20
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr

080023ae <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80023ae:	b480      	push	{r7}
 80023b0:	b085      	sub	sp, #20
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80023b6:	2300      	movs	r3, #0
 80023b8:	60fb      	str	r3, [r7, #12]
 80023ba:	e048      	b.n	800244e <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6919      	ldr	r1, [r3, #16]
 80023c0:	68fa      	ldr	r2, [r7, #12]
 80023c2:	4613      	mov	r3, r2
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	4413      	add	r3, r2
 80023c8:	00db      	lsls	r3, r3, #3
 80023ca:	440b      	add	r3, r1
 80023cc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	2200      	movs	r2, #0
 80023d2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	2200      	movs	r2, #0
 80023d8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	2200      	movs	r2, #0
 80023de:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	2200      	movs	r2, #0
 80023e4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	2200      	movs	r2, #0
 80023ea:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	2200      	movs	r2, #0
 80023f0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80023f8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	695b      	ldr	r3, [r3, #20]
 80023fe:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002412:	68b9      	ldr	r1, [r7, #8]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	68fa      	ldr	r2, [r7, #12]
 8002418:	3212      	adds	r2, #18
 800241a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2b02      	cmp	r3, #2
 8002422:	d80c      	bhi.n	800243e <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6919      	ldr	r1, [r3, #16]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	1c5a      	adds	r2, r3, #1
 800242c:	4613      	mov	r3, r2
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	4413      	add	r3, r2
 8002432:	00db      	lsls	r3, r3, #3
 8002434:	440b      	add	r3, r1
 8002436:	461a      	mov	r2, r3
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	60da      	str	r2, [r3, #12]
 800243c:	e004      	b.n	8002448 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	691b      	ldr	r3, [r3, #16]
 8002442:	461a      	mov	r2, r3
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	3301      	adds	r3, #1
 800244c:	60fb      	str	r3, [r7, #12]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2b03      	cmp	r3, #3
 8002452:	d9b3      	bls.n	80023bc <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2200      	movs	r2, #0
 8002470:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	691a      	ldr	r2, [r3, #16]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800247e:	60da      	str	r2, [r3, #12]
}
 8002480:	bf00      	nop
 8002482:	3714      	adds	r7, #20
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800248c:	b480      	push	{r7}
 800248e:	b089      	sub	sp, #36	; 0x24
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002496:	2300      	movs	r3, #0
 8002498:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800249a:	2300      	movs	r3, #0
 800249c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800249e:	2300      	movs	r3, #0
 80024a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024a2:	2300      	movs	r3, #0
 80024a4:	61fb      	str	r3, [r7, #28]
 80024a6:	e177      	b.n	8002798 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024a8:	2201      	movs	r2, #1
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	fa02 f303 	lsl.w	r3, r2, r3
 80024b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	697a      	ldr	r2, [r7, #20]
 80024b8:	4013      	ands	r3, r2
 80024ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024bc:	693a      	ldr	r2, [r7, #16]
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	f040 8166 	bne.w	8002792 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f003 0303 	and.w	r3, r3, #3
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d005      	beq.n	80024de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d130      	bne.n	8002540 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	005b      	lsls	r3, r3, #1
 80024e8:	2203      	movs	r2, #3
 80024ea:	fa02 f303 	lsl.w	r3, r2, r3
 80024ee:	43db      	mvns	r3, r3
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	4013      	ands	r3, r2
 80024f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	68da      	ldr	r2, [r3, #12]
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	005b      	lsls	r3, r3, #1
 80024fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002502:	69ba      	ldr	r2, [r7, #24]
 8002504:	4313      	orrs	r3, r2
 8002506:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	69ba      	ldr	r2, [r7, #24]
 800250c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002514:	2201      	movs	r2, #1
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	fa02 f303 	lsl.w	r3, r2, r3
 800251c:	43db      	mvns	r3, r3
 800251e:	69ba      	ldr	r2, [r7, #24]
 8002520:	4013      	ands	r3, r2
 8002522:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	091b      	lsrs	r3, r3, #4
 800252a:	f003 0201 	and.w	r2, r3, #1
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	4313      	orrs	r3, r2
 8002538:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f003 0303 	and.w	r3, r3, #3
 8002548:	2b03      	cmp	r3, #3
 800254a:	d017      	beq.n	800257c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	005b      	lsls	r3, r3, #1
 8002556:	2203      	movs	r2, #3
 8002558:	fa02 f303 	lsl.w	r3, r2, r3
 800255c:	43db      	mvns	r3, r3
 800255e:	69ba      	ldr	r2, [r7, #24]
 8002560:	4013      	ands	r3, r2
 8002562:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	689a      	ldr	r2, [r3, #8]
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	005b      	lsls	r3, r3, #1
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	4313      	orrs	r3, r2
 8002574:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f003 0303 	and.w	r3, r3, #3
 8002584:	2b02      	cmp	r3, #2
 8002586:	d123      	bne.n	80025d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	08da      	lsrs	r2, r3, #3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	3208      	adds	r2, #8
 8002590:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002594:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	f003 0307 	and.w	r3, r3, #7
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	220f      	movs	r2, #15
 80025a0:	fa02 f303 	lsl.w	r3, r2, r3
 80025a4:	43db      	mvns	r3, r3
 80025a6:	69ba      	ldr	r2, [r7, #24]
 80025a8:	4013      	ands	r3, r2
 80025aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	691a      	ldr	r2, [r3, #16]
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	f003 0307 	and.w	r3, r3, #7
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	fa02 f303 	lsl.w	r3, r2, r3
 80025bc:	69ba      	ldr	r2, [r7, #24]
 80025be:	4313      	orrs	r3, r2
 80025c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	08da      	lsrs	r2, r3, #3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	3208      	adds	r2, #8
 80025ca:	69b9      	ldr	r1, [r7, #24]
 80025cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	005b      	lsls	r3, r3, #1
 80025da:	2203      	movs	r2, #3
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	43db      	mvns	r3, r3
 80025e2:	69ba      	ldr	r2, [r7, #24]
 80025e4:	4013      	ands	r3, r2
 80025e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f003 0203 	and.w	r2, r3, #3
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	005b      	lsls	r3, r3, #1
 80025f4:	fa02 f303 	lsl.w	r3, r2, r3
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800260c:	2b00      	cmp	r3, #0
 800260e:	f000 80c0 	beq.w	8002792 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002612:	2300      	movs	r3, #0
 8002614:	60fb      	str	r3, [r7, #12]
 8002616:	4b66      	ldr	r3, [pc, #408]	; (80027b0 <HAL_GPIO_Init+0x324>)
 8002618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800261a:	4a65      	ldr	r2, [pc, #404]	; (80027b0 <HAL_GPIO_Init+0x324>)
 800261c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002620:	6453      	str	r3, [r2, #68]	; 0x44
 8002622:	4b63      	ldr	r3, [pc, #396]	; (80027b0 <HAL_GPIO_Init+0x324>)
 8002624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002626:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800262a:	60fb      	str	r3, [r7, #12]
 800262c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800262e:	4a61      	ldr	r2, [pc, #388]	; (80027b4 <HAL_GPIO_Init+0x328>)
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	089b      	lsrs	r3, r3, #2
 8002634:	3302      	adds	r3, #2
 8002636:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800263a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	f003 0303 	and.w	r3, r3, #3
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	220f      	movs	r2, #15
 8002646:	fa02 f303 	lsl.w	r3, r2, r3
 800264a:	43db      	mvns	r3, r3
 800264c:	69ba      	ldr	r2, [r7, #24]
 800264e:	4013      	ands	r3, r2
 8002650:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a58      	ldr	r2, [pc, #352]	; (80027b8 <HAL_GPIO_Init+0x32c>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d037      	beq.n	80026ca <HAL_GPIO_Init+0x23e>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a57      	ldr	r2, [pc, #348]	; (80027bc <HAL_GPIO_Init+0x330>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d031      	beq.n	80026c6 <HAL_GPIO_Init+0x23a>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a56      	ldr	r2, [pc, #344]	; (80027c0 <HAL_GPIO_Init+0x334>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d02b      	beq.n	80026c2 <HAL_GPIO_Init+0x236>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a55      	ldr	r2, [pc, #340]	; (80027c4 <HAL_GPIO_Init+0x338>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d025      	beq.n	80026be <HAL_GPIO_Init+0x232>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a54      	ldr	r2, [pc, #336]	; (80027c8 <HAL_GPIO_Init+0x33c>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d01f      	beq.n	80026ba <HAL_GPIO_Init+0x22e>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a53      	ldr	r2, [pc, #332]	; (80027cc <HAL_GPIO_Init+0x340>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d019      	beq.n	80026b6 <HAL_GPIO_Init+0x22a>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a52      	ldr	r2, [pc, #328]	; (80027d0 <HAL_GPIO_Init+0x344>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d013      	beq.n	80026b2 <HAL_GPIO_Init+0x226>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a51      	ldr	r2, [pc, #324]	; (80027d4 <HAL_GPIO_Init+0x348>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d00d      	beq.n	80026ae <HAL_GPIO_Init+0x222>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a50      	ldr	r2, [pc, #320]	; (80027d8 <HAL_GPIO_Init+0x34c>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d007      	beq.n	80026aa <HAL_GPIO_Init+0x21e>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a4f      	ldr	r2, [pc, #316]	; (80027dc <HAL_GPIO_Init+0x350>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d101      	bne.n	80026a6 <HAL_GPIO_Init+0x21a>
 80026a2:	2309      	movs	r3, #9
 80026a4:	e012      	b.n	80026cc <HAL_GPIO_Init+0x240>
 80026a6:	230a      	movs	r3, #10
 80026a8:	e010      	b.n	80026cc <HAL_GPIO_Init+0x240>
 80026aa:	2308      	movs	r3, #8
 80026ac:	e00e      	b.n	80026cc <HAL_GPIO_Init+0x240>
 80026ae:	2307      	movs	r3, #7
 80026b0:	e00c      	b.n	80026cc <HAL_GPIO_Init+0x240>
 80026b2:	2306      	movs	r3, #6
 80026b4:	e00a      	b.n	80026cc <HAL_GPIO_Init+0x240>
 80026b6:	2305      	movs	r3, #5
 80026b8:	e008      	b.n	80026cc <HAL_GPIO_Init+0x240>
 80026ba:	2304      	movs	r3, #4
 80026bc:	e006      	b.n	80026cc <HAL_GPIO_Init+0x240>
 80026be:	2303      	movs	r3, #3
 80026c0:	e004      	b.n	80026cc <HAL_GPIO_Init+0x240>
 80026c2:	2302      	movs	r3, #2
 80026c4:	e002      	b.n	80026cc <HAL_GPIO_Init+0x240>
 80026c6:	2301      	movs	r3, #1
 80026c8:	e000      	b.n	80026cc <HAL_GPIO_Init+0x240>
 80026ca:	2300      	movs	r3, #0
 80026cc:	69fa      	ldr	r2, [r7, #28]
 80026ce:	f002 0203 	and.w	r2, r2, #3
 80026d2:	0092      	lsls	r2, r2, #2
 80026d4:	4093      	lsls	r3, r2
 80026d6:	69ba      	ldr	r2, [r7, #24]
 80026d8:	4313      	orrs	r3, r2
 80026da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026dc:	4935      	ldr	r1, [pc, #212]	; (80027b4 <HAL_GPIO_Init+0x328>)
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	089b      	lsrs	r3, r3, #2
 80026e2:	3302      	adds	r3, #2
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026ea:	4b3d      	ldr	r3, [pc, #244]	; (80027e0 <HAL_GPIO_Init+0x354>)
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	43db      	mvns	r3, r3
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	4013      	ands	r3, r2
 80026f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d003      	beq.n	800270e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002706:	69ba      	ldr	r2, [r7, #24]
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	4313      	orrs	r3, r2
 800270c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800270e:	4a34      	ldr	r2, [pc, #208]	; (80027e0 <HAL_GPIO_Init+0x354>)
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002714:	4b32      	ldr	r3, [pc, #200]	; (80027e0 <HAL_GPIO_Init+0x354>)
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	43db      	mvns	r3, r3
 800271e:	69ba      	ldr	r2, [r7, #24]
 8002720:	4013      	ands	r3, r2
 8002722:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d003      	beq.n	8002738 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	4313      	orrs	r3, r2
 8002736:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002738:	4a29      	ldr	r2, [pc, #164]	; (80027e0 <HAL_GPIO_Init+0x354>)
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800273e:	4b28      	ldr	r3, [pc, #160]	; (80027e0 <HAL_GPIO_Init+0x354>)
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	43db      	mvns	r3, r3
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	4013      	ands	r3, r2
 800274c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d003      	beq.n	8002762 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800275a:	69ba      	ldr	r2, [r7, #24]
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	4313      	orrs	r3, r2
 8002760:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002762:	4a1f      	ldr	r2, [pc, #124]	; (80027e0 <HAL_GPIO_Init+0x354>)
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002768:	4b1d      	ldr	r3, [pc, #116]	; (80027e0 <HAL_GPIO_Init+0x354>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	43db      	mvns	r3, r3
 8002772:	69ba      	ldr	r2, [r7, #24]
 8002774:	4013      	ands	r3, r2
 8002776:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d003      	beq.n	800278c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	4313      	orrs	r3, r2
 800278a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800278c:	4a14      	ldr	r2, [pc, #80]	; (80027e0 <HAL_GPIO_Init+0x354>)
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	3301      	adds	r3, #1
 8002796:	61fb      	str	r3, [r7, #28]
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	2b0f      	cmp	r3, #15
 800279c:	f67f ae84 	bls.w	80024a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027a0:	bf00      	nop
 80027a2:	bf00      	nop
 80027a4:	3724      	adds	r7, #36	; 0x24
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	40023800 	.word	0x40023800
 80027b4:	40013800 	.word	0x40013800
 80027b8:	40020000 	.word	0x40020000
 80027bc:	40020400 	.word	0x40020400
 80027c0:	40020800 	.word	0x40020800
 80027c4:	40020c00 	.word	0x40020c00
 80027c8:	40021000 	.word	0x40021000
 80027cc:	40021400 	.word	0x40021400
 80027d0:	40021800 	.word	0x40021800
 80027d4:	40021c00 	.word	0x40021c00
 80027d8:	40022000 	.word	0x40022000
 80027dc:	40022400 	.word	0x40022400
 80027e0:	40013c00 	.word	0x40013c00

080027e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	460b      	mov	r3, r1
 80027ee:	807b      	strh	r3, [r7, #2]
 80027f0:	4613      	mov	r3, r2
 80027f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027f4:	787b      	ldrb	r3, [r7, #1]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d003      	beq.n	8002802 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027fa:	887a      	ldrh	r2, [r7, #2]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002800:	e003      	b.n	800280a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002802:	887b      	ldrh	r3, [r7, #2]
 8002804:	041a      	lsls	r2, r3, #16
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	619a      	str	r2, [r3, #24]
}
 800280a:	bf00      	nop
 800280c:	370c      	adds	r7, #12
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr

08002816 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002816:	b580      	push	{r7, lr}
 8002818:	b086      	sub	sp, #24
 800281a:	af02      	add	r7, sp, #8
 800281c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d101      	bne.n	8002828 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e101      	b.n	8002a2c <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8002834:	b2db      	uxtb	r3, r3
 8002836:	2b00      	cmp	r3, #0
 8002838:	d106      	bne.n	8002848 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f7fe fc84 	bl	8001150 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2203      	movs	r2, #3
 800284c:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002856:	d102      	bne.n	800285e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4618      	mov	r0, r3
 8002864:	f002 f880 	bl	8004968 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6818      	ldr	r0, [r3, #0]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	7c1a      	ldrb	r2, [r3, #16]
 8002870:	f88d 2000 	strb.w	r2, [sp]
 8002874:	3304      	adds	r3, #4
 8002876:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002878:	f002 f812 	bl	80048a0 <USB_CoreInit>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d005      	beq.n	800288e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2202      	movs	r2, #2
 8002886:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e0ce      	b.n	8002a2c <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	2100      	movs	r1, #0
 8002894:	4618      	mov	r0, r3
 8002896:	f002 f878 	bl	800498a <USB_SetCurrentMode>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d005      	beq.n	80028ac <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2202      	movs	r2, #2
 80028a4:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e0bf      	b.n	8002a2c <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028ac:	2300      	movs	r3, #0
 80028ae:	73fb      	strb	r3, [r7, #15]
 80028b0:	e04a      	b.n	8002948 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80028b2:	7bfa      	ldrb	r2, [r7, #15]
 80028b4:	6879      	ldr	r1, [r7, #4]
 80028b6:	4613      	mov	r3, r2
 80028b8:	00db      	lsls	r3, r3, #3
 80028ba:	4413      	add	r3, r2
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	440b      	add	r3, r1
 80028c0:	3315      	adds	r3, #21
 80028c2:	2201      	movs	r2, #1
 80028c4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80028c6:	7bfa      	ldrb	r2, [r7, #15]
 80028c8:	6879      	ldr	r1, [r7, #4]
 80028ca:	4613      	mov	r3, r2
 80028cc:	00db      	lsls	r3, r3, #3
 80028ce:	4413      	add	r3, r2
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	440b      	add	r3, r1
 80028d4:	3314      	adds	r3, #20
 80028d6:	7bfa      	ldrb	r2, [r7, #15]
 80028d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80028da:	7bfa      	ldrb	r2, [r7, #15]
 80028dc:	7bfb      	ldrb	r3, [r7, #15]
 80028de:	b298      	uxth	r0, r3
 80028e0:	6879      	ldr	r1, [r7, #4]
 80028e2:	4613      	mov	r3, r2
 80028e4:	00db      	lsls	r3, r3, #3
 80028e6:	4413      	add	r3, r2
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	440b      	add	r3, r1
 80028ec:	332e      	adds	r3, #46	; 0x2e
 80028ee:	4602      	mov	r2, r0
 80028f0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80028f2:	7bfa      	ldrb	r2, [r7, #15]
 80028f4:	6879      	ldr	r1, [r7, #4]
 80028f6:	4613      	mov	r3, r2
 80028f8:	00db      	lsls	r3, r3, #3
 80028fa:	4413      	add	r3, r2
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	440b      	add	r3, r1
 8002900:	3318      	adds	r3, #24
 8002902:	2200      	movs	r2, #0
 8002904:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002906:	7bfa      	ldrb	r2, [r7, #15]
 8002908:	6879      	ldr	r1, [r7, #4]
 800290a:	4613      	mov	r3, r2
 800290c:	00db      	lsls	r3, r3, #3
 800290e:	4413      	add	r3, r2
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	440b      	add	r3, r1
 8002914:	331c      	adds	r3, #28
 8002916:	2200      	movs	r2, #0
 8002918:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800291a:	7bfa      	ldrb	r2, [r7, #15]
 800291c:	6879      	ldr	r1, [r7, #4]
 800291e:	4613      	mov	r3, r2
 8002920:	00db      	lsls	r3, r3, #3
 8002922:	4413      	add	r3, r2
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	440b      	add	r3, r1
 8002928:	3320      	adds	r3, #32
 800292a:	2200      	movs	r2, #0
 800292c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800292e:	7bfa      	ldrb	r2, [r7, #15]
 8002930:	6879      	ldr	r1, [r7, #4]
 8002932:	4613      	mov	r3, r2
 8002934:	00db      	lsls	r3, r3, #3
 8002936:	4413      	add	r3, r2
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	440b      	add	r3, r1
 800293c:	3324      	adds	r3, #36	; 0x24
 800293e:	2200      	movs	r2, #0
 8002940:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002942:	7bfb      	ldrb	r3, [r7, #15]
 8002944:	3301      	adds	r3, #1
 8002946:	73fb      	strb	r3, [r7, #15]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	791b      	ldrb	r3, [r3, #4]
 800294c:	7bfa      	ldrb	r2, [r7, #15]
 800294e:	429a      	cmp	r2, r3
 8002950:	d3af      	bcc.n	80028b2 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002952:	2300      	movs	r3, #0
 8002954:	73fb      	strb	r3, [r7, #15]
 8002956:	e044      	b.n	80029e2 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002958:	7bfa      	ldrb	r2, [r7, #15]
 800295a:	6879      	ldr	r1, [r7, #4]
 800295c:	4613      	mov	r3, r2
 800295e:	00db      	lsls	r3, r3, #3
 8002960:	4413      	add	r3, r2
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	440b      	add	r3, r1
 8002966:	f203 2355 	addw	r3, r3, #597	; 0x255
 800296a:	2200      	movs	r2, #0
 800296c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800296e:	7bfa      	ldrb	r2, [r7, #15]
 8002970:	6879      	ldr	r1, [r7, #4]
 8002972:	4613      	mov	r3, r2
 8002974:	00db      	lsls	r3, r3, #3
 8002976:	4413      	add	r3, r2
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	440b      	add	r3, r1
 800297c:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8002980:	7bfa      	ldrb	r2, [r7, #15]
 8002982:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002984:	7bfa      	ldrb	r2, [r7, #15]
 8002986:	6879      	ldr	r1, [r7, #4]
 8002988:	4613      	mov	r3, r2
 800298a:	00db      	lsls	r3, r3, #3
 800298c:	4413      	add	r3, r2
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	440b      	add	r3, r1
 8002992:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8002996:	2200      	movs	r2, #0
 8002998:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800299a:	7bfa      	ldrb	r2, [r7, #15]
 800299c:	6879      	ldr	r1, [r7, #4]
 800299e:	4613      	mov	r3, r2
 80029a0:	00db      	lsls	r3, r3, #3
 80029a2:	4413      	add	r3, r2
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	440b      	add	r3, r1
 80029a8:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 80029ac:	2200      	movs	r2, #0
 80029ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80029b0:	7bfa      	ldrb	r2, [r7, #15]
 80029b2:	6879      	ldr	r1, [r7, #4]
 80029b4:	4613      	mov	r3, r2
 80029b6:	00db      	lsls	r3, r3, #3
 80029b8:	4413      	add	r3, r2
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	440b      	add	r3, r1
 80029be:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80029c2:	2200      	movs	r2, #0
 80029c4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80029c6:	7bfa      	ldrb	r2, [r7, #15]
 80029c8:	6879      	ldr	r1, [r7, #4]
 80029ca:	4613      	mov	r3, r2
 80029cc:	00db      	lsls	r3, r3, #3
 80029ce:	4413      	add	r3, r2
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	440b      	add	r3, r1
 80029d4:	f503 7319 	add.w	r3, r3, #612	; 0x264
 80029d8:	2200      	movs	r2, #0
 80029da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029dc:	7bfb      	ldrb	r3, [r7, #15]
 80029de:	3301      	adds	r3, #1
 80029e0:	73fb      	strb	r3, [r7, #15]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	791b      	ldrb	r3, [r3, #4]
 80029e6:	7bfa      	ldrb	r2, [r7, #15]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d3b5      	bcc.n	8002958 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6818      	ldr	r0, [r3, #0]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	7c1a      	ldrb	r2, [r3, #16]
 80029f4:	f88d 2000 	strb.w	r2, [sp]
 80029f8:	3304      	adds	r3, #4
 80029fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029fc:	f002 f812 	bl	8004a24 <USB_DevInit>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d005      	beq.n	8002a12 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2202      	movs	r2, #2
 8002a0a:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e00c      	b.n	8002a2c <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4618      	mov	r0, r3
 8002a26:	f002 f9da 	bl	8004dde <USB_DevDisconnect>

  return HAL_OK;
 8002a2a:	2300      	movs	r3, #0
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3710      	adds	r7, #16
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b086      	sub	sp, #24
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d101      	bne.n	8002a46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e267      	b.n	8002f16 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0301 	and.w	r3, r3, #1
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d075      	beq.n	8002b3e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002a52:	4b88      	ldr	r3, [pc, #544]	; (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	f003 030c 	and.w	r3, r3, #12
 8002a5a:	2b04      	cmp	r3, #4
 8002a5c:	d00c      	beq.n	8002a78 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a5e:	4b85      	ldr	r3, [pc, #532]	; (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002a66:	2b08      	cmp	r3, #8
 8002a68:	d112      	bne.n	8002a90 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a6a:	4b82      	ldr	r3, [pc, #520]	; (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a76:	d10b      	bne.n	8002a90 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a78:	4b7e      	ldr	r3, [pc, #504]	; (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d05b      	beq.n	8002b3c <HAL_RCC_OscConfig+0x108>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d157      	bne.n	8002b3c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e242      	b.n	8002f16 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a98:	d106      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x74>
 8002a9a:	4b76      	ldr	r3, [pc, #472]	; (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a75      	ldr	r2, [pc, #468]	; (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002aa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aa4:	6013      	str	r3, [r2, #0]
 8002aa6:	e01d      	b.n	8002ae4 <HAL_RCC_OscConfig+0xb0>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ab0:	d10c      	bne.n	8002acc <HAL_RCC_OscConfig+0x98>
 8002ab2:	4b70      	ldr	r3, [pc, #448]	; (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a6f      	ldr	r2, [pc, #444]	; (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002ab8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002abc:	6013      	str	r3, [r2, #0]
 8002abe:	4b6d      	ldr	r3, [pc, #436]	; (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a6c      	ldr	r2, [pc, #432]	; (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002ac4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ac8:	6013      	str	r3, [r2, #0]
 8002aca:	e00b      	b.n	8002ae4 <HAL_RCC_OscConfig+0xb0>
 8002acc:	4b69      	ldr	r3, [pc, #420]	; (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a68      	ldr	r2, [pc, #416]	; (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002ad2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ad6:	6013      	str	r3, [r2, #0]
 8002ad8:	4b66      	ldr	r3, [pc, #408]	; (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a65      	ldr	r2, [pc, #404]	; (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002ade:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ae2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d013      	beq.n	8002b14 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aec:	f7fe fc8c 	bl	8001408 <HAL_GetTick>
 8002af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002af2:	e008      	b.n	8002b06 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002af4:	f7fe fc88 	bl	8001408 <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	2b64      	cmp	r3, #100	; 0x64
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e207      	b.n	8002f16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b06:	4b5b      	ldr	r3, [pc, #364]	; (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d0f0      	beq.n	8002af4 <HAL_RCC_OscConfig+0xc0>
 8002b12:	e014      	b.n	8002b3e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b14:	f7fe fc78 	bl	8001408 <HAL_GetTick>
 8002b18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b1a:	e008      	b.n	8002b2e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b1c:	f7fe fc74 	bl	8001408 <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	2b64      	cmp	r3, #100	; 0x64
 8002b28:	d901      	bls.n	8002b2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e1f3      	b.n	8002f16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b2e:	4b51      	ldr	r3, [pc, #324]	; (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d1f0      	bne.n	8002b1c <HAL_RCC_OscConfig+0xe8>
 8002b3a:	e000      	b.n	8002b3e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0302 	and.w	r3, r3, #2
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d063      	beq.n	8002c12 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002b4a:	4b4a      	ldr	r3, [pc, #296]	; (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	f003 030c 	and.w	r3, r3, #12
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d00b      	beq.n	8002b6e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b56:	4b47      	ldr	r3, [pc, #284]	; (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002b5e:	2b08      	cmp	r3, #8
 8002b60:	d11c      	bne.n	8002b9c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b62:	4b44      	ldr	r3, [pc, #272]	; (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d116      	bne.n	8002b9c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b6e:	4b41      	ldr	r3, [pc, #260]	; (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0302 	and.w	r3, r3, #2
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d005      	beq.n	8002b86 <HAL_RCC_OscConfig+0x152>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d001      	beq.n	8002b86 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e1c7      	b.n	8002f16 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b86:	4b3b      	ldr	r3, [pc, #236]	; (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	691b      	ldr	r3, [r3, #16]
 8002b92:	00db      	lsls	r3, r3, #3
 8002b94:	4937      	ldr	r1, [pc, #220]	; (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b9a:	e03a      	b.n	8002c12 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d020      	beq.n	8002be6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ba4:	4b34      	ldr	r3, [pc, #208]	; (8002c78 <HAL_RCC_OscConfig+0x244>)
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002baa:	f7fe fc2d 	bl	8001408 <HAL_GetTick>
 8002bae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bb0:	e008      	b.n	8002bc4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bb2:	f7fe fc29 	bl	8001408 <HAL_GetTick>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d901      	bls.n	8002bc4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	e1a8      	b.n	8002f16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bc4:	4b2b      	ldr	r3, [pc, #172]	; (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0302 	and.w	r3, r3, #2
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d0f0      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bd0:	4b28      	ldr	r3, [pc, #160]	; (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	691b      	ldr	r3, [r3, #16]
 8002bdc:	00db      	lsls	r3, r3, #3
 8002bde:	4925      	ldr	r1, [pc, #148]	; (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002be0:	4313      	orrs	r3, r2
 8002be2:	600b      	str	r3, [r1, #0]
 8002be4:	e015      	b.n	8002c12 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002be6:	4b24      	ldr	r3, [pc, #144]	; (8002c78 <HAL_RCC_OscConfig+0x244>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bec:	f7fe fc0c 	bl	8001408 <HAL_GetTick>
 8002bf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bf2:	e008      	b.n	8002c06 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bf4:	f7fe fc08 	bl	8001408 <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d901      	bls.n	8002c06 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e187      	b.n	8002f16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c06:	4b1b      	ldr	r3, [pc, #108]	; (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0302 	and.w	r3, r3, #2
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d1f0      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0308 	and.w	r3, r3, #8
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d036      	beq.n	8002c8c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	695b      	ldr	r3, [r3, #20]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d016      	beq.n	8002c54 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c26:	4b15      	ldr	r3, [pc, #84]	; (8002c7c <HAL_RCC_OscConfig+0x248>)
 8002c28:	2201      	movs	r2, #1
 8002c2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c2c:	f7fe fbec 	bl	8001408 <HAL_GetTick>
 8002c30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c32:	e008      	b.n	8002c46 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c34:	f7fe fbe8 	bl	8001408 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d901      	bls.n	8002c46 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e167      	b.n	8002f16 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c46:	4b0b      	ldr	r3, [pc, #44]	; (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002c48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c4a:	f003 0302 	and.w	r3, r3, #2
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d0f0      	beq.n	8002c34 <HAL_RCC_OscConfig+0x200>
 8002c52:	e01b      	b.n	8002c8c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c54:	4b09      	ldr	r3, [pc, #36]	; (8002c7c <HAL_RCC_OscConfig+0x248>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c5a:	f7fe fbd5 	bl	8001408 <HAL_GetTick>
 8002c5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c60:	e00e      	b.n	8002c80 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c62:	f7fe fbd1 	bl	8001408 <HAL_GetTick>
 8002c66:	4602      	mov	r2, r0
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d907      	bls.n	8002c80 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c70:	2303      	movs	r3, #3
 8002c72:	e150      	b.n	8002f16 <HAL_RCC_OscConfig+0x4e2>
 8002c74:	40023800 	.word	0x40023800
 8002c78:	42470000 	.word	0x42470000
 8002c7c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c80:	4b88      	ldr	r3, [pc, #544]	; (8002ea4 <HAL_RCC_OscConfig+0x470>)
 8002c82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c84:	f003 0302 	and.w	r3, r3, #2
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d1ea      	bne.n	8002c62 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0304 	and.w	r3, r3, #4
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	f000 8097 	beq.w	8002dc8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c9e:	4b81      	ldr	r3, [pc, #516]	; (8002ea4 <HAL_RCC_OscConfig+0x470>)
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d10f      	bne.n	8002cca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002caa:	2300      	movs	r3, #0
 8002cac:	60bb      	str	r3, [r7, #8]
 8002cae:	4b7d      	ldr	r3, [pc, #500]	; (8002ea4 <HAL_RCC_OscConfig+0x470>)
 8002cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb2:	4a7c      	ldr	r2, [pc, #496]	; (8002ea4 <HAL_RCC_OscConfig+0x470>)
 8002cb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cb8:	6413      	str	r3, [r2, #64]	; 0x40
 8002cba:	4b7a      	ldr	r3, [pc, #488]	; (8002ea4 <HAL_RCC_OscConfig+0x470>)
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cc2:	60bb      	str	r3, [r7, #8]
 8002cc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cca:	4b77      	ldr	r3, [pc, #476]	; (8002ea8 <HAL_RCC_OscConfig+0x474>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d118      	bne.n	8002d08 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cd6:	4b74      	ldr	r3, [pc, #464]	; (8002ea8 <HAL_RCC_OscConfig+0x474>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a73      	ldr	r2, [pc, #460]	; (8002ea8 <HAL_RCC_OscConfig+0x474>)
 8002cdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ce0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ce2:	f7fe fb91 	bl	8001408 <HAL_GetTick>
 8002ce6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ce8:	e008      	b.n	8002cfc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cea:	f7fe fb8d 	bl	8001408 <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d901      	bls.n	8002cfc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e10c      	b.n	8002f16 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cfc:	4b6a      	ldr	r3, [pc, #424]	; (8002ea8 <HAL_RCC_OscConfig+0x474>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d0f0      	beq.n	8002cea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d106      	bne.n	8002d1e <HAL_RCC_OscConfig+0x2ea>
 8002d10:	4b64      	ldr	r3, [pc, #400]	; (8002ea4 <HAL_RCC_OscConfig+0x470>)
 8002d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d14:	4a63      	ldr	r2, [pc, #396]	; (8002ea4 <HAL_RCC_OscConfig+0x470>)
 8002d16:	f043 0301 	orr.w	r3, r3, #1
 8002d1a:	6713      	str	r3, [r2, #112]	; 0x70
 8002d1c:	e01c      	b.n	8002d58 <HAL_RCC_OscConfig+0x324>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	2b05      	cmp	r3, #5
 8002d24:	d10c      	bne.n	8002d40 <HAL_RCC_OscConfig+0x30c>
 8002d26:	4b5f      	ldr	r3, [pc, #380]	; (8002ea4 <HAL_RCC_OscConfig+0x470>)
 8002d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d2a:	4a5e      	ldr	r2, [pc, #376]	; (8002ea4 <HAL_RCC_OscConfig+0x470>)
 8002d2c:	f043 0304 	orr.w	r3, r3, #4
 8002d30:	6713      	str	r3, [r2, #112]	; 0x70
 8002d32:	4b5c      	ldr	r3, [pc, #368]	; (8002ea4 <HAL_RCC_OscConfig+0x470>)
 8002d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d36:	4a5b      	ldr	r2, [pc, #364]	; (8002ea4 <HAL_RCC_OscConfig+0x470>)
 8002d38:	f043 0301 	orr.w	r3, r3, #1
 8002d3c:	6713      	str	r3, [r2, #112]	; 0x70
 8002d3e:	e00b      	b.n	8002d58 <HAL_RCC_OscConfig+0x324>
 8002d40:	4b58      	ldr	r3, [pc, #352]	; (8002ea4 <HAL_RCC_OscConfig+0x470>)
 8002d42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d44:	4a57      	ldr	r2, [pc, #348]	; (8002ea4 <HAL_RCC_OscConfig+0x470>)
 8002d46:	f023 0301 	bic.w	r3, r3, #1
 8002d4a:	6713      	str	r3, [r2, #112]	; 0x70
 8002d4c:	4b55      	ldr	r3, [pc, #340]	; (8002ea4 <HAL_RCC_OscConfig+0x470>)
 8002d4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d50:	4a54      	ldr	r2, [pc, #336]	; (8002ea4 <HAL_RCC_OscConfig+0x470>)
 8002d52:	f023 0304 	bic.w	r3, r3, #4
 8002d56:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d015      	beq.n	8002d8c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d60:	f7fe fb52 	bl	8001408 <HAL_GetTick>
 8002d64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d66:	e00a      	b.n	8002d7e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d68:	f7fe fb4e 	bl	8001408 <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d901      	bls.n	8002d7e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e0cb      	b.n	8002f16 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d7e:	4b49      	ldr	r3, [pc, #292]	; (8002ea4 <HAL_RCC_OscConfig+0x470>)
 8002d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d82:	f003 0302 	and.w	r3, r3, #2
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d0ee      	beq.n	8002d68 <HAL_RCC_OscConfig+0x334>
 8002d8a:	e014      	b.n	8002db6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d8c:	f7fe fb3c 	bl	8001408 <HAL_GetTick>
 8002d90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d92:	e00a      	b.n	8002daa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d94:	f7fe fb38 	bl	8001408 <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d901      	bls.n	8002daa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e0b5      	b.n	8002f16 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002daa:	4b3e      	ldr	r3, [pc, #248]	; (8002ea4 <HAL_RCC_OscConfig+0x470>)
 8002dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d1ee      	bne.n	8002d94 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002db6:	7dfb      	ldrb	r3, [r7, #23]
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d105      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dbc:	4b39      	ldr	r3, [pc, #228]	; (8002ea4 <HAL_RCC_OscConfig+0x470>)
 8002dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc0:	4a38      	ldr	r2, [pc, #224]	; (8002ea4 <HAL_RCC_OscConfig+0x470>)
 8002dc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dc6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	699b      	ldr	r3, [r3, #24]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	f000 80a1 	beq.w	8002f14 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002dd2:	4b34      	ldr	r3, [pc, #208]	; (8002ea4 <HAL_RCC_OscConfig+0x470>)
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f003 030c 	and.w	r3, r3, #12
 8002dda:	2b08      	cmp	r3, #8
 8002ddc:	d05c      	beq.n	8002e98 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	699b      	ldr	r3, [r3, #24]
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d141      	bne.n	8002e6a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002de6:	4b31      	ldr	r3, [pc, #196]	; (8002eac <HAL_RCC_OscConfig+0x478>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dec:	f7fe fb0c 	bl	8001408 <HAL_GetTick>
 8002df0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002df2:	e008      	b.n	8002e06 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002df4:	f7fe fb08 	bl	8001408 <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d901      	bls.n	8002e06 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e087      	b.n	8002f16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e06:	4b27      	ldr	r3, [pc, #156]	; (8002ea4 <HAL_RCC_OscConfig+0x470>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d1f0      	bne.n	8002df4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	69da      	ldr	r2, [r3, #28]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a1b      	ldr	r3, [r3, #32]
 8002e1a:	431a      	orrs	r2, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e20:	019b      	lsls	r3, r3, #6
 8002e22:	431a      	orrs	r2, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e28:	085b      	lsrs	r3, r3, #1
 8002e2a:	3b01      	subs	r3, #1
 8002e2c:	041b      	lsls	r3, r3, #16
 8002e2e:	431a      	orrs	r2, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e34:	061b      	lsls	r3, r3, #24
 8002e36:	491b      	ldr	r1, [pc, #108]	; (8002ea4 <HAL_RCC_OscConfig+0x470>)
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e3c:	4b1b      	ldr	r3, [pc, #108]	; (8002eac <HAL_RCC_OscConfig+0x478>)
 8002e3e:	2201      	movs	r2, #1
 8002e40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e42:	f7fe fae1 	bl	8001408 <HAL_GetTick>
 8002e46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e48:	e008      	b.n	8002e5c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e4a:	f7fe fadd 	bl	8001408 <HAL_GetTick>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d901      	bls.n	8002e5c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	e05c      	b.n	8002f16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e5c:	4b11      	ldr	r3, [pc, #68]	; (8002ea4 <HAL_RCC_OscConfig+0x470>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d0f0      	beq.n	8002e4a <HAL_RCC_OscConfig+0x416>
 8002e68:	e054      	b.n	8002f14 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e6a:	4b10      	ldr	r3, [pc, #64]	; (8002eac <HAL_RCC_OscConfig+0x478>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e70:	f7fe faca 	bl	8001408 <HAL_GetTick>
 8002e74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e76:	e008      	b.n	8002e8a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e78:	f7fe fac6 	bl	8001408 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d901      	bls.n	8002e8a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e045      	b.n	8002f16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e8a:	4b06      	ldr	r3, [pc, #24]	; (8002ea4 <HAL_RCC_OscConfig+0x470>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d1f0      	bne.n	8002e78 <HAL_RCC_OscConfig+0x444>
 8002e96:	e03d      	b.n	8002f14 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	699b      	ldr	r3, [r3, #24]
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d107      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e038      	b.n	8002f16 <HAL_RCC_OscConfig+0x4e2>
 8002ea4:	40023800 	.word	0x40023800
 8002ea8:	40007000 	.word	0x40007000
 8002eac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002eb0:	4b1b      	ldr	r3, [pc, #108]	; (8002f20 <HAL_RCC_OscConfig+0x4ec>)
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	699b      	ldr	r3, [r3, #24]
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d028      	beq.n	8002f10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d121      	bne.n	8002f10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d11a      	bne.n	8002f10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002eda:	68fa      	ldr	r2, [r7, #12]
 8002edc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ee6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d111      	bne.n	8002f10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef6:	085b      	lsrs	r3, r3, #1
 8002ef8:	3b01      	subs	r3, #1
 8002efa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d107      	bne.n	8002f10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f0a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d001      	beq.n	8002f14 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e000      	b.n	8002f16 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002f14:	2300      	movs	r3, #0
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3718      	adds	r7, #24
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	40023800 	.word	0x40023800

08002f24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d101      	bne.n	8002f38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e0cc      	b.n	80030d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f38:	4b68      	ldr	r3, [pc, #416]	; (80030dc <HAL_RCC_ClockConfig+0x1b8>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 030f 	and.w	r3, r3, #15
 8002f40:	683a      	ldr	r2, [r7, #0]
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d90c      	bls.n	8002f60 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f46:	4b65      	ldr	r3, [pc, #404]	; (80030dc <HAL_RCC_ClockConfig+0x1b8>)
 8002f48:	683a      	ldr	r2, [r7, #0]
 8002f4a:	b2d2      	uxtb	r2, r2
 8002f4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f4e:	4b63      	ldr	r3, [pc, #396]	; (80030dc <HAL_RCC_ClockConfig+0x1b8>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 030f 	and.w	r3, r3, #15
 8002f56:	683a      	ldr	r2, [r7, #0]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d001      	beq.n	8002f60 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e0b8      	b.n	80030d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0302 	and.w	r3, r3, #2
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d020      	beq.n	8002fae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0304 	and.w	r3, r3, #4
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d005      	beq.n	8002f84 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f78:	4b59      	ldr	r3, [pc, #356]	; (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	4a58      	ldr	r2, [pc, #352]	; (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f7e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f82:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0308 	and.w	r3, r3, #8
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d005      	beq.n	8002f9c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f90:	4b53      	ldr	r3, [pc, #332]	; (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	4a52      	ldr	r2, [pc, #328]	; (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f96:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f9a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f9c:	4b50      	ldr	r3, [pc, #320]	; (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	494d      	ldr	r1, [pc, #308]	; (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002faa:	4313      	orrs	r3, r2
 8002fac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0301 	and.w	r3, r3, #1
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d044      	beq.n	8003044 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d107      	bne.n	8002fd2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fc2:	4b47      	ldr	r3, [pc, #284]	; (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d119      	bne.n	8003002 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e07f      	b.n	80030d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d003      	beq.n	8002fe2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fde:	2b03      	cmp	r3, #3
 8002fe0:	d107      	bne.n	8002ff2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fe2:	4b3f      	ldr	r3, [pc, #252]	; (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d109      	bne.n	8003002 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e06f      	b.n	80030d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ff2:	4b3b      	ldr	r3, [pc, #236]	; (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0302 	and.w	r3, r3, #2
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d101      	bne.n	8003002 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e067      	b.n	80030d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003002:	4b37      	ldr	r3, [pc, #220]	; (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f023 0203 	bic.w	r2, r3, #3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	4934      	ldr	r1, [pc, #208]	; (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003010:	4313      	orrs	r3, r2
 8003012:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003014:	f7fe f9f8 	bl	8001408 <HAL_GetTick>
 8003018:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800301a:	e00a      	b.n	8003032 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800301c:	f7fe f9f4 	bl	8001408 <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	f241 3288 	movw	r2, #5000	; 0x1388
 800302a:	4293      	cmp	r3, r2
 800302c:	d901      	bls.n	8003032 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e04f      	b.n	80030d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003032:	4b2b      	ldr	r3, [pc, #172]	; (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	f003 020c 	and.w	r2, r3, #12
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	429a      	cmp	r2, r3
 8003042:	d1eb      	bne.n	800301c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003044:	4b25      	ldr	r3, [pc, #148]	; (80030dc <HAL_RCC_ClockConfig+0x1b8>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 030f 	and.w	r3, r3, #15
 800304c:	683a      	ldr	r2, [r7, #0]
 800304e:	429a      	cmp	r2, r3
 8003050:	d20c      	bcs.n	800306c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003052:	4b22      	ldr	r3, [pc, #136]	; (80030dc <HAL_RCC_ClockConfig+0x1b8>)
 8003054:	683a      	ldr	r2, [r7, #0]
 8003056:	b2d2      	uxtb	r2, r2
 8003058:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800305a:	4b20      	ldr	r3, [pc, #128]	; (80030dc <HAL_RCC_ClockConfig+0x1b8>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 030f 	and.w	r3, r3, #15
 8003062:	683a      	ldr	r2, [r7, #0]
 8003064:	429a      	cmp	r2, r3
 8003066:	d001      	beq.n	800306c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e032      	b.n	80030d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0304 	and.w	r3, r3, #4
 8003074:	2b00      	cmp	r3, #0
 8003076:	d008      	beq.n	800308a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003078:	4b19      	ldr	r3, [pc, #100]	; (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	4916      	ldr	r1, [pc, #88]	; (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003086:	4313      	orrs	r3, r2
 8003088:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0308 	and.w	r3, r3, #8
 8003092:	2b00      	cmp	r3, #0
 8003094:	d009      	beq.n	80030aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003096:	4b12      	ldr	r3, [pc, #72]	; (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	691b      	ldr	r3, [r3, #16]
 80030a2:	00db      	lsls	r3, r3, #3
 80030a4:	490e      	ldr	r1, [pc, #56]	; (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 80030a6:	4313      	orrs	r3, r2
 80030a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030aa:	f000 f821 	bl	80030f0 <HAL_RCC_GetSysClockFreq>
 80030ae:	4602      	mov	r2, r0
 80030b0:	4b0b      	ldr	r3, [pc, #44]	; (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	091b      	lsrs	r3, r3, #4
 80030b6:	f003 030f 	and.w	r3, r3, #15
 80030ba:	490a      	ldr	r1, [pc, #40]	; (80030e4 <HAL_RCC_ClockConfig+0x1c0>)
 80030bc:	5ccb      	ldrb	r3, [r1, r3]
 80030be:	fa22 f303 	lsr.w	r3, r2, r3
 80030c2:	4a09      	ldr	r2, [pc, #36]	; (80030e8 <HAL_RCC_ClockConfig+0x1c4>)
 80030c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80030c6:	4b09      	ldr	r3, [pc, #36]	; (80030ec <HAL_RCC_ClockConfig+0x1c8>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7fe f958 	bl	8001380 <HAL_InitTick>

  return HAL_OK;
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3710      	adds	r7, #16
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	40023c00 	.word	0x40023c00
 80030e0:	40023800 	.word	0x40023800
 80030e4:	08005818 	.word	0x08005818
 80030e8:	20000000 	.word	0x20000000
 80030ec:	20000004 	.word	0x20000004

080030f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030f4:	b094      	sub	sp, #80	; 0x50
 80030f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80030f8:	2300      	movs	r3, #0
 80030fa:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t pllvco = 0U;
 80030fc:	2300      	movs	r3, #0
 80030fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t pllp = 0U;
 8003100:	2300      	movs	r3, #0
 8003102:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003104:	2300      	movs	r3, #0
 8003106:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003108:	4b79      	ldr	r3, [pc, #484]	; (80032f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	f003 030c 	and.w	r3, r3, #12
 8003110:	2b08      	cmp	r3, #8
 8003112:	d00d      	beq.n	8003130 <HAL_RCC_GetSysClockFreq+0x40>
 8003114:	2b08      	cmp	r3, #8
 8003116:	f200 80e1 	bhi.w	80032dc <HAL_RCC_GetSysClockFreq+0x1ec>
 800311a:	2b00      	cmp	r3, #0
 800311c:	d002      	beq.n	8003124 <HAL_RCC_GetSysClockFreq+0x34>
 800311e:	2b04      	cmp	r3, #4
 8003120:	d003      	beq.n	800312a <HAL_RCC_GetSysClockFreq+0x3a>
 8003122:	e0db      	b.n	80032dc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003124:	4b73      	ldr	r3, [pc, #460]	; (80032f4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003126:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003128:	e0db      	b.n	80032e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800312a:	4b73      	ldr	r3, [pc, #460]	; (80032f8 <HAL_RCC_GetSysClockFreq+0x208>)
 800312c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800312e:	e0d8      	b.n	80032e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003130:	4b6f      	ldr	r3, [pc, #444]	; (80032f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003138:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800313a:	4b6d      	ldr	r3, [pc, #436]	; (80032f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d063      	beq.n	800320e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003146:	4b6a      	ldr	r3, [pc, #424]	; (80032f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	099b      	lsrs	r3, r3, #6
 800314c:	2200      	movs	r2, #0
 800314e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003150:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003154:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003158:	633b      	str	r3, [r7, #48]	; 0x30
 800315a:	2300      	movs	r3, #0
 800315c:	637b      	str	r3, [r7, #52]	; 0x34
 800315e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003162:	4622      	mov	r2, r4
 8003164:	462b      	mov	r3, r5
 8003166:	f04f 0000 	mov.w	r0, #0
 800316a:	f04f 0100 	mov.w	r1, #0
 800316e:	0159      	lsls	r1, r3, #5
 8003170:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003174:	0150      	lsls	r0, r2, #5
 8003176:	4602      	mov	r2, r0
 8003178:	460b      	mov	r3, r1
 800317a:	4621      	mov	r1, r4
 800317c:	1a51      	subs	r1, r2, r1
 800317e:	6139      	str	r1, [r7, #16]
 8003180:	4629      	mov	r1, r5
 8003182:	eb63 0301 	sbc.w	r3, r3, r1
 8003186:	617b      	str	r3, [r7, #20]
 8003188:	f04f 0200 	mov.w	r2, #0
 800318c:	f04f 0300 	mov.w	r3, #0
 8003190:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003194:	4659      	mov	r1, fp
 8003196:	018b      	lsls	r3, r1, #6
 8003198:	4651      	mov	r1, sl
 800319a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800319e:	4651      	mov	r1, sl
 80031a0:	018a      	lsls	r2, r1, #6
 80031a2:	4651      	mov	r1, sl
 80031a4:	ebb2 0801 	subs.w	r8, r2, r1
 80031a8:	4659      	mov	r1, fp
 80031aa:	eb63 0901 	sbc.w	r9, r3, r1
 80031ae:	f04f 0200 	mov.w	r2, #0
 80031b2:	f04f 0300 	mov.w	r3, #0
 80031b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80031be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80031c2:	4690      	mov	r8, r2
 80031c4:	4699      	mov	r9, r3
 80031c6:	4623      	mov	r3, r4
 80031c8:	eb18 0303 	adds.w	r3, r8, r3
 80031cc:	60bb      	str	r3, [r7, #8]
 80031ce:	462b      	mov	r3, r5
 80031d0:	eb49 0303 	adc.w	r3, r9, r3
 80031d4:	60fb      	str	r3, [r7, #12]
 80031d6:	f04f 0200 	mov.w	r2, #0
 80031da:	f04f 0300 	mov.w	r3, #0
 80031de:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80031e2:	4629      	mov	r1, r5
 80031e4:	024b      	lsls	r3, r1, #9
 80031e6:	4621      	mov	r1, r4
 80031e8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80031ec:	4621      	mov	r1, r4
 80031ee:	024a      	lsls	r2, r1, #9
 80031f0:	4610      	mov	r0, r2
 80031f2:	4619      	mov	r1, r3
 80031f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031f6:	2200      	movs	r2, #0
 80031f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80031fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80031fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003200:	f7fd f84e 	bl	80002a0 <__aeabi_uldivmod>
 8003204:	4602      	mov	r2, r0
 8003206:	460b      	mov	r3, r1
 8003208:	4613      	mov	r3, r2
 800320a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800320c:	e058      	b.n	80032c0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800320e:	4b38      	ldr	r3, [pc, #224]	; (80032f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	099b      	lsrs	r3, r3, #6
 8003214:	2200      	movs	r2, #0
 8003216:	4618      	mov	r0, r3
 8003218:	4611      	mov	r1, r2
 800321a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800321e:	623b      	str	r3, [r7, #32]
 8003220:	2300      	movs	r3, #0
 8003222:	627b      	str	r3, [r7, #36]	; 0x24
 8003224:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003228:	4642      	mov	r2, r8
 800322a:	464b      	mov	r3, r9
 800322c:	f04f 0000 	mov.w	r0, #0
 8003230:	f04f 0100 	mov.w	r1, #0
 8003234:	0159      	lsls	r1, r3, #5
 8003236:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800323a:	0150      	lsls	r0, r2, #5
 800323c:	4602      	mov	r2, r0
 800323e:	460b      	mov	r3, r1
 8003240:	4641      	mov	r1, r8
 8003242:	ebb2 0a01 	subs.w	sl, r2, r1
 8003246:	4649      	mov	r1, r9
 8003248:	eb63 0b01 	sbc.w	fp, r3, r1
 800324c:	f04f 0200 	mov.w	r2, #0
 8003250:	f04f 0300 	mov.w	r3, #0
 8003254:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003258:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800325c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003260:	ebb2 040a 	subs.w	r4, r2, sl
 8003264:	eb63 050b 	sbc.w	r5, r3, fp
 8003268:	f04f 0200 	mov.w	r2, #0
 800326c:	f04f 0300 	mov.w	r3, #0
 8003270:	00eb      	lsls	r3, r5, #3
 8003272:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003276:	00e2      	lsls	r2, r4, #3
 8003278:	4614      	mov	r4, r2
 800327a:	461d      	mov	r5, r3
 800327c:	4643      	mov	r3, r8
 800327e:	18e3      	adds	r3, r4, r3
 8003280:	603b      	str	r3, [r7, #0]
 8003282:	464b      	mov	r3, r9
 8003284:	eb45 0303 	adc.w	r3, r5, r3
 8003288:	607b      	str	r3, [r7, #4]
 800328a:	f04f 0200 	mov.w	r2, #0
 800328e:	f04f 0300 	mov.w	r3, #0
 8003292:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003296:	4629      	mov	r1, r5
 8003298:	028b      	lsls	r3, r1, #10
 800329a:	4621      	mov	r1, r4
 800329c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80032a0:	4621      	mov	r1, r4
 80032a2:	028a      	lsls	r2, r1, #10
 80032a4:	4610      	mov	r0, r2
 80032a6:	4619      	mov	r1, r3
 80032a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032aa:	2200      	movs	r2, #0
 80032ac:	61bb      	str	r3, [r7, #24]
 80032ae:	61fa      	str	r2, [r7, #28]
 80032b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032b4:	f7fc fff4 	bl	80002a0 <__aeabi_uldivmod>
 80032b8:	4602      	mov	r2, r0
 80032ba:	460b      	mov	r3, r1
 80032bc:	4613      	mov	r3, r2
 80032be:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80032c0:	4b0b      	ldr	r3, [pc, #44]	; (80032f0 <HAL_RCC_GetSysClockFreq+0x200>)
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	0c1b      	lsrs	r3, r3, #16
 80032c6:	f003 0303 	and.w	r3, r3, #3
 80032ca:	3301      	adds	r3, #1
 80032cc:	005b      	lsls	r3, r3, #1
 80032ce:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80032d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80032d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032d8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80032da:	e002      	b.n	80032e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032dc:	4b05      	ldr	r3, [pc, #20]	; (80032f4 <HAL_RCC_GetSysClockFreq+0x204>)
 80032de:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80032e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3750      	adds	r7, #80	; 0x50
 80032e8:	46bd      	mov	sp, r7
 80032ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032ee:	bf00      	nop
 80032f0:	40023800 	.word	0x40023800
 80032f4:	00f42400 	.word	0x00f42400
 80032f8:	007a1200 	.word	0x007a1200

080032fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032fc:	b480      	push	{r7}
 80032fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003300:	4b03      	ldr	r3, [pc, #12]	; (8003310 <HAL_RCC_GetHCLKFreq+0x14>)
 8003302:	681b      	ldr	r3, [r3, #0]
}
 8003304:	4618      	mov	r0, r3
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
 800330e:	bf00      	nop
 8003310:	20000000 	.word	0x20000000

08003314 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003318:	f7ff fff0 	bl	80032fc <HAL_RCC_GetHCLKFreq>
 800331c:	4602      	mov	r2, r0
 800331e:	4b05      	ldr	r3, [pc, #20]	; (8003334 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	0a9b      	lsrs	r3, r3, #10
 8003324:	f003 0307 	and.w	r3, r3, #7
 8003328:	4903      	ldr	r1, [pc, #12]	; (8003338 <HAL_RCC_GetPCLK1Freq+0x24>)
 800332a:	5ccb      	ldrb	r3, [r1, r3]
 800332c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003330:	4618      	mov	r0, r3
 8003332:	bd80      	pop	{r7, pc}
 8003334:	40023800 	.word	0x40023800
 8003338:	08005828 	.word	0x08005828

0800333c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003340:	f7ff ffdc 	bl	80032fc <HAL_RCC_GetHCLKFreq>
 8003344:	4602      	mov	r2, r0
 8003346:	4b05      	ldr	r3, [pc, #20]	; (800335c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	0b5b      	lsrs	r3, r3, #13
 800334c:	f003 0307 	and.w	r3, r3, #7
 8003350:	4903      	ldr	r1, [pc, #12]	; (8003360 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003352:	5ccb      	ldrb	r3, [r1, r3]
 8003354:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003358:	4618      	mov	r0, r3
 800335a:	bd80      	pop	{r7, pc}
 800335c:	40023800 	.word	0x40023800
 8003360:	08005828 	.word	0x08005828

08003364 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b082      	sub	sp, #8
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d101      	bne.n	8003376 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e041      	b.n	80033fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800337c:	b2db      	uxtb	r3, r3
 800337e:	2b00      	cmp	r3, #0
 8003380:	d106      	bne.n	8003390 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f7fd fe40 	bl	8001010 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2202      	movs	r2, #2
 8003394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	3304      	adds	r3, #4
 80033a0:	4619      	mov	r1, r3
 80033a2:	4610      	mov	r0, r2
 80033a4:	f000 fad8 	bl	8003958 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2201      	movs	r2, #1
 80033d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2201      	movs	r2, #1
 80033f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3708      	adds	r7, #8
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}

08003402 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003402:	b580      	push	{r7, lr}
 8003404:	b082      	sub	sp, #8
 8003406:	af00      	add	r7, sp, #0
 8003408:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d101      	bne.n	8003414 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e041      	b.n	8003498 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800341a:	b2db      	uxtb	r3, r3
 800341c:	2b00      	cmp	r3, #0
 800341e:	d106      	bne.n	800342e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f000 f839 	bl	80034a0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2202      	movs	r2, #2
 8003432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	3304      	adds	r3, #4
 800343e:	4619      	mov	r1, r3
 8003440:	4610      	mov	r0, r2
 8003442:	f000 fa89 	bl	8003958 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2201      	movs	r2, #1
 800344a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2201      	movs	r2, #1
 8003452:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2201      	movs	r2, #1
 800345a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2201      	movs	r2, #1
 8003462:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2201      	movs	r2, #1
 800346a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2201      	movs	r2, #1
 8003472:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2201      	movs	r2, #1
 800347a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2201      	movs	r2, #1
 8003482:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2201      	movs	r2, #1
 800348a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2201      	movs	r2, #1
 8003492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003496:	2300      	movs	r3, #0
}
 8003498:	4618      	mov	r0, r3
 800349a:	3708      	adds	r7, #8
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}

080034a0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80034a8:	bf00      	nop
 80034aa:	370c      	adds	r7, #12
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr

080034b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b084      	sub	sp, #16
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d109      	bne.n	80034d8 <HAL_TIM_PWM_Start+0x24>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	bf14      	ite	ne
 80034d0:	2301      	movne	r3, #1
 80034d2:	2300      	moveq	r3, #0
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	e022      	b.n	800351e <HAL_TIM_PWM_Start+0x6a>
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	2b04      	cmp	r3, #4
 80034dc:	d109      	bne.n	80034f2 <HAL_TIM_PWM_Start+0x3e>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	bf14      	ite	ne
 80034ea:	2301      	movne	r3, #1
 80034ec:	2300      	moveq	r3, #0
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	e015      	b.n	800351e <HAL_TIM_PWM_Start+0x6a>
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	2b08      	cmp	r3, #8
 80034f6:	d109      	bne.n	800350c <HAL_TIM_PWM_Start+0x58>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	2b01      	cmp	r3, #1
 8003502:	bf14      	ite	ne
 8003504:	2301      	movne	r3, #1
 8003506:	2300      	moveq	r3, #0
 8003508:	b2db      	uxtb	r3, r3
 800350a:	e008      	b.n	800351e <HAL_TIM_PWM_Start+0x6a>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003512:	b2db      	uxtb	r3, r3
 8003514:	2b01      	cmp	r3, #1
 8003516:	bf14      	ite	ne
 8003518:	2301      	movne	r3, #1
 800351a:	2300      	moveq	r3, #0
 800351c:	b2db      	uxtb	r3, r3
 800351e:	2b00      	cmp	r3, #0
 8003520:	d001      	beq.n	8003526 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e07c      	b.n	8003620 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d104      	bne.n	8003536 <HAL_TIM_PWM_Start+0x82>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2202      	movs	r2, #2
 8003530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003534:	e013      	b.n	800355e <HAL_TIM_PWM_Start+0xaa>
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	2b04      	cmp	r3, #4
 800353a:	d104      	bne.n	8003546 <HAL_TIM_PWM_Start+0x92>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2202      	movs	r2, #2
 8003540:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003544:	e00b      	b.n	800355e <HAL_TIM_PWM_Start+0xaa>
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	2b08      	cmp	r3, #8
 800354a:	d104      	bne.n	8003556 <HAL_TIM_PWM_Start+0xa2>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2202      	movs	r2, #2
 8003550:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003554:	e003      	b.n	800355e <HAL_TIM_PWM_Start+0xaa>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2202      	movs	r2, #2
 800355a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	2201      	movs	r2, #1
 8003564:	6839      	ldr	r1, [r7, #0]
 8003566:	4618      	mov	r0, r3
 8003568:	f000 fcec 	bl	8003f44 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a2d      	ldr	r2, [pc, #180]	; (8003628 <HAL_TIM_PWM_Start+0x174>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d004      	beq.n	8003580 <HAL_TIM_PWM_Start+0xcc>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a2c      	ldr	r2, [pc, #176]	; (800362c <HAL_TIM_PWM_Start+0x178>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d101      	bne.n	8003584 <HAL_TIM_PWM_Start+0xd0>
 8003580:	2301      	movs	r3, #1
 8003582:	e000      	b.n	8003586 <HAL_TIM_PWM_Start+0xd2>
 8003584:	2300      	movs	r3, #0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d007      	beq.n	800359a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003598:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a22      	ldr	r2, [pc, #136]	; (8003628 <HAL_TIM_PWM_Start+0x174>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d022      	beq.n	80035ea <HAL_TIM_PWM_Start+0x136>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035ac:	d01d      	beq.n	80035ea <HAL_TIM_PWM_Start+0x136>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a1f      	ldr	r2, [pc, #124]	; (8003630 <HAL_TIM_PWM_Start+0x17c>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d018      	beq.n	80035ea <HAL_TIM_PWM_Start+0x136>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a1d      	ldr	r2, [pc, #116]	; (8003634 <HAL_TIM_PWM_Start+0x180>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d013      	beq.n	80035ea <HAL_TIM_PWM_Start+0x136>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a1c      	ldr	r2, [pc, #112]	; (8003638 <HAL_TIM_PWM_Start+0x184>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d00e      	beq.n	80035ea <HAL_TIM_PWM_Start+0x136>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a16      	ldr	r2, [pc, #88]	; (800362c <HAL_TIM_PWM_Start+0x178>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d009      	beq.n	80035ea <HAL_TIM_PWM_Start+0x136>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a18      	ldr	r2, [pc, #96]	; (800363c <HAL_TIM_PWM_Start+0x188>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d004      	beq.n	80035ea <HAL_TIM_PWM_Start+0x136>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a16      	ldr	r2, [pc, #88]	; (8003640 <HAL_TIM_PWM_Start+0x18c>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d111      	bne.n	800360e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	f003 0307 	and.w	r3, r3, #7
 80035f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2b06      	cmp	r3, #6
 80035fa:	d010      	beq.n	800361e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f042 0201 	orr.w	r2, r2, #1
 800360a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800360c:	e007      	b.n	800361e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f042 0201 	orr.w	r2, r2, #1
 800361c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800361e:	2300      	movs	r3, #0
}
 8003620:	4618      	mov	r0, r3
 8003622:	3710      	adds	r7, #16
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}
 8003628:	40010000 	.word	0x40010000
 800362c:	40010400 	.word	0x40010400
 8003630:	40000400 	.word	0x40000400
 8003634:	40000800 	.word	0x40000800
 8003638:	40000c00 	.word	0x40000c00
 800363c:	40014000 	.word	0x40014000
 8003640:	40001800 	.word	0x40001800

08003644 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b086      	sub	sp, #24
 8003648:	af00      	add	r7, sp, #0
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	60b9      	str	r1, [r7, #8]
 800364e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003650:	2300      	movs	r3, #0
 8003652:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800365a:	2b01      	cmp	r3, #1
 800365c:	d101      	bne.n	8003662 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800365e:	2302      	movs	r3, #2
 8003660:	e0ae      	b.n	80037c0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2201      	movs	r2, #1
 8003666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2b0c      	cmp	r3, #12
 800366e:	f200 809f 	bhi.w	80037b0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003672:	a201      	add	r2, pc, #4	; (adr r2, 8003678 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003678:	080036ad 	.word	0x080036ad
 800367c:	080037b1 	.word	0x080037b1
 8003680:	080037b1 	.word	0x080037b1
 8003684:	080037b1 	.word	0x080037b1
 8003688:	080036ed 	.word	0x080036ed
 800368c:	080037b1 	.word	0x080037b1
 8003690:	080037b1 	.word	0x080037b1
 8003694:	080037b1 	.word	0x080037b1
 8003698:	0800372f 	.word	0x0800372f
 800369c:	080037b1 	.word	0x080037b1
 80036a0:	080037b1 	.word	0x080037b1
 80036a4:	080037b1 	.word	0x080037b1
 80036a8:	0800376f 	.word	0x0800376f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68b9      	ldr	r1, [r7, #8]
 80036b2:	4618      	mov	r0, r3
 80036b4:	f000 f9fc 	bl	8003ab0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	699a      	ldr	r2, [r3, #24]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f042 0208 	orr.w	r2, r2, #8
 80036c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	699a      	ldr	r2, [r3, #24]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f022 0204 	bic.w	r2, r2, #4
 80036d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	6999      	ldr	r1, [r3, #24]
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	691a      	ldr	r2, [r3, #16]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	430a      	orrs	r2, r1
 80036e8:	619a      	str	r2, [r3, #24]
      break;
 80036ea:	e064      	b.n	80037b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	68b9      	ldr	r1, [r7, #8]
 80036f2:	4618      	mov	r0, r3
 80036f4:	f000 fa4c 	bl	8003b90 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	699a      	ldr	r2, [r3, #24]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003706:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	699a      	ldr	r2, [r3, #24]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003716:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	6999      	ldr	r1, [r3, #24]
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	021a      	lsls	r2, r3, #8
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	430a      	orrs	r2, r1
 800372a:	619a      	str	r2, [r3, #24]
      break;
 800372c:	e043      	b.n	80037b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	68b9      	ldr	r1, [r7, #8]
 8003734:	4618      	mov	r0, r3
 8003736:	f000 faa1 	bl	8003c7c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	69da      	ldr	r2, [r3, #28]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f042 0208 	orr.w	r2, r2, #8
 8003748:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	69da      	ldr	r2, [r3, #28]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f022 0204 	bic.w	r2, r2, #4
 8003758:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	69d9      	ldr	r1, [r3, #28]
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	691a      	ldr	r2, [r3, #16]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	430a      	orrs	r2, r1
 800376a:	61da      	str	r2, [r3, #28]
      break;
 800376c:	e023      	b.n	80037b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	68b9      	ldr	r1, [r7, #8]
 8003774:	4618      	mov	r0, r3
 8003776:	f000 faf5 	bl	8003d64 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	69da      	ldr	r2, [r3, #28]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003788:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	69da      	ldr	r2, [r3, #28]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003798:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	69d9      	ldr	r1, [r3, #28]
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	691b      	ldr	r3, [r3, #16]
 80037a4:	021a      	lsls	r2, r3, #8
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	430a      	orrs	r2, r1
 80037ac:	61da      	str	r2, [r3, #28]
      break;
 80037ae:	e002      	b.n	80037b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	75fb      	strb	r3, [r7, #23]
      break;
 80037b4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80037be:	7dfb      	ldrb	r3, [r7, #23]
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3718      	adds	r7, #24
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b084      	sub	sp, #16
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037d2:	2300      	movs	r3, #0
 80037d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d101      	bne.n	80037e4 <HAL_TIM_ConfigClockSource+0x1c>
 80037e0:	2302      	movs	r3, #2
 80037e2:	e0b4      	b.n	800394e <HAL_TIM_ConfigClockSource+0x186>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2201      	movs	r2, #1
 80037e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2202      	movs	r2, #2
 80037f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003802:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800380a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	68ba      	ldr	r2, [r7, #8]
 8003812:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800381c:	d03e      	beq.n	800389c <HAL_TIM_ConfigClockSource+0xd4>
 800381e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003822:	f200 8087 	bhi.w	8003934 <HAL_TIM_ConfigClockSource+0x16c>
 8003826:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800382a:	f000 8086 	beq.w	800393a <HAL_TIM_ConfigClockSource+0x172>
 800382e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003832:	d87f      	bhi.n	8003934 <HAL_TIM_ConfigClockSource+0x16c>
 8003834:	2b70      	cmp	r3, #112	; 0x70
 8003836:	d01a      	beq.n	800386e <HAL_TIM_ConfigClockSource+0xa6>
 8003838:	2b70      	cmp	r3, #112	; 0x70
 800383a:	d87b      	bhi.n	8003934 <HAL_TIM_ConfigClockSource+0x16c>
 800383c:	2b60      	cmp	r3, #96	; 0x60
 800383e:	d050      	beq.n	80038e2 <HAL_TIM_ConfigClockSource+0x11a>
 8003840:	2b60      	cmp	r3, #96	; 0x60
 8003842:	d877      	bhi.n	8003934 <HAL_TIM_ConfigClockSource+0x16c>
 8003844:	2b50      	cmp	r3, #80	; 0x50
 8003846:	d03c      	beq.n	80038c2 <HAL_TIM_ConfigClockSource+0xfa>
 8003848:	2b50      	cmp	r3, #80	; 0x50
 800384a:	d873      	bhi.n	8003934 <HAL_TIM_ConfigClockSource+0x16c>
 800384c:	2b40      	cmp	r3, #64	; 0x40
 800384e:	d058      	beq.n	8003902 <HAL_TIM_ConfigClockSource+0x13a>
 8003850:	2b40      	cmp	r3, #64	; 0x40
 8003852:	d86f      	bhi.n	8003934 <HAL_TIM_ConfigClockSource+0x16c>
 8003854:	2b30      	cmp	r3, #48	; 0x30
 8003856:	d064      	beq.n	8003922 <HAL_TIM_ConfigClockSource+0x15a>
 8003858:	2b30      	cmp	r3, #48	; 0x30
 800385a:	d86b      	bhi.n	8003934 <HAL_TIM_ConfigClockSource+0x16c>
 800385c:	2b20      	cmp	r3, #32
 800385e:	d060      	beq.n	8003922 <HAL_TIM_ConfigClockSource+0x15a>
 8003860:	2b20      	cmp	r3, #32
 8003862:	d867      	bhi.n	8003934 <HAL_TIM_ConfigClockSource+0x16c>
 8003864:	2b00      	cmp	r3, #0
 8003866:	d05c      	beq.n	8003922 <HAL_TIM_ConfigClockSource+0x15a>
 8003868:	2b10      	cmp	r3, #16
 800386a:	d05a      	beq.n	8003922 <HAL_TIM_ConfigClockSource+0x15a>
 800386c:	e062      	b.n	8003934 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800387e:	f000 fb41 	bl	8003f04 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003890:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	68ba      	ldr	r2, [r7, #8]
 8003898:	609a      	str	r2, [r3, #8]
      break;
 800389a:	e04f      	b.n	800393c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80038ac:	f000 fb2a 	bl	8003f04 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	689a      	ldr	r2, [r3, #8]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80038be:	609a      	str	r2, [r3, #8]
      break;
 80038c0:	e03c      	b.n	800393c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038ce:	461a      	mov	r2, r3
 80038d0:	f000 fa9e 	bl	8003e10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2150      	movs	r1, #80	; 0x50
 80038da:	4618      	mov	r0, r3
 80038dc:	f000 faf7 	bl	8003ece <TIM_ITRx_SetConfig>
      break;
 80038e0:	e02c      	b.n	800393c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80038ee:	461a      	mov	r2, r3
 80038f0:	f000 fabd 	bl	8003e6e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2160      	movs	r1, #96	; 0x60
 80038fa:	4618      	mov	r0, r3
 80038fc:	f000 fae7 	bl	8003ece <TIM_ITRx_SetConfig>
      break;
 8003900:	e01c      	b.n	800393c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800390e:	461a      	mov	r2, r3
 8003910:	f000 fa7e 	bl	8003e10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	2140      	movs	r1, #64	; 0x40
 800391a:	4618      	mov	r0, r3
 800391c:	f000 fad7 	bl	8003ece <TIM_ITRx_SetConfig>
      break;
 8003920:	e00c      	b.n	800393c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4619      	mov	r1, r3
 800392c:	4610      	mov	r0, r2
 800392e:	f000 face 	bl	8003ece <TIM_ITRx_SetConfig>
      break;
 8003932:	e003      	b.n	800393c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	73fb      	strb	r3, [r7, #15]
      break;
 8003938:	e000      	b.n	800393c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800393a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2201      	movs	r2, #1
 8003940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800394c:	7bfb      	ldrb	r3, [r7, #15]
}
 800394e:	4618      	mov	r0, r3
 8003950:	3710      	adds	r7, #16
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
	...

08003958 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003958:	b480      	push	{r7}
 800395a:	b085      	sub	sp, #20
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4a46      	ldr	r2, [pc, #280]	; (8003a84 <TIM_Base_SetConfig+0x12c>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d013      	beq.n	8003998 <TIM_Base_SetConfig+0x40>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003976:	d00f      	beq.n	8003998 <TIM_Base_SetConfig+0x40>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	4a43      	ldr	r2, [pc, #268]	; (8003a88 <TIM_Base_SetConfig+0x130>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d00b      	beq.n	8003998 <TIM_Base_SetConfig+0x40>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	4a42      	ldr	r2, [pc, #264]	; (8003a8c <TIM_Base_SetConfig+0x134>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d007      	beq.n	8003998 <TIM_Base_SetConfig+0x40>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	4a41      	ldr	r2, [pc, #260]	; (8003a90 <TIM_Base_SetConfig+0x138>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d003      	beq.n	8003998 <TIM_Base_SetConfig+0x40>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	4a40      	ldr	r2, [pc, #256]	; (8003a94 <TIM_Base_SetConfig+0x13c>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d108      	bne.n	80039aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800399e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	68fa      	ldr	r2, [r7, #12]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a35      	ldr	r2, [pc, #212]	; (8003a84 <TIM_Base_SetConfig+0x12c>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d02b      	beq.n	8003a0a <TIM_Base_SetConfig+0xb2>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039b8:	d027      	beq.n	8003a0a <TIM_Base_SetConfig+0xb2>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a32      	ldr	r2, [pc, #200]	; (8003a88 <TIM_Base_SetConfig+0x130>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d023      	beq.n	8003a0a <TIM_Base_SetConfig+0xb2>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a31      	ldr	r2, [pc, #196]	; (8003a8c <TIM_Base_SetConfig+0x134>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d01f      	beq.n	8003a0a <TIM_Base_SetConfig+0xb2>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a30      	ldr	r2, [pc, #192]	; (8003a90 <TIM_Base_SetConfig+0x138>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d01b      	beq.n	8003a0a <TIM_Base_SetConfig+0xb2>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a2f      	ldr	r2, [pc, #188]	; (8003a94 <TIM_Base_SetConfig+0x13c>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d017      	beq.n	8003a0a <TIM_Base_SetConfig+0xb2>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4a2e      	ldr	r2, [pc, #184]	; (8003a98 <TIM_Base_SetConfig+0x140>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d013      	beq.n	8003a0a <TIM_Base_SetConfig+0xb2>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a2d      	ldr	r2, [pc, #180]	; (8003a9c <TIM_Base_SetConfig+0x144>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d00f      	beq.n	8003a0a <TIM_Base_SetConfig+0xb2>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a2c      	ldr	r2, [pc, #176]	; (8003aa0 <TIM_Base_SetConfig+0x148>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d00b      	beq.n	8003a0a <TIM_Base_SetConfig+0xb2>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a2b      	ldr	r2, [pc, #172]	; (8003aa4 <TIM_Base_SetConfig+0x14c>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d007      	beq.n	8003a0a <TIM_Base_SetConfig+0xb2>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a2a      	ldr	r2, [pc, #168]	; (8003aa8 <TIM_Base_SetConfig+0x150>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d003      	beq.n	8003a0a <TIM_Base_SetConfig+0xb2>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a29      	ldr	r2, [pc, #164]	; (8003aac <TIM_Base_SetConfig+0x154>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d108      	bne.n	8003a1c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	68fa      	ldr	r2, [r7, #12]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	695b      	ldr	r3, [r3, #20]
 8003a26:	4313      	orrs	r3, r2
 8003a28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	68fa      	ldr	r2, [r7, #12]
 8003a2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	689a      	ldr	r2, [r3, #8]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	4a10      	ldr	r2, [pc, #64]	; (8003a84 <TIM_Base_SetConfig+0x12c>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d003      	beq.n	8003a50 <TIM_Base_SetConfig+0xf8>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4a12      	ldr	r2, [pc, #72]	; (8003a94 <TIM_Base_SetConfig+0x13c>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d103      	bne.n	8003a58 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	691a      	ldr	r2, [r3, #16]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	691b      	ldr	r3, [r3, #16]
 8003a62:	f003 0301 	and.w	r3, r3, #1
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d105      	bne.n	8003a76 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	691b      	ldr	r3, [r3, #16]
 8003a6e:	f023 0201 	bic.w	r2, r3, #1
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	611a      	str	r2, [r3, #16]
  }
}
 8003a76:	bf00      	nop
 8003a78:	3714      	adds	r7, #20
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr
 8003a82:	bf00      	nop
 8003a84:	40010000 	.word	0x40010000
 8003a88:	40000400 	.word	0x40000400
 8003a8c:	40000800 	.word	0x40000800
 8003a90:	40000c00 	.word	0x40000c00
 8003a94:	40010400 	.word	0x40010400
 8003a98:	40014000 	.word	0x40014000
 8003a9c:	40014400 	.word	0x40014400
 8003aa0:	40014800 	.word	0x40014800
 8003aa4:	40001800 	.word	0x40001800
 8003aa8:	40001c00 	.word	0x40001c00
 8003aac:	40002000 	.word	0x40002000

08003ab0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b087      	sub	sp, #28
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a1b      	ldr	r3, [r3, #32]
 8003abe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6a1b      	ldr	r3, [r3, #32]
 8003ac4:	f023 0201 	bic.w	r2, r3, #1
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	699b      	ldr	r3, [r3, #24]
 8003ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ade:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f023 0303 	bic.w	r3, r3, #3
 8003ae6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	68fa      	ldr	r2, [r7, #12]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	f023 0302 	bic.w	r3, r3, #2
 8003af8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	697a      	ldr	r2, [r7, #20]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	4a20      	ldr	r2, [pc, #128]	; (8003b88 <TIM_OC1_SetConfig+0xd8>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d003      	beq.n	8003b14 <TIM_OC1_SetConfig+0x64>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	4a1f      	ldr	r2, [pc, #124]	; (8003b8c <TIM_OC1_SetConfig+0xdc>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d10c      	bne.n	8003b2e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	f023 0308 	bic.w	r3, r3, #8
 8003b1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	697a      	ldr	r2, [r7, #20]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	f023 0304 	bic.w	r3, r3, #4
 8003b2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a15      	ldr	r2, [pc, #84]	; (8003b88 <TIM_OC1_SetConfig+0xd8>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d003      	beq.n	8003b3e <TIM_OC1_SetConfig+0x8e>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a14      	ldr	r2, [pc, #80]	; (8003b8c <TIM_OC1_SetConfig+0xdc>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d111      	bne.n	8003b62 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	695b      	ldr	r3, [r3, #20]
 8003b52:	693a      	ldr	r2, [r7, #16]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	699b      	ldr	r3, [r3, #24]
 8003b5c:	693a      	ldr	r2, [r7, #16]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	693a      	ldr	r2, [r7, #16]
 8003b66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	68fa      	ldr	r2, [r7, #12]
 8003b6c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	685a      	ldr	r2, [r3, #4]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	697a      	ldr	r2, [r7, #20]
 8003b7a:	621a      	str	r2, [r3, #32]
}
 8003b7c:	bf00      	nop
 8003b7e:	371c      	adds	r7, #28
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr
 8003b88:	40010000 	.word	0x40010000
 8003b8c:	40010400 	.word	0x40010400

08003b90 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b087      	sub	sp, #28
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a1b      	ldr	r3, [r3, #32]
 8003b9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a1b      	ldr	r3, [r3, #32]
 8003ba4:	f023 0210 	bic.w	r2, r3, #16
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	699b      	ldr	r3, [r3, #24]
 8003bb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	021b      	lsls	r3, r3, #8
 8003bce:	68fa      	ldr	r2, [r7, #12]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	f023 0320 	bic.w	r3, r3, #32
 8003bda:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	011b      	lsls	r3, r3, #4
 8003be2:	697a      	ldr	r2, [r7, #20]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	4a22      	ldr	r2, [pc, #136]	; (8003c74 <TIM_OC2_SetConfig+0xe4>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d003      	beq.n	8003bf8 <TIM_OC2_SetConfig+0x68>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	4a21      	ldr	r2, [pc, #132]	; (8003c78 <TIM_OC2_SetConfig+0xe8>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d10d      	bne.n	8003c14 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bfe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	011b      	lsls	r3, r3, #4
 8003c06:	697a      	ldr	r2, [r7, #20]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c12:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	4a17      	ldr	r2, [pc, #92]	; (8003c74 <TIM_OC2_SetConfig+0xe4>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d003      	beq.n	8003c24 <TIM_OC2_SetConfig+0x94>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	4a16      	ldr	r2, [pc, #88]	; (8003c78 <TIM_OC2_SetConfig+0xe8>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d113      	bne.n	8003c4c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c2a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c32:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	695b      	ldr	r3, [r3, #20]
 8003c38:	009b      	lsls	r3, r3, #2
 8003c3a:	693a      	ldr	r2, [r7, #16]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	699b      	ldr	r3, [r3, #24]
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	693a      	ldr	r2, [r7, #16]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	693a      	ldr	r2, [r7, #16]
 8003c50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	68fa      	ldr	r2, [r7, #12]
 8003c56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	685a      	ldr	r2, [r3, #4]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	697a      	ldr	r2, [r7, #20]
 8003c64:	621a      	str	r2, [r3, #32]
}
 8003c66:	bf00      	nop
 8003c68:	371c      	adds	r7, #28
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr
 8003c72:	bf00      	nop
 8003c74:	40010000 	.word	0x40010000
 8003c78:	40010400 	.word	0x40010400

08003c7c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b087      	sub	sp, #28
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a1b      	ldr	r3, [r3, #32]
 8003c8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6a1b      	ldr	r3, [r3, #32]
 8003c90:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	69db      	ldr	r3, [r3, #28]
 8003ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003caa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f023 0303 	bic.w	r3, r3, #3
 8003cb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	68fa      	ldr	r2, [r7, #12]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003cc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	021b      	lsls	r3, r3, #8
 8003ccc:	697a      	ldr	r2, [r7, #20]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4a21      	ldr	r2, [pc, #132]	; (8003d5c <TIM_OC3_SetConfig+0xe0>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d003      	beq.n	8003ce2 <TIM_OC3_SetConfig+0x66>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4a20      	ldr	r2, [pc, #128]	; (8003d60 <TIM_OC3_SetConfig+0xe4>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d10d      	bne.n	8003cfe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ce8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	68db      	ldr	r3, [r3, #12]
 8003cee:	021b      	lsls	r3, r3, #8
 8003cf0:	697a      	ldr	r2, [r7, #20]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003cfc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4a16      	ldr	r2, [pc, #88]	; (8003d5c <TIM_OC3_SetConfig+0xe0>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d003      	beq.n	8003d0e <TIM_OC3_SetConfig+0x92>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4a15      	ldr	r2, [pc, #84]	; (8003d60 <TIM_OC3_SetConfig+0xe4>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d113      	bne.n	8003d36 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	695b      	ldr	r3, [r3, #20]
 8003d22:	011b      	lsls	r3, r3, #4
 8003d24:	693a      	ldr	r2, [r7, #16]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	699b      	ldr	r3, [r3, #24]
 8003d2e:	011b      	lsls	r3, r3, #4
 8003d30:	693a      	ldr	r2, [r7, #16]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	693a      	ldr	r2, [r7, #16]
 8003d3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	68fa      	ldr	r2, [r7, #12]
 8003d40:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	685a      	ldr	r2, [r3, #4]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	697a      	ldr	r2, [r7, #20]
 8003d4e:	621a      	str	r2, [r3, #32]
}
 8003d50:	bf00      	nop
 8003d52:	371c      	adds	r7, #28
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr
 8003d5c:	40010000 	.word	0x40010000
 8003d60:	40010400 	.word	0x40010400

08003d64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b087      	sub	sp, #28
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a1b      	ldr	r3, [r3, #32]
 8003d72:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6a1b      	ldr	r3, [r3, #32]
 8003d78:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	69db      	ldr	r3, [r3, #28]
 8003d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	021b      	lsls	r3, r3, #8
 8003da2:	68fa      	ldr	r2, [r7, #12]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003dae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	031b      	lsls	r3, r3, #12
 8003db6:	693a      	ldr	r2, [r7, #16]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	4a12      	ldr	r2, [pc, #72]	; (8003e08 <TIM_OC4_SetConfig+0xa4>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d003      	beq.n	8003dcc <TIM_OC4_SetConfig+0x68>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	4a11      	ldr	r2, [pc, #68]	; (8003e0c <TIM_OC4_SetConfig+0xa8>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d109      	bne.n	8003de0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003dd2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	695b      	ldr	r3, [r3, #20]
 8003dd8:	019b      	lsls	r3, r3, #6
 8003dda:	697a      	ldr	r2, [r7, #20]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	697a      	ldr	r2, [r7, #20]
 8003de4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	68fa      	ldr	r2, [r7, #12]
 8003dea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	685a      	ldr	r2, [r3, #4]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	693a      	ldr	r2, [r7, #16]
 8003df8:	621a      	str	r2, [r3, #32]
}
 8003dfa:	bf00      	nop
 8003dfc:	371c      	adds	r7, #28
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr
 8003e06:	bf00      	nop
 8003e08:	40010000 	.word	0x40010000
 8003e0c:	40010400 	.word	0x40010400

08003e10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b087      	sub	sp, #28
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	60b9      	str	r1, [r7, #8]
 8003e1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6a1b      	ldr	r3, [r3, #32]
 8003e20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6a1b      	ldr	r3, [r3, #32]
 8003e26:	f023 0201 	bic.w	r2, r3, #1
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	699b      	ldr	r3, [r3, #24]
 8003e32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	011b      	lsls	r3, r3, #4
 8003e40:	693a      	ldr	r2, [r7, #16]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	f023 030a 	bic.w	r3, r3, #10
 8003e4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e4e:	697a      	ldr	r2, [r7, #20]
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	693a      	ldr	r2, [r7, #16]
 8003e5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	697a      	ldr	r2, [r7, #20]
 8003e60:	621a      	str	r2, [r3, #32]
}
 8003e62:	bf00      	nop
 8003e64:	371c      	adds	r7, #28
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr

08003e6e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e6e:	b480      	push	{r7}
 8003e70:	b087      	sub	sp, #28
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	60f8      	str	r0, [r7, #12]
 8003e76:	60b9      	str	r1, [r7, #8]
 8003e78:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	6a1b      	ldr	r3, [r3, #32]
 8003e7e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6a1b      	ldr	r3, [r3, #32]
 8003e84:	f023 0210 	bic.w	r2, r3, #16
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	699b      	ldr	r3, [r3, #24]
 8003e90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e98:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	031b      	lsls	r3, r3, #12
 8003e9e:	693a      	ldr	r2, [r7, #16]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003eaa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	011b      	lsls	r3, r3, #4
 8003eb0:	697a      	ldr	r2, [r7, #20]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	693a      	ldr	r2, [r7, #16]
 8003eba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	697a      	ldr	r2, [r7, #20]
 8003ec0:	621a      	str	r2, [r3, #32]
}
 8003ec2:	bf00      	nop
 8003ec4:	371c      	adds	r7, #28
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr

08003ece <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ece:	b480      	push	{r7}
 8003ed0:	b085      	sub	sp, #20
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	6078      	str	r0, [r7, #4]
 8003ed6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ee4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ee6:	683a      	ldr	r2, [r7, #0]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	f043 0307 	orr.w	r3, r3, #7
 8003ef0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	68fa      	ldr	r2, [r7, #12]
 8003ef6:	609a      	str	r2, [r3, #8]
}
 8003ef8:	bf00      	nop
 8003efa:	3714      	adds	r7, #20
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr

08003f04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b087      	sub	sp, #28
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	60f8      	str	r0, [r7, #12]
 8003f0c:	60b9      	str	r1, [r7, #8]
 8003f0e:	607a      	str	r2, [r7, #4]
 8003f10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	021a      	lsls	r2, r3, #8
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	431a      	orrs	r2, r3
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	697a      	ldr	r2, [r7, #20]
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	697a      	ldr	r2, [r7, #20]
 8003f36:	609a      	str	r2, [r3, #8]
}
 8003f38:	bf00      	nop
 8003f3a:	371c      	adds	r7, #28
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b087      	sub	sp, #28
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	60f8      	str	r0, [r7, #12]
 8003f4c:	60b9      	str	r1, [r7, #8]
 8003f4e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	f003 031f 	and.w	r3, r3, #31
 8003f56:	2201      	movs	r2, #1
 8003f58:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	6a1a      	ldr	r2, [r3, #32]
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	43db      	mvns	r3, r3
 8003f66:	401a      	ands	r2, r3
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6a1a      	ldr	r2, [r3, #32]
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	f003 031f 	and.w	r3, r3, #31
 8003f76:	6879      	ldr	r1, [r7, #4]
 8003f78:	fa01 f303 	lsl.w	r3, r1, r3
 8003f7c:	431a      	orrs	r2, r3
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	621a      	str	r2, [r3, #32]
}
 8003f82:	bf00      	nop
 8003f84:	371c      	adds	r7, #28
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr
	...

08003f90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b085      	sub	sp, #20
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d101      	bne.n	8003fa8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003fa4:	2302      	movs	r3, #2
 8003fa6:	e05a      	b.n	800405e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2202      	movs	r2, #2
 8003fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	68fa      	ldr	r2, [r7, #12]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	68fa      	ldr	r2, [r7, #12]
 8003fe0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a21      	ldr	r2, [pc, #132]	; (800406c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d022      	beq.n	8004032 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ff4:	d01d      	beq.n	8004032 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a1d      	ldr	r2, [pc, #116]	; (8004070 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d018      	beq.n	8004032 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a1b      	ldr	r2, [pc, #108]	; (8004074 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d013      	beq.n	8004032 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a1a      	ldr	r2, [pc, #104]	; (8004078 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d00e      	beq.n	8004032 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a18      	ldr	r2, [pc, #96]	; (800407c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d009      	beq.n	8004032 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a17      	ldr	r2, [pc, #92]	; (8004080 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d004      	beq.n	8004032 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a15      	ldr	r2, [pc, #84]	; (8004084 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d10c      	bne.n	800404c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004038:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	68ba      	ldr	r2, [r7, #8]
 8004040:	4313      	orrs	r3, r2
 8004042:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	68ba      	ldr	r2, [r7, #8]
 800404a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800405c:	2300      	movs	r3, #0
}
 800405e:	4618      	mov	r0, r3
 8004060:	3714      	adds	r7, #20
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr
 800406a:	bf00      	nop
 800406c:	40010000 	.word	0x40010000
 8004070:	40000400 	.word	0x40000400
 8004074:	40000800 	.word	0x40000800
 8004078:	40000c00 	.word	0x40000c00
 800407c:	40010400 	.word	0x40010400
 8004080:	40014000 	.word	0x40014000
 8004084:	40001800 	.word	0x40001800

08004088 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b082      	sub	sp, #8
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d101      	bne.n	800409a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e042      	b.n	8004120 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d106      	bne.n	80040b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2200      	movs	r2, #0
 80040aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f7fd f806 	bl	80010c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2224      	movs	r2, #36	; 0x24
 80040b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	68da      	ldr	r2, [r3, #12]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80040ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f000 f973 	bl	80043b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	691a      	ldr	r2, [r3, #16]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80040e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	695a      	ldr	r2, [r3, #20]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80040f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	68da      	ldr	r2, [r3, #12]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004100:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2220      	movs	r2, #32
 800410c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2220      	movs	r2, #32
 8004114:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800411e:	2300      	movs	r3, #0
}
 8004120:	4618      	mov	r0, r3
 8004122:	3708      	adds	r7, #8
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}

08004128 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b08a      	sub	sp, #40	; 0x28
 800412c:	af02      	add	r7, sp, #8
 800412e:	60f8      	str	r0, [r7, #12]
 8004130:	60b9      	str	r1, [r7, #8]
 8004132:	603b      	str	r3, [r7, #0]
 8004134:	4613      	mov	r3, r2
 8004136:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004138:	2300      	movs	r3, #0
 800413a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004142:	b2db      	uxtb	r3, r3
 8004144:	2b20      	cmp	r3, #32
 8004146:	d175      	bne.n	8004234 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d002      	beq.n	8004154 <HAL_UART_Transmit+0x2c>
 800414e:	88fb      	ldrh	r3, [r7, #6]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d101      	bne.n	8004158 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	e06e      	b.n	8004236 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2200      	movs	r2, #0
 800415c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2221      	movs	r2, #33	; 0x21
 8004162:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004166:	f7fd f94f 	bl	8001408 <HAL_GetTick>
 800416a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	88fa      	ldrh	r2, [r7, #6]
 8004170:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	88fa      	ldrh	r2, [r7, #6]
 8004176:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004180:	d108      	bne.n	8004194 <HAL_UART_Transmit+0x6c>
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	691b      	ldr	r3, [r3, #16]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d104      	bne.n	8004194 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800418a:	2300      	movs	r3, #0
 800418c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	61bb      	str	r3, [r7, #24]
 8004192:	e003      	b.n	800419c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004198:	2300      	movs	r3, #0
 800419a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800419c:	e02e      	b.n	80041fc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	9300      	str	r3, [sp, #0]
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	2200      	movs	r2, #0
 80041a6:	2180      	movs	r1, #128	; 0x80
 80041a8:	68f8      	ldr	r0, [r7, #12]
 80041aa:	f000 f848 	bl	800423e <UART_WaitOnFlagUntilTimeout>
 80041ae:	4603      	mov	r3, r0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d005      	beq.n	80041c0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2220      	movs	r2, #32
 80041b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80041bc:	2303      	movs	r3, #3
 80041be:	e03a      	b.n	8004236 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d10b      	bne.n	80041de <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80041c6:	69bb      	ldr	r3, [r7, #24]
 80041c8:	881b      	ldrh	r3, [r3, #0]
 80041ca:	461a      	mov	r2, r3
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80041d6:	69bb      	ldr	r3, [r7, #24]
 80041d8:	3302      	adds	r3, #2
 80041da:	61bb      	str	r3, [r7, #24]
 80041dc:	e007      	b.n	80041ee <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	781a      	ldrb	r2, [r3, #0]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80041e8:	69fb      	ldr	r3, [r7, #28]
 80041ea:	3301      	adds	r3, #1
 80041ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	3b01      	subs	r3, #1
 80041f6:	b29a      	uxth	r2, r3
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004200:	b29b      	uxth	r3, r3
 8004202:	2b00      	cmp	r3, #0
 8004204:	d1cb      	bne.n	800419e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	9300      	str	r3, [sp, #0]
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	2200      	movs	r2, #0
 800420e:	2140      	movs	r1, #64	; 0x40
 8004210:	68f8      	ldr	r0, [r7, #12]
 8004212:	f000 f814 	bl	800423e <UART_WaitOnFlagUntilTimeout>
 8004216:	4603      	mov	r3, r0
 8004218:	2b00      	cmp	r3, #0
 800421a:	d005      	beq.n	8004228 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2220      	movs	r2, #32
 8004220:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8004224:	2303      	movs	r3, #3
 8004226:	e006      	b.n	8004236 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2220      	movs	r2, #32
 800422c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004230:	2300      	movs	r3, #0
 8004232:	e000      	b.n	8004236 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004234:	2302      	movs	r3, #2
  }
}
 8004236:	4618      	mov	r0, r3
 8004238:	3720      	adds	r7, #32
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}

0800423e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800423e:	b580      	push	{r7, lr}
 8004240:	b086      	sub	sp, #24
 8004242:	af00      	add	r7, sp, #0
 8004244:	60f8      	str	r0, [r7, #12]
 8004246:	60b9      	str	r1, [r7, #8]
 8004248:	603b      	str	r3, [r7, #0]
 800424a:	4613      	mov	r3, r2
 800424c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800424e:	e03b      	b.n	80042c8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004250:	6a3b      	ldr	r3, [r7, #32]
 8004252:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004256:	d037      	beq.n	80042c8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004258:	f7fd f8d6 	bl	8001408 <HAL_GetTick>
 800425c:	4602      	mov	r2, r0
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	6a3a      	ldr	r2, [r7, #32]
 8004264:	429a      	cmp	r2, r3
 8004266:	d302      	bcc.n	800426e <UART_WaitOnFlagUntilTimeout+0x30>
 8004268:	6a3b      	ldr	r3, [r7, #32]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d101      	bne.n	8004272 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e03a      	b.n	80042e8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	f003 0304 	and.w	r3, r3, #4
 800427c:	2b00      	cmp	r3, #0
 800427e:	d023      	beq.n	80042c8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	2b80      	cmp	r3, #128	; 0x80
 8004284:	d020      	beq.n	80042c8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	2b40      	cmp	r3, #64	; 0x40
 800428a:	d01d      	beq.n	80042c8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 0308 	and.w	r3, r3, #8
 8004296:	2b08      	cmp	r3, #8
 8004298:	d116      	bne.n	80042c8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800429a:	2300      	movs	r3, #0
 800429c:	617b      	str	r3, [r7, #20]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	617b      	str	r3, [r7, #20]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	617b      	str	r3, [r7, #20]
 80042ae:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80042b0:	68f8      	ldr	r0, [r7, #12]
 80042b2:	f000 f81d 	bl	80042f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2208      	movs	r2, #8
 80042ba:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2200      	movs	r2, #0
 80042c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e00f      	b.n	80042e8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	4013      	ands	r3, r2
 80042d2:	68ba      	ldr	r2, [r7, #8]
 80042d4:	429a      	cmp	r2, r3
 80042d6:	bf0c      	ite	eq
 80042d8:	2301      	moveq	r3, #1
 80042da:	2300      	movne	r3, #0
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	461a      	mov	r2, r3
 80042e0:	79fb      	ldrb	r3, [r7, #7]
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d0b4      	beq.n	8004250 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042e6:	2300      	movs	r3, #0
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3718      	adds	r7, #24
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b095      	sub	sp, #84	; 0x54
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	330c      	adds	r3, #12
 80042fe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004302:	e853 3f00 	ldrex	r3, [r3]
 8004306:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800430a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800430e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	330c      	adds	r3, #12
 8004316:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004318:	643a      	str	r2, [r7, #64]	; 0x40
 800431a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800431c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800431e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004320:	e841 2300 	strex	r3, r2, [r1]
 8004324:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004328:	2b00      	cmp	r3, #0
 800432a:	d1e5      	bne.n	80042f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	3314      	adds	r3, #20
 8004332:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004334:	6a3b      	ldr	r3, [r7, #32]
 8004336:	e853 3f00 	ldrex	r3, [r3]
 800433a:	61fb      	str	r3, [r7, #28]
   return(result);
 800433c:	69fb      	ldr	r3, [r7, #28]
 800433e:	f023 0301 	bic.w	r3, r3, #1
 8004342:	64bb      	str	r3, [r7, #72]	; 0x48
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	3314      	adds	r3, #20
 800434a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800434c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800434e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004350:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004352:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004354:	e841 2300 	strex	r3, r2, [r1]
 8004358:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800435a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435c:	2b00      	cmp	r3, #0
 800435e:	d1e5      	bne.n	800432c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004364:	2b01      	cmp	r3, #1
 8004366:	d119      	bne.n	800439c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	330c      	adds	r3, #12
 800436e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	e853 3f00 	ldrex	r3, [r3]
 8004376:	60bb      	str	r3, [r7, #8]
   return(result);
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	f023 0310 	bic.w	r3, r3, #16
 800437e:	647b      	str	r3, [r7, #68]	; 0x44
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	330c      	adds	r3, #12
 8004386:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004388:	61ba      	str	r2, [r7, #24]
 800438a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800438c:	6979      	ldr	r1, [r7, #20]
 800438e:	69ba      	ldr	r2, [r7, #24]
 8004390:	e841 2300 	strex	r3, r2, [r1]
 8004394:	613b      	str	r3, [r7, #16]
   return(result);
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d1e5      	bne.n	8004368 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2220      	movs	r2, #32
 80043a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80043aa:	bf00      	nop
 80043ac:	3754      	adds	r7, #84	; 0x54
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr
	...

080043b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043bc:	b0c0      	sub	sp, #256	; 0x100
 80043be:	af00      	add	r7, sp, #0
 80043c0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	691b      	ldr	r3, [r3, #16]
 80043cc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80043d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043d4:	68d9      	ldr	r1, [r3, #12]
 80043d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	ea40 0301 	orr.w	r3, r0, r1
 80043e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80043e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043e6:	689a      	ldr	r2, [r3, #8]
 80043e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	431a      	orrs	r2, r3
 80043f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043f4:	695b      	ldr	r3, [r3, #20]
 80043f6:	431a      	orrs	r2, r3
 80043f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043fc:	69db      	ldr	r3, [r3, #28]
 80043fe:	4313      	orrs	r3, r2
 8004400:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004410:	f021 010c 	bic.w	r1, r1, #12
 8004414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800441e:	430b      	orrs	r3, r1
 8004420:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	695b      	ldr	r3, [r3, #20]
 800442a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800442e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004432:	6999      	ldr	r1, [r3, #24]
 8004434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	ea40 0301 	orr.w	r3, r0, r1
 800443e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	4b8f      	ldr	r3, [pc, #572]	; (8004684 <UART_SetConfig+0x2cc>)
 8004448:	429a      	cmp	r2, r3
 800444a:	d005      	beq.n	8004458 <UART_SetConfig+0xa0>
 800444c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	4b8d      	ldr	r3, [pc, #564]	; (8004688 <UART_SetConfig+0x2d0>)
 8004454:	429a      	cmp	r2, r3
 8004456:	d104      	bne.n	8004462 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004458:	f7fe ff70 	bl	800333c <HAL_RCC_GetPCLK2Freq>
 800445c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004460:	e003      	b.n	800446a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004462:	f7fe ff57 	bl	8003314 <HAL_RCC_GetPCLK1Freq>
 8004466:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800446a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800446e:	69db      	ldr	r3, [r3, #28]
 8004470:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004474:	f040 810c 	bne.w	8004690 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004478:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800447c:	2200      	movs	r2, #0
 800447e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004482:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004486:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800448a:	4622      	mov	r2, r4
 800448c:	462b      	mov	r3, r5
 800448e:	1891      	adds	r1, r2, r2
 8004490:	65b9      	str	r1, [r7, #88]	; 0x58
 8004492:	415b      	adcs	r3, r3
 8004494:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004496:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800449a:	4621      	mov	r1, r4
 800449c:	eb12 0801 	adds.w	r8, r2, r1
 80044a0:	4629      	mov	r1, r5
 80044a2:	eb43 0901 	adc.w	r9, r3, r1
 80044a6:	f04f 0200 	mov.w	r2, #0
 80044aa:	f04f 0300 	mov.w	r3, #0
 80044ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80044b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80044b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80044ba:	4690      	mov	r8, r2
 80044bc:	4699      	mov	r9, r3
 80044be:	4623      	mov	r3, r4
 80044c0:	eb18 0303 	adds.w	r3, r8, r3
 80044c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80044c8:	462b      	mov	r3, r5
 80044ca:	eb49 0303 	adc.w	r3, r9, r3
 80044ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80044d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80044de:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80044e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80044e6:	460b      	mov	r3, r1
 80044e8:	18db      	adds	r3, r3, r3
 80044ea:	653b      	str	r3, [r7, #80]	; 0x50
 80044ec:	4613      	mov	r3, r2
 80044ee:	eb42 0303 	adc.w	r3, r2, r3
 80044f2:	657b      	str	r3, [r7, #84]	; 0x54
 80044f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80044f8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80044fc:	f7fb fed0 	bl	80002a0 <__aeabi_uldivmod>
 8004500:	4602      	mov	r2, r0
 8004502:	460b      	mov	r3, r1
 8004504:	4b61      	ldr	r3, [pc, #388]	; (800468c <UART_SetConfig+0x2d4>)
 8004506:	fba3 2302 	umull	r2, r3, r3, r2
 800450a:	095b      	lsrs	r3, r3, #5
 800450c:	011c      	lsls	r4, r3, #4
 800450e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004512:	2200      	movs	r2, #0
 8004514:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004518:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800451c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004520:	4642      	mov	r2, r8
 8004522:	464b      	mov	r3, r9
 8004524:	1891      	adds	r1, r2, r2
 8004526:	64b9      	str	r1, [r7, #72]	; 0x48
 8004528:	415b      	adcs	r3, r3
 800452a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800452c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004530:	4641      	mov	r1, r8
 8004532:	eb12 0a01 	adds.w	sl, r2, r1
 8004536:	4649      	mov	r1, r9
 8004538:	eb43 0b01 	adc.w	fp, r3, r1
 800453c:	f04f 0200 	mov.w	r2, #0
 8004540:	f04f 0300 	mov.w	r3, #0
 8004544:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004548:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800454c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004550:	4692      	mov	sl, r2
 8004552:	469b      	mov	fp, r3
 8004554:	4643      	mov	r3, r8
 8004556:	eb1a 0303 	adds.w	r3, sl, r3
 800455a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800455e:	464b      	mov	r3, r9
 8004560:	eb4b 0303 	adc.w	r3, fp, r3
 8004564:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	2200      	movs	r2, #0
 8004570:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004574:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004578:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800457c:	460b      	mov	r3, r1
 800457e:	18db      	adds	r3, r3, r3
 8004580:	643b      	str	r3, [r7, #64]	; 0x40
 8004582:	4613      	mov	r3, r2
 8004584:	eb42 0303 	adc.w	r3, r2, r3
 8004588:	647b      	str	r3, [r7, #68]	; 0x44
 800458a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800458e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004592:	f7fb fe85 	bl	80002a0 <__aeabi_uldivmod>
 8004596:	4602      	mov	r2, r0
 8004598:	460b      	mov	r3, r1
 800459a:	4611      	mov	r1, r2
 800459c:	4b3b      	ldr	r3, [pc, #236]	; (800468c <UART_SetConfig+0x2d4>)
 800459e:	fba3 2301 	umull	r2, r3, r3, r1
 80045a2:	095b      	lsrs	r3, r3, #5
 80045a4:	2264      	movs	r2, #100	; 0x64
 80045a6:	fb02 f303 	mul.w	r3, r2, r3
 80045aa:	1acb      	subs	r3, r1, r3
 80045ac:	00db      	lsls	r3, r3, #3
 80045ae:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80045b2:	4b36      	ldr	r3, [pc, #216]	; (800468c <UART_SetConfig+0x2d4>)
 80045b4:	fba3 2302 	umull	r2, r3, r3, r2
 80045b8:	095b      	lsrs	r3, r3, #5
 80045ba:	005b      	lsls	r3, r3, #1
 80045bc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80045c0:	441c      	add	r4, r3
 80045c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045c6:	2200      	movs	r2, #0
 80045c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80045cc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80045d0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80045d4:	4642      	mov	r2, r8
 80045d6:	464b      	mov	r3, r9
 80045d8:	1891      	adds	r1, r2, r2
 80045da:	63b9      	str	r1, [r7, #56]	; 0x38
 80045dc:	415b      	adcs	r3, r3
 80045de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80045e4:	4641      	mov	r1, r8
 80045e6:	1851      	adds	r1, r2, r1
 80045e8:	6339      	str	r1, [r7, #48]	; 0x30
 80045ea:	4649      	mov	r1, r9
 80045ec:	414b      	adcs	r3, r1
 80045ee:	637b      	str	r3, [r7, #52]	; 0x34
 80045f0:	f04f 0200 	mov.w	r2, #0
 80045f4:	f04f 0300 	mov.w	r3, #0
 80045f8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80045fc:	4659      	mov	r1, fp
 80045fe:	00cb      	lsls	r3, r1, #3
 8004600:	4651      	mov	r1, sl
 8004602:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004606:	4651      	mov	r1, sl
 8004608:	00ca      	lsls	r2, r1, #3
 800460a:	4610      	mov	r0, r2
 800460c:	4619      	mov	r1, r3
 800460e:	4603      	mov	r3, r0
 8004610:	4642      	mov	r2, r8
 8004612:	189b      	adds	r3, r3, r2
 8004614:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004618:	464b      	mov	r3, r9
 800461a:	460a      	mov	r2, r1
 800461c:	eb42 0303 	adc.w	r3, r2, r3
 8004620:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004630:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004634:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004638:	460b      	mov	r3, r1
 800463a:	18db      	adds	r3, r3, r3
 800463c:	62bb      	str	r3, [r7, #40]	; 0x28
 800463e:	4613      	mov	r3, r2
 8004640:	eb42 0303 	adc.w	r3, r2, r3
 8004644:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004646:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800464a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800464e:	f7fb fe27 	bl	80002a0 <__aeabi_uldivmod>
 8004652:	4602      	mov	r2, r0
 8004654:	460b      	mov	r3, r1
 8004656:	4b0d      	ldr	r3, [pc, #52]	; (800468c <UART_SetConfig+0x2d4>)
 8004658:	fba3 1302 	umull	r1, r3, r3, r2
 800465c:	095b      	lsrs	r3, r3, #5
 800465e:	2164      	movs	r1, #100	; 0x64
 8004660:	fb01 f303 	mul.w	r3, r1, r3
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	00db      	lsls	r3, r3, #3
 8004668:	3332      	adds	r3, #50	; 0x32
 800466a:	4a08      	ldr	r2, [pc, #32]	; (800468c <UART_SetConfig+0x2d4>)
 800466c:	fba2 2303 	umull	r2, r3, r2, r3
 8004670:	095b      	lsrs	r3, r3, #5
 8004672:	f003 0207 	and.w	r2, r3, #7
 8004676:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4422      	add	r2, r4
 800467e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004680:	e106      	b.n	8004890 <UART_SetConfig+0x4d8>
 8004682:	bf00      	nop
 8004684:	40011000 	.word	0x40011000
 8004688:	40011400 	.word	0x40011400
 800468c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004690:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004694:	2200      	movs	r2, #0
 8004696:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800469a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800469e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80046a2:	4642      	mov	r2, r8
 80046a4:	464b      	mov	r3, r9
 80046a6:	1891      	adds	r1, r2, r2
 80046a8:	6239      	str	r1, [r7, #32]
 80046aa:	415b      	adcs	r3, r3
 80046ac:	627b      	str	r3, [r7, #36]	; 0x24
 80046ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80046b2:	4641      	mov	r1, r8
 80046b4:	1854      	adds	r4, r2, r1
 80046b6:	4649      	mov	r1, r9
 80046b8:	eb43 0501 	adc.w	r5, r3, r1
 80046bc:	f04f 0200 	mov.w	r2, #0
 80046c0:	f04f 0300 	mov.w	r3, #0
 80046c4:	00eb      	lsls	r3, r5, #3
 80046c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046ca:	00e2      	lsls	r2, r4, #3
 80046cc:	4614      	mov	r4, r2
 80046ce:	461d      	mov	r5, r3
 80046d0:	4643      	mov	r3, r8
 80046d2:	18e3      	adds	r3, r4, r3
 80046d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80046d8:	464b      	mov	r3, r9
 80046da:	eb45 0303 	adc.w	r3, r5, r3
 80046de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80046e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80046ee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80046f2:	f04f 0200 	mov.w	r2, #0
 80046f6:	f04f 0300 	mov.w	r3, #0
 80046fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80046fe:	4629      	mov	r1, r5
 8004700:	008b      	lsls	r3, r1, #2
 8004702:	4621      	mov	r1, r4
 8004704:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004708:	4621      	mov	r1, r4
 800470a:	008a      	lsls	r2, r1, #2
 800470c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004710:	f7fb fdc6 	bl	80002a0 <__aeabi_uldivmod>
 8004714:	4602      	mov	r2, r0
 8004716:	460b      	mov	r3, r1
 8004718:	4b60      	ldr	r3, [pc, #384]	; (800489c <UART_SetConfig+0x4e4>)
 800471a:	fba3 2302 	umull	r2, r3, r3, r2
 800471e:	095b      	lsrs	r3, r3, #5
 8004720:	011c      	lsls	r4, r3, #4
 8004722:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004726:	2200      	movs	r2, #0
 8004728:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800472c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004730:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004734:	4642      	mov	r2, r8
 8004736:	464b      	mov	r3, r9
 8004738:	1891      	adds	r1, r2, r2
 800473a:	61b9      	str	r1, [r7, #24]
 800473c:	415b      	adcs	r3, r3
 800473e:	61fb      	str	r3, [r7, #28]
 8004740:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004744:	4641      	mov	r1, r8
 8004746:	1851      	adds	r1, r2, r1
 8004748:	6139      	str	r1, [r7, #16]
 800474a:	4649      	mov	r1, r9
 800474c:	414b      	adcs	r3, r1
 800474e:	617b      	str	r3, [r7, #20]
 8004750:	f04f 0200 	mov.w	r2, #0
 8004754:	f04f 0300 	mov.w	r3, #0
 8004758:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800475c:	4659      	mov	r1, fp
 800475e:	00cb      	lsls	r3, r1, #3
 8004760:	4651      	mov	r1, sl
 8004762:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004766:	4651      	mov	r1, sl
 8004768:	00ca      	lsls	r2, r1, #3
 800476a:	4610      	mov	r0, r2
 800476c:	4619      	mov	r1, r3
 800476e:	4603      	mov	r3, r0
 8004770:	4642      	mov	r2, r8
 8004772:	189b      	adds	r3, r3, r2
 8004774:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004778:	464b      	mov	r3, r9
 800477a:	460a      	mov	r2, r1
 800477c:	eb42 0303 	adc.w	r3, r2, r3
 8004780:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	67bb      	str	r3, [r7, #120]	; 0x78
 800478e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004790:	f04f 0200 	mov.w	r2, #0
 8004794:	f04f 0300 	mov.w	r3, #0
 8004798:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800479c:	4649      	mov	r1, r9
 800479e:	008b      	lsls	r3, r1, #2
 80047a0:	4641      	mov	r1, r8
 80047a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047a6:	4641      	mov	r1, r8
 80047a8:	008a      	lsls	r2, r1, #2
 80047aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80047ae:	f7fb fd77 	bl	80002a0 <__aeabi_uldivmod>
 80047b2:	4602      	mov	r2, r0
 80047b4:	460b      	mov	r3, r1
 80047b6:	4611      	mov	r1, r2
 80047b8:	4b38      	ldr	r3, [pc, #224]	; (800489c <UART_SetConfig+0x4e4>)
 80047ba:	fba3 2301 	umull	r2, r3, r3, r1
 80047be:	095b      	lsrs	r3, r3, #5
 80047c0:	2264      	movs	r2, #100	; 0x64
 80047c2:	fb02 f303 	mul.w	r3, r2, r3
 80047c6:	1acb      	subs	r3, r1, r3
 80047c8:	011b      	lsls	r3, r3, #4
 80047ca:	3332      	adds	r3, #50	; 0x32
 80047cc:	4a33      	ldr	r2, [pc, #204]	; (800489c <UART_SetConfig+0x4e4>)
 80047ce:	fba2 2303 	umull	r2, r3, r2, r3
 80047d2:	095b      	lsrs	r3, r3, #5
 80047d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047d8:	441c      	add	r4, r3
 80047da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047de:	2200      	movs	r2, #0
 80047e0:	673b      	str	r3, [r7, #112]	; 0x70
 80047e2:	677a      	str	r2, [r7, #116]	; 0x74
 80047e4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80047e8:	4642      	mov	r2, r8
 80047ea:	464b      	mov	r3, r9
 80047ec:	1891      	adds	r1, r2, r2
 80047ee:	60b9      	str	r1, [r7, #8]
 80047f0:	415b      	adcs	r3, r3
 80047f2:	60fb      	str	r3, [r7, #12]
 80047f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80047f8:	4641      	mov	r1, r8
 80047fa:	1851      	adds	r1, r2, r1
 80047fc:	6039      	str	r1, [r7, #0]
 80047fe:	4649      	mov	r1, r9
 8004800:	414b      	adcs	r3, r1
 8004802:	607b      	str	r3, [r7, #4]
 8004804:	f04f 0200 	mov.w	r2, #0
 8004808:	f04f 0300 	mov.w	r3, #0
 800480c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004810:	4659      	mov	r1, fp
 8004812:	00cb      	lsls	r3, r1, #3
 8004814:	4651      	mov	r1, sl
 8004816:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800481a:	4651      	mov	r1, sl
 800481c:	00ca      	lsls	r2, r1, #3
 800481e:	4610      	mov	r0, r2
 8004820:	4619      	mov	r1, r3
 8004822:	4603      	mov	r3, r0
 8004824:	4642      	mov	r2, r8
 8004826:	189b      	adds	r3, r3, r2
 8004828:	66bb      	str	r3, [r7, #104]	; 0x68
 800482a:	464b      	mov	r3, r9
 800482c:	460a      	mov	r2, r1
 800482e:	eb42 0303 	adc.w	r3, r2, r3
 8004832:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	663b      	str	r3, [r7, #96]	; 0x60
 800483e:	667a      	str	r2, [r7, #100]	; 0x64
 8004840:	f04f 0200 	mov.w	r2, #0
 8004844:	f04f 0300 	mov.w	r3, #0
 8004848:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800484c:	4649      	mov	r1, r9
 800484e:	008b      	lsls	r3, r1, #2
 8004850:	4641      	mov	r1, r8
 8004852:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004856:	4641      	mov	r1, r8
 8004858:	008a      	lsls	r2, r1, #2
 800485a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800485e:	f7fb fd1f 	bl	80002a0 <__aeabi_uldivmod>
 8004862:	4602      	mov	r2, r0
 8004864:	460b      	mov	r3, r1
 8004866:	4b0d      	ldr	r3, [pc, #52]	; (800489c <UART_SetConfig+0x4e4>)
 8004868:	fba3 1302 	umull	r1, r3, r3, r2
 800486c:	095b      	lsrs	r3, r3, #5
 800486e:	2164      	movs	r1, #100	; 0x64
 8004870:	fb01 f303 	mul.w	r3, r1, r3
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	011b      	lsls	r3, r3, #4
 8004878:	3332      	adds	r3, #50	; 0x32
 800487a:	4a08      	ldr	r2, [pc, #32]	; (800489c <UART_SetConfig+0x4e4>)
 800487c:	fba2 2303 	umull	r2, r3, r2, r3
 8004880:	095b      	lsrs	r3, r3, #5
 8004882:	f003 020f 	and.w	r2, r3, #15
 8004886:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4422      	add	r2, r4
 800488e:	609a      	str	r2, [r3, #8]
}
 8004890:	bf00      	nop
 8004892:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004896:	46bd      	mov	sp, r7
 8004898:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800489c:	51eb851f 	.word	0x51eb851f

080048a0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80048a0:	b084      	sub	sp, #16
 80048a2:	b580      	push	{r7, lr}
 80048a4:	b084      	sub	sp, #16
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	6078      	str	r0, [r7, #4]
 80048aa:	f107 001c 	add.w	r0, r7, #28
 80048ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80048b2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d123      	bne.n	8004902 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048be:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80048ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80048e2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d105      	bne.n	80048f6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	68db      	ldr	r3, [r3, #12]
 80048ee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f000 faa0 	bl	8004e3c <USB_CoreReset>
 80048fc:	4603      	mov	r3, r0
 80048fe:	73fb      	strb	r3, [r7, #15]
 8004900:	e01b      	b.n	800493a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	68db      	ldr	r3, [r3, #12]
 8004906:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f000 fa94 	bl	8004e3c <USB_CoreReset>
 8004914:	4603      	mov	r3, r0
 8004916:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004918:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800491c:	2b00      	cmp	r3, #0
 800491e:	d106      	bne.n	800492e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004924:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	639a      	str	r2, [r3, #56]	; 0x38
 800492c:	e005      	b.n	800493a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004932:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800493a:	7fbb      	ldrb	r3, [r7, #30]
 800493c:	2b01      	cmp	r3, #1
 800493e:	d10b      	bne.n	8004958 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	f043 0206 	orr.w	r2, r3, #6
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	f043 0220 	orr.w	r2, r3, #32
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004958:	7bfb      	ldrb	r3, [r7, #15]
}
 800495a:	4618      	mov	r0, r3
 800495c:	3710      	adds	r7, #16
 800495e:	46bd      	mov	sp, r7
 8004960:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004964:	b004      	add	sp, #16
 8004966:	4770      	bx	lr

08004968 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004968:	b480      	push	{r7}
 800496a:	b083      	sub	sp, #12
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	f023 0201 	bic.w	r2, r3, #1
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800497c:	2300      	movs	r3, #0
}
 800497e:	4618      	mov	r0, r3
 8004980:	370c      	adds	r7, #12
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr

0800498a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800498a:	b580      	push	{r7, lr}
 800498c:	b084      	sub	sp, #16
 800498e:	af00      	add	r7, sp, #0
 8004990:	6078      	str	r0, [r7, #4]
 8004992:	460b      	mov	r3, r1
 8004994:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004996:	2300      	movs	r3, #0
 8004998:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	68db      	ldr	r3, [r3, #12]
 800499e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80049a6:	78fb      	ldrb	r3, [r7, #3]
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d115      	bne.n	80049d8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80049b8:	200a      	movs	r0, #10
 80049ba:	f7fc fd31 	bl	8001420 <HAL_Delay>
      ms += 10U;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	330a      	adds	r3, #10
 80049c2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f000 fa2b 	bl	8004e20 <USB_GetMode>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d01e      	beq.n	8004a0e <USB_SetCurrentMode+0x84>
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2bc7      	cmp	r3, #199	; 0xc7
 80049d4:	d9f0      	bls.n	80049b8 <USB_SetCurrentMode+0x2e>
 80049d6:	e01a      	b.n	8004a0e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80049d8:	78fb      	ldrb	r3, [r7, #3]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d115      	bne.n	8004a0a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80049ea:	200a      	movs	r0, #10
 80049ec:	f7fc fd18 	bl	8001420 <HAL_Delay>
      ms += 10U;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	330a      	adds	r3, #10
 80049f4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f000 fa12 	bl	8004e20 <USB_GetMode>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d005      	beq.n	8004a0e <USB_SetCurrentMode+0x84>
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2bc7      	cmp	r3, #199	; 0xc7
 8004a06:	d9f0      	bls.n	80049ea <USB_SetCurrentMode+0x60>
 8004a08:	e001      	b.n	8004a0e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e005      	b.n	8004a1a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2bc8      	cmp	r3, #200	; 0xc8
 8004a12:	d101      	bne.n	8004a18 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	e000      	b.n	8004a1a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004a18:	2300      	movs	r3, #0
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3710      	adds	r7, #16
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
	...

08004a24 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a24:	b084      	sub	sp, #16
 8004a26:	b580      	push	{r7, lr}
 8004a28:	b086      	sub	sp, #24
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	6078      	str	r0, [r7, #4]
 8004a2e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004a32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004a36:	2300      	movs	r3, #0
 8004a38:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004a3e:	2300      	movs	r3, #0
 8004a40:	613b      	str	r3, [r7, #16]
 8004a42:	e009      	b.n	8004a58 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004a44:	687a      	ldr	r2, [r7, #4]
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	3340      	adds	r3, #64	; 0x40
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	4413      	add	r3, r2
 8004a4e:	2200      	movs	r2, #0
 8004a50:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	3301      	adds	r3, #1
 8004a56:	613b      	str	r3, [r7, #16]
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	2b0e      	cmp	r3, #14
 8004a5c:	d9f2      	bls.n	8004a44 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004a5e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d11c      	bne.n	8004aa0 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	68fa      	ldr	r2, [r7, #12]
 8004a70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a74:	f043 0302 	orr.w	r3, r3, #2
 8004a78:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a7e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a8a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a96:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	639a      	str	r2, [r3, #56]	; 0x38
 8004a9e:	e00b      	b.n	8004ab8 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab0:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004abe:	461a      	mov	r2, r3
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004ac4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d10d      	bne.n	8004ae8 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004acc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d104      	bne.n	8004ade <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004ad4:	2100      	movs	r1, #0
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f000 f968 	bl	8004dac <USB_SetDevSpeed>
 8004adc:	e008      	b.n	8004af0 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004ade:	2101      	movs	r1, #1
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f000 f963 	bl	8004dac <USB_SetDevSpeed>
 8004ae6:	e003      	b.n	8004af0 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004ae8:	2103      	movs	r1, #3
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f000 f95e 	bl	8004dac <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004af0:	2110      	movs	r1, #16
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f000 f8fa 	bl	8004cec <USB_FlushTxFifo>
 8004af8:	4603      	mov	r3, r0
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d001      	beq.n	8004b02 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f000 f924 	bl	8004d50 <USB_FlushRxFifo>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d001      	beq.n	8004b12 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b18:	461a      	mov	r2, r3
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b24:	461a      	mov	r2, r3
 8004b26:	2300      	movs	r3, #0
 8004b28:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b30:	461a      	mov	r2, r3
 8004b32:	2300      	movs	r3, #0
 8004b34:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b36:	2300      	movs	r3, #0
 8004b38:	613b      	str	r3, [r7, #16]
 8004b3a:	e043      	b.n	8004bc4 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	015a      	lsls	r2, r3, #5
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	4413      	add	r3, r2
 8004b44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b52:	d118      	bne.n	8004b86 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d10a      	bne.n	8004b70 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	015a      	lsls	r2, r3, #5
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	4413      	add	r3, r2
 8004b62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b66:	461a      	mov	r2, r3
 8004b68:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004b6c:	6013      	str	r3, [r2, #0]
 8004b6e:	e013      	b.n	8004b98 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	015a      	lsls	r2, r3, #5
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	4413      	add	r3, r2
 8004b78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b7c:	461a      	mov	r2, r3
 8004b7e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004b82:	6013      	str	r3, [r2, #0]
 8004b84:	e008      	b.n	8004b98 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	015a      	lsls	r2, r3, #5
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	4413      	add	r3, r2
 8004b8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b92:	461a      	mov	r2, r3
 8004b94:	2300      	movs	r3, #0
 8004b96:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	015a      	lsls	r2, r3, #5
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	4413      	add	r3, r2
 8004ba0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	015a      	lsls	r2, r3, #5
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	4413      	add	r3, r2
 8004bb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004bbc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	3301      	adds	r3, #1
 8004bc2:	613b      	str	r3, [r7, #16]
 8004bc4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004bc8:	461a      	mov	r2, r3
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d3b5      	bcc.n	8004b3c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	613b      	str	r3, [r7, #16]
 8004bd4:	e043      	b.n	8004c5e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	015a      	lsls	r2, r3, #5
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	4413      	add	r3, r2
 8004bde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004be8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004bec:	d118      	bne.n	8004c20 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d10a      	bne.n	8004c0a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	015a      	lsls	r2, r3, #5
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	4413      	add	r3, r2
 8004bfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c00:	461a      	mov	r2, r3
 8004c02:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004c06:	6013      	str	r3, [r2, #0]
 8004c08:	e013      	b.n	8004c32 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	015a      	lsls	r2, r3, #5
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	4413      	add	r3, r2
 8004c12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c16:	461a      	mov	r2, r3
 8004c18:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004c1c:	6013      	str	r3, [r2, #0]
 8004c1e:	e008      	b.n	8004c32 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	015a      	lsls	r2, r3, #5
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	4413      	add	r3, r2
 8004c28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c2c:	461a      	mov	r2, r3
 8004c2e:	2300      	movs	r3, #0
 8004c30:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	015a      	lsls	r2, r3, #5
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	4413      	add	r3, r2
 8004c3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c3e:	461a      	mov	r2, r3
 8004c40:	2300      	movs	r3, #0
 8004c42:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	015a      	lsls	r2, r3, #5
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	4413      	add	r3, r2
 8004c4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c50:	461a      	mov	r2, r3
 8004c52:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004c56:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	3301      	adds	r3, #1
 8004c5c:	613b      	str	r3, [r7, #16]
 8004c5e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004c62:	461a      	mov	r2, r3
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d3b5      	bcc.n	8004bd6 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c70:	691b      	ldr	r3, [r3, #16]
 8004c72:	68fa      	ldr	r2, [r7, #12]
 8004c74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c7c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2200      	movs	r2, #0
 8004c82:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004c8a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004c8c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d105      	bne.n	8004ca0 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	699b      	ldr	r3, [r3, #24]
 8004c98:	f043 0210 	orr.w	r2, r3, #16
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	699a      	ldr	r2, [r3, #24]
 8004ca4:	4b10      	ldr	r3, [pc, #64]	; (8004ce8 <USB_DevInit+0x2c4>)
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	687a      	ldr	r2, [r7, #4]
 8004caa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004cac:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d005      	beq.n	8004cc0 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	699b      	ldr	r3, [r3, #24]
 8004cb8:	f043 0208 	orr.w	r2, r3, #8
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004cc0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d107      	bne.n	8004cd8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	699b      	ldr	r3, [r3, #24]
 8004ccc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004cd0:	f043 0304 	orr.w	r3, r3, #4
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004cd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3718      	adds	r7, #24
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ce4:	b004      	add	sp, #16
 8004ce6:	4770      	bx	lr
 8004ce8:	803c3800 	.word	0x803c3800

08004cec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b085      	sub	sp, #20
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	3301      	adds	r3, #1
 8004cfe:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004d06:	d901      	bls.n	8004d0c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004d08:	2303      	movs	r3, #3
 8004d0a:	e01b      	b.n	8004d44 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	691b      	ldr	r3, [r3, #16]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	daf2      	bge.n	8004cfa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004d14:	2300      	movs	r3, #0
 8004d16:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	019b      	lsls	r3, r3, #6
 8004d1c:	f043 0220 	orr.w	r2, r3, #32
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	3301      	adds	r3, #1
 8004d28:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004d30:	d901      	bls.n	8004d36 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004d32:	2303      	movs	r3, #3
 8004d34:	e006      	b.n	8004d44 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	691b      	ldr	r3, [r3, #16]
 8004d3a:	f003 0320 	and.w	r3, r3, #32
 8004d3e:	2b20      	cmp	r3, #32
 8004d40:	d0f0      	beq.n	8004d24 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004d42:	2300      	movs	r3, #0
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	3714      	adds	r7, #20
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr

08004d50 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b085      	sub	sp, #20
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	3301      	adds	r3, #1
 8004d60:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004d68:	d901      	bls.n	8004d6e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	e018      	b.n	8004da0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	691b      	ldr	r3, [r3, #16]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	daf2      	bge.n	8004d5c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004d76:	2300      	movs	r3, #0
 8004d78:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2210      	movs	r2, #16
 8004d7e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	3301      	adds	r3, #1
 8004d84:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004d8c:	d901      	bls.n	8004d92 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	e006      	b.n	8004da0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	691b      	ldr	r3, [r3, #16]
 8004d96:	f003 0310 	and.w	r3, r3, #16
 8004d9a:	2b10      	cmp	r3, #16
 8004d9c:	d0f0      	beq.n	8004d80 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004d9e:	2300      	movs	r3, #0
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3714      	adds	r7, #20
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr

08004dac <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b085      	sub	sp, #20
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	460b      	mov	r3, r1
 8004db6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	78fb      	ldrb	r3, [r7, #3]
 8004dc6:	68f9      	ldr	r1, [r7, #12]
 8004dc8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004dd0:	2300      	movs	r3, #0
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3714      	adds	r7, #20
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr

08004dde <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004dde:	b480      	push	{r7}
 8004de0:	b085      	sub	sp, #20
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	68fa      	ldr	r2, [r7, #12]
 8004df4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004df8:	f023 0303 	bic.w	r3, r3, #3
 8004dfc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	68fa      	ldr	r2, [r7, #12]
 8004e08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e0c:	f043 0302 	orr.w	r3, r3, #2
 8004e10:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004e12:	2300      	movs	r3, #0
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3714      	adds	r7, #20
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr

08004e20 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b083      	sub	sp, #12
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	695b      	ldr	r3, [r3, #20]
 8004e2c:	f003 0301 	and.w	r3, r3, #1
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	370c      	adds	r7, #12
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr

08004e3c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b085      	sub	sp, #20
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004e44:	2300      	movs	r3, #0
 8004e46:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	3301      	adds	r3, #1
 8004e4c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004e54:	d901      	bls.n	8004e5a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004e56:	2303      	movs	r3, #3
 8004e58:	e01b      	b.n	8004e92 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	691b      	ldr	r3, [r3, #16]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	daf2      	bge.n	8004e48 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004e62:	2300      	movs	r3, #0
 8004e64:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	691b      	ldr	r3, [r3, #16]
 8004e6a:	f043 0201 	orr.w	r2, r3, #1
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	3301      	adds	r3, #1
 8004e76:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004e7e:	d901      	bls.n	8004e84 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004e80:	2303      	movs	r3, #3
 8004e82:	e006      	b.n	8004e92 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	691b      	ldr	r3, [r3, #16]
 8004e88:	f003 0301 	and.w	r3, r3, #1
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d0f0      	beq.n	8004e72 <USB_CoreReset+0x36>

  return HAL_OK;
 8004e90:	2300      	movs	r3, #0
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3714      	adds	r7, #20
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr
	...

08004ea0 <siprintf>:
 8004ea0:	b40e      	push	{r1, r2, r3}
 8004ea2:	b500      	push	{lr}
 8004ea4:	b09c      	sub	sp, #112	; 0x70
 8004ea6:	ab1d      	add	r3, sp, #116	; 0x74
 8004ea8:	9002      	str	r0, [sp, #8]
 8004eaa:	9006      	str	r0, [sp, #24]
 8004eac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004eb0:	4809      	ldr	r0, [pc, #36]	; (8004ed8 <siprintf+0x38>)
 8004eb2:	9107      	str	r1, [sp, #28]
 8004eb4:	9104      	str	r1, [sp, #16]
 8004eb6:	4909      	ldr	r1, [pc, #36]	; (8004edc <siprintf+0x3c>)
 8004eb8:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ebc:	9105      	str	r1, [sp, #20]
 8004ebe:	6800      	ldr	r0, [r0, #0]
 8004ec0:	9301      	str	r3, [sp, #4]
 8004ec2:	a902      	add	r1, sp, #8
 8004ec4:	f000 f992 	bl	80051ec <_svfiprintf_r>
 8004ec8:	9b02      	ldr	r3, [sp, #8]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	701a      	strb	r2, [r3, #0]
 8004ece:	b01c      	add	sp, #112	; 0x70
 8004ed0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ed4:	b003      	add	sp, #12
 8004ed6:	4770      	bx	lr
 8004ed8:	20000058 	.word	0x20000058
 8004edc:	ffff0208 	.word	0xffff0208

08004ee0 <memset>:
 8004ee0:	4402      	add	r2, r0
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d100      	bne.n	8004eea <memset+0xa>
 8004ee8:	4770      	bx	lr
 8004eea:	f803 1b01 	strb.w	r1, [r3], #1
 8004eee:	e7f9      	b.n	8004ee4 <memset+0x4>

08004ef0 <__errno>:
 8004ef0:	4b01      	ldr	r3, [pc, #4]	; (8004ef8 <__errno+0x8>)
 8004ef2:	6818      	ldr	r0, [r3, #0]
 8004ef4:	4770      	bx	lr
 8004ef6:	bf00      	nop
 8004ef8:	20000058 	.word	0x20000058

08004efc <__libc_init_array>:
 8004efc:	b570      	push	{r4, r5, r6, lr}
 8004efe:	4d0d      	ldr	r5, [pc, #52]	; (8004f34 <__libc_init_array+0x38>)
 8004f00:	4c0d      	ldr	r4, [pc, #52]	; (8004f38 <__libc_init_array+0x3c>)
 8004f02:	1b64      	subs	r4, r4, r5
 8004f04:	10a4      	asrs	r4, r4, #2
 8004f06:	2600      	movs	r6, #0
 8004f08:	42a6      	cmp	r6, r4
 8004f0a:	d109      	bne.n	8004f20 <__libc_init_array+0x24>
 8004f0c:	4d0b      	ldr	r5, [pc, #44]	; (8004f3c <__libc_init_array+0x40>)
 8004f0e:	4c0c      	ldr	r4, [pc, #48]	; (8004f40 <__libc_init_array+0x44>)
 8004f10:	f000 fc6a 	bl	80057e8 <_init>
 8004f14:	1b64      	subs	r4, r4, r5
 8004f16:	10a4      	asrs	r4, r4, #2
 8004f18:	2600      	movs	r6, #0
 8004f1a:	42a6      	cmp	r6, r4
 8004f1c:	d105      	bne.n	8004f2a <__libc_init_array+0x2e>
 8004f1e:	bd70      	pop	{r4, r5, r6, pc}
 8004f20:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f24:	4798      	blx	r3
 8004f26:	3601      	adds	r6, #1
 8004f28:	e7ee      	b.n	8004f08 <__libc_init_array+0xc>
 8004f2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f2e:	4798      	blx	r3
 8004f30:	3601      	adds	r6, #1
 8004f32:	e7f2      	b.n	8004f1a <__libc_init_array+0x1e>
 8004f34:	0800586c 	.word	0x0800586c
 8004f38:	0800586c 	.word	0x0800586c
 8004f3c:	0800586c 	.word	0x0800586c
 8004f40:	08005870 	.word	0x08005870

08004f44 <__retarget_lock_acquire_recursive>:
 8004f44:	4770      	bx	lr

08004f46 <__retarget_lock_release_recursive>:
 8004f46:	4770      	bx	lr

08004f48 <_free_r>:
 8004f48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004f4a:	2900      	cmp	r1, #0
 8004f4c:	d044      	beq.n	8004fd8 <_free_r+0x90>
 8004f4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f52:	9001      	str	r0, [sp, #4]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	f1a1 0404 	sub.w	r4, r1, #4
 8004f5a:	bfb8      	it	lt
 8004f5c:	18e4      	addlt	r4, r4, r3
 8004f5e:	f000 f8df 	bl	8005120 <__malloc_lock>
 8004f62:	4a1e      	ldr	r2, [pc, #120]	; (8004fdc <_free_r+0x94>)
 8004f64:	9801      	ldr	r0, [sp, #4]
 8004f66:	6813      	ldr	r3, [r2, #0]
 8004f68:	b933      	cbnz	r3, 8004f78 <_free_r+0x30>
 8004f6a:	6063      	str	r3, [r4, #4]
 8004f6c:	6014      	str	r4, [r2, #0]
 8004f6e:	b003      	add	sp, #12
 8004f70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004f74:	f000 b8da 	b.w	800512c <__malloc_unlock>
 8004f78:	42a3      	cmp	r3, r4
 8004f7a:	d908      	bls.n	8004f8e <_free_r+0x46>
 8004f7c:	6825      	ldr	r5, [r4, #0]
 8004f7e:	1961      	adds	r1, r4, r5
 8004f80:	428b      	cmp	r3, r1
 8004f82:	bf01      	itttt	eq
 8004f84:	6819      	ldreq	r1, [r3, #0]
 8004f86:	685b      	ldreq	r3, [r3, #4]
 8004f88:	1949      	addeq	r1, r1, r5
 8004f8a:	6021      	streq	r1, [r4, #0]
 8004f8c:	e7ed      	b.n	8004f6a <_free_r+0x22>
 8004f8e:	461a      	mov	r2, r3
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	b10b      	cbz	r3, 8004f98 <_free_r+0x50>
 8004f94:	42a3      	cmp	r3, r4
 8004f96:	d9fa      	bls.n	8004f8e <_free_r+0x46>
 8004f98:	6811      	ldr	r1, [r2, #0]
 8004f9a:	1855      	adds	r5, r2, r1
 8004f9c:	42a5      	cmp	r5, r4
 8004f9e:	d10b      	bne.n	8004fb8 <_free_r+0x70>
 8004fa0:	6824      	ldr	r4, [r4, #0]
 8004fa2:	4421      	add	r1, r4
 8004fa4:	1854      	adds	r4, r2, r1
 8004fa6:	42a3      	cmp	r3, r4
 8004fa8:	6011      	str	r1, [r2, #0]
 8004faa:	d1e0      	bne.n	8004f6e <_free_r+0x26>
 8004fac:	681c      	ldr	r4, [r3, #0]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	6053      	str	r3, [r2, #4]
 8004fb2:	440c      	add	r4, r1
 8004fb4:	6014      	str	r4, [r2, #0]
 8004fb6:	e7da      	b.n	8004f6e <_free_r+0x26>
 8004fb8:	d902      	bls.n	8004fc0 <_free_r+0x78>
 8004fba:	230c      	movs	r3, #12
 8004fbc:	6003      	str	r3, [r0, #0]
 8004fbe:	e7d6      	b.n	8004f6e <_free_r+0x26>
 8004fc0:	6825      	ldr	r5, [r4, #0]
 8004fc2:	1961      	adds	r1, r4, r5
 8004fc4:	428b      	cmp	r3, r1
 8004fc6:	bf04      	itt	eq
 8004fc8:	6819      	ldreq	r1, [r3, #0]
 8004fca:	685b      	ldreq	r3, [r3, #4]
 8004fcc:	6063      	str	r3, [r4, #4]
 8004fce:	bf04      	itt	eq
 8004fd0:	1949      	addeq	r1, r1, r5
 8004fd2:	6021      	streq	r1, [r4, #0]
 8004fd4:	6054      	str	r4, [r2, #4]
 8004fd6:	e7ca      	b.n	8004f6e <_free_r+0x26>
 8004fd8:	b003      	add	sp, #12
 8004fda:	bd30      	pop	{r4, r5, pc}
 8004fdc:	200009f4 	.word	0x200009f4

08004fe0 <sbrk_aligned>:
 8004fe0:	b570      	push	{r4, r5, r6, lr}
 8004fe2:	4e0e      	ldr	r6, [pc, #56]	; (800501c <sbrk_aligned+0x3c>)
 8004fe4:	460c      	mov	r4, r1
 8004fe6:	6831      	ldr	r1, [r6, #0]
 8004fe8:	4605      	mov	r5, r0
 8004fea:	b911      	cbnz	r1, 8004ff2 <sbrk_aligned+0x12>
 8004fec:	f000 fba6 	bl	800573c <_sbrk_r>
 8004ff0:	6030      	str	r0, [r6, #0]
 8004ff2:	4621      	mov	r1, r4
 8004ff4:	4628      	mov	r0, r5
 8004ff6:	f000 fba1 	bl	800573c <_sbrk_r>
 8004ffa:	1c43      	adds	r3, r0, #1
 8004ffc:	d00a      	beq.n	8005014 <sbrk_aligned+0x34>
 8004ffe:	1cc4      	adds	r4, r0, #3
 8005000:	f024 0403 	bic.w	r4, r4, #3
 8005004:	42a0      	cmp	r0, r4
 8005006:	d007      	beq.n	8005018 <sbrk_aligned+0x38>
 8005008:	1a21      	subs	r1, r4, r0
 800500a:	4628      	mov	r0, r5
 800500c:	f000 fb96 	bl	800573c <_sbrk_r>
 8005010:	3001      	adds	r0, #1
 8005012:	d101      	bne.n	8005018 <sbrk_aligned+0x38>
 8005014:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005018:	4620      	mov	r0, r4
 800501a:	bd70      	pop	{r4, r5, r6, pc}
 800501c:	200009f8 	.word	0x200009f8

08005020 <_malloc_r>:
 8005020:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005024:	1ccd      	adds	r5, r1, #3
 8005026:	f025 0503 	bic.w	r5, r5, #3
 800502a:	3508      	adds	r5, #8
 800502c:	2d0c      	cmp	r5, #12
 800502e:	bf38      	it	cc
 8005030:	250c      	movcc	r5, #12
 8005032:	2d00      	cmp	r5, #0
 8005034:	4607      	mov	r7, r0
 8005036:	db01      	blt.n	800503c <_malloc_r+0x1c>
 8005038:	42a9      	cmp	r1, r5
 800503a:	d905      	bls.n	8005048 <_malloc_r+0x28>
 800503c:	230c      	movs	r3, #12
 800503e:	603b      	str	r3, [r7, #0]
 8005040:	2600      	movs	r6, #0
 8005042:	4630      	mov	r0, r6
 8005044:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005048:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800511c <_malloc_r+0xfc>
 800504c:	f000 f868 	bl	8005120 <__malloc_lock>
 8005050:	f8d8 3000 	ldr.w	r3, [r8]
 8005054:	461c      	mov	r4, r3
 8005056:	bb5c      	cbnz	r4, 80050b0 <_malloc_r+0x90>
 8005058:	4629      	mov	r1, r5
 800505a:	4638      	mov	r0, r7
 800505c:	f7ff ffc0 	bl	8004fe0 <sbrk_aligned>
 8005060:	1c43      	adds	r3, r0, #1
 8005062:	4604      	mov	r4, r0
 8005064:	d155      	bne.n	8005112 <_malloc_r+0xf2>
 8005066:	f8d8 4000 	ldr.w	r4, [r8]
 800506a:	4626      	mov	r6, r4
 800506c:	2e00      	cmp	r6, #0
 800506e:	d145      	bne.n	80050fc <_malloc_r+0xdc>
 8005070:	2c00      	cmp	r4, #0
 8005072:	d048      	beq.n	8005106 <_malloc_r+0xe6>
 8005074:	6823      	ldr	r3, [r4, #0]
 8005076:	4631      	mov	r1, r6
 8005078:	4638      	mov	r0, r7
 800507a:	eb04 0903 	add.w	r9, r4, r3
 800507e:	f000 fb5d 	bl	800573c <_sbrk_r>
 8005082:	4581      	cmp	r9, r0
 8005084:	d13f      	bne.n	8005106 <_malloc_r+0xe6>
 8005086:	6821      	ldr	r1, [r4, #0]
 8005088:	1a6d      	subs	r5, r5, r1
 800508a:	4629      	mov	r1, r5
 800508c:	4638      	mov	r0, r7
 800508e:	f7ff ffa7 	bl	8004fe0 <sbrk_aligned>
 8005092:	3001      	adds	r0, #1
 8005094:	d037      	beq.n	8005106 <_malloc_r+0xe6>
 8005096:	6823      	ldr	r3, [r4, #0]
 8005098:	442b      	add	r3, r5
 800509a:	6023      	str	r3, [r4, #0]
 800509c:	f8d8 3000 	ldr.w	r3, [r8]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d038      	beq.n	8005116 <_malloc_r+0xf6>
 80050a4:	685a      	ldr	r2, [r3, #4]
 80050a6:	42a2      	cmp	r2, r4
 80050a8:	d12b      	bne.n	8005102 <_malloc_r+0xe2>
 80050aa:	2200      	movs	r2, #0
 80050ac:	605a      	str	r2, [r3, #4]
 80050ae:	e00f      	b.n	80050d0 <_malloc_r+0xb0>
 80050b0:	6822      	ldr	r2, [r4, #0]
 80050b2:	1b52      	subs	r2, r2, r5
 80050b4:	d41f      	bmi.n	80050f6 <_malloc_r+0xd6>
 80050b6:	2a0b      	cmp	r2, #11
 80050b8:	d917      	bls.n	80050ea <_malloc_r+0xca>
 80050ba:	1961      	adds	r1, r4, r5
 80050bc:	42a3      	cmp	r3, r4
 80050be:	6025      	str	r5, [r4, #0]
 80050c0:	bf18      	it	ne
 80050c2:	6059      	strne	r1, [r3, #4]
 80050c4:	6863      	ldr	r3, [r4, #4]
 80050c6:	bf08      	it	eq
 80050c8:	f8c8 1000 	streq.w	r1, [r8]
 80050cc:	5162      	str	r2, [r4, r5]
 80050ce:	604b      	str	r3, [r1, #4]
 80050d0:	4638      	mov	r0, r7
 80050d2:	f104 060b 	add.w	r6, r4, #11
 80050d6:	f000 f829 	bl	800512c <__malloc_unlock>
 80050da:	f026 0607 	bic.w	r6, r6, #7
 80050de:	1d23      	adds	r3, r4, #4
 80050e0:	1af2      	subs	r2, r6, r3
 80050e2:	d0ae      	beq.n	8005042 <_malloc_r+0x22>
 80050e4:	1b9b      	subs	r3, r3, r6
 80050e6:	50a3      	str	r3, [r4, r2]
 80050e8:	e7ab      	b.n	8005042 <_malloc_r+0x22>
 80050ea:	42a3      	cmp	r3, r4
 80050ec:	6862      	ldr	r2, [r4, #4]
 80050ee:	d1dd      	bne.n	80050ac <_malloc_r+0x8c>
 80050f0:	f8c8 2000 	str.w	r2, [r8]
 80050f4:	e7ec      	b.n	80050d0 <_malloc_r+0xb0>
 80050f6:	4623      	mov	r3, r4
 80050f8:	6864      	ldr	r4, [r4, #4]
 80050fa:	e7ac      	b.n	8005056 <_malloc_r+0x36>
 80050fc:	4634      	mov	r4, r6
 80050fe:	6876      	ldr	r6, [r6, #4]
 8005100:	e7b4      	b.n	800506c <_malloc_r+0x4c>
 8005102:	4613      	mov	r3, r2
 8005104:	e7cc      	b.n	80050a0 <_malloc_r+0x80>
 8005106:	230c      	movs	r3, #12
 8005108:	603b      	str	r3, [r7, #0]
 800510a:	4638      	mov	r0, r7
 800510c:	f000 f80e 	bl	800512c <__malloc_unlock>
 8005110:	e797      	b.n	8005042 <_malloc_r+0x22>
 8005112:	6025      	str	r5, [r4, #0]
 8005114:	e7dc      	b.n	80050d0 <_malloc_r+0xb0>
 8005116:	605b      	str	r3, [r3, #4]
 8005118:	deff      	udf	#255	; 0xff
 800511a:	bf00      	nop
 800511c:	200009f4 	.word	0x200009f4

08005120 <__malloc_lock>:
 8005120:	4801      	ldr	r0, [pc, #4]	; (8005128 <__malloc_lock+0x8>)
 8005122:	f7ff bf0f 	b.w	8004f44 <__retarget_lock_acquire_recursive>
 8005126:	bf00      	nop
 8005128:	200009f0 	.word	0x200009f0

0800512c <__malloc_unlock>:
 800512c:	4801      	ldr	r0, [pc, #4]	; (8005134 <__malloc_unlock+0x8>)
 800512e:	f7ff bf0a 	b.w	8004f46 <__retarget_lock_release_recursive>
 8005132:	bf00      	nop
 8005134:	200009f0 	.word	0x200009f0

08005138 <__ssputs_r>:
 8005138:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800513c:	688e      	ldr	r6, [r1, #8]
 800513e:	461f      	mov	r7, r3
 8005140:	42be      	cmp	r6, r7
 8005142:	680b      	ldr	r3, [r1, #0]
 8005144:	4682      	mov	sl, r0
 8005146:	460c      	mov	r4, r1
 8005148:	4690      	mov	r8, r2
 800514a:	d82c      	bhi.n	80051a6 <__ssputs_r+0x6e>
 800514c:	898a      	ldrh	r2, [r1, #12]
 800514e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005152:	d026      	beq.n	80051a2 <__ssputs_r+0x6a>
 8005154:	6965      	ldr	r5, [r4, #20]
 8005156:	6909      	ldr	r1, [r1, #16]
 8005158:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800515c:	eba3 0901 	sub.w	r9, r3, r1
 8005160:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005164:	1c7b      	adds	r3, r7, #1
 8005166:	444b      	add	r3, r9
 8005168:	106d      	asrs	r5, r5, #1
 800516a:	429d      	cmp	r5, r3
 800516c:	bf38      	it	cc
 800516e:	461d      	movcc	r5, r3
 8005170:	0553      	lsls	r3, r2, #21
 8005172:	d527      	bpl.n	80051c4 <__ssputs_r+0x8c>
 8005174:	4629      	mov	r1, r5
 8005176:	f7ff ff53 	bl	8005020 <_malloc_r>
 800517a:	4606      	mov	r6, r0
 800517c:	b360      	cbz	r0, 80051d8 <__ssputs_r+0xa0>
 800517e:	6921      	ldr	r1, [r4, #16]
 8005180:	464a      	mov	r2, r9
 8005182:	f000 faeb 	bl	800575c <memcpy>
 8005186:	89a3      	ldrh	r3, [r4, #12]
 8005188:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800518c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005190:	81a3      	strh	r3, [r4, #12]
 8005192:	6126      	str	r6, [r4, #16]
 8005194:	6165      	str	r5, [r4, #20]
 8005196:	444e      	add	r6, r9
 8005198:	eba5 0509 	sub.w	r5, r5, r9
 800519c:	6026      	str	r6, [r4, #0]
 800519e:	60a5      	str	r5, [r4, #8]
 80051a0:	463e      	mov	r6, r7
 80051a2:	42be      	cmp	r6, r7
 80051a4:	d900      	bls.n	80051a8 <__ssputs_r+0x70>
 80051a6:	463e      	mov	r6, r7
 80051a8:	6820      	ldr	r0, [r4, #0]
 80051aa:	4632      	mov	r2, r6
 80051ac:	4641      	mov	r1, r8
 80051ae:	f000 faab 	bl	8005708 <memmove>
 80051b2:	68a3      	ldr	r3, [r4, #8]
 80051b4:	1b9b      	subs	r3, r3, r6
 80051b6:	60a3      	str	r3, [r4, #8]
 80051b8:	6823      	ldr	r3, [r4, #0]
 80051ba:	4433      	add	r3, r6
 80051bc:	6023      	str	r3, [r4, #0]
 80051be:	2000      	movs	r0, #0
 80051c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051c4:	462a      	mov	r2, r5
 80051c6:	f000 fad7 	bl	8005778 <_realloc_r>
 80051ca:	4606      	mov	r6, r0
 80051cc:	2800      	cmp	r0, #0
 80051ce:	d1e0      	bne.n	8005192 <__ssputs_r+0x5a>
 80051d0:	6921      	ldr	r1, [r4, #16]
 80051d2:	4650      	mov	r0, sl
 80051d4:	f7ff feb8 	bl	8004f48 <_free_r>
 80051d8:	230c      	movs	r3, #12
 80051da:	f8ca 3000 	str.w	r3, [sl]
 80051de:	89a3      	ldrh	r3, [r4, #12]
 80051e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051e4:	81a3      	strh	r3, [r4, #12]
 80051e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80051ea:	e7e9      	b.n	80051c0 <__ssputs_r+0x88>

080051ec <_svfiprintf_r>:
 80051ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051f0:	4698      	mov	r8, r3
 80051f2:	898b      	ldrh	r3, [r1, #12]
 80051f4:	061b      	lsls	r3, r3, #24
 80051f6:	b09d      	sub	sp, #116	; 0x74
 80051f8:	4607      	mov	r7, r0
 80051fa:	460d      	mov	r5, r1
 80051fc:	4614      	mov	r4, r2
 80051fe:	d50e      	bpl.n	800521e <_svfiprintf_r+0x32>
 8005200:	690b      	ldr	r3, [r1, #16]
 8005202:	b963      	cbnz	r3, 800521e <_svfiprintf_r+0x32>
 8005204:	2140      	movs	r1, #64	; 0x40
 8005206:	f7ff ff0b 	bl	8005020 <_malloc_r>
 800520a:	6028      	str	r0, [r5, #0]
 800520c:	6128      	str	r0, [r5, #16]
 800520e:	b920      	cbnz	r0, 800521a <_svfiprintf_r+0x2e>
 8005210:	230c      	movs	r3, #12
 8005212:	603b      	str	r3, [r7, #0]
 8005214:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005218:	e0d0      	b.n	80053bc <_svfiprintf_r+0x1d0>
 800521a:	2340      	movs	r3, #64	; 0x40
 800521c:	616b      	str	r3, [r5, #20]
 800521e:	2300      	movs	r3, #0
 8005220:	9309      	str	r3, [sp, #36]	; 0x24
 8005222:	2320      	movs	r3, #32
 8005224:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005228:	f8cd 800c 	str.w	r8, [sp, #12]
 800522c:	2330      	movs	r3, #48	; 0x30
 800522e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80053d4 <_svfiprintf_r+0x1e8>
 8005232:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005236:	f04f 0901 	mov.w	r9, #1
 800523a:	4623      	mov	r3, r4
 800523c:	469a      	mov	sl, r3
 800523e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005242:	b10a      	cbz	r2, 8005248 <_svfiprintf_r+0x5c>
 8005244:	2a25      	cmp	r2, #37	; 0x25
 8005246:	d1f9      	bne.n	800523c <_svfiprintf_r+0x50>
 8005248:	ebba 0b04 	subs.w	fp, sl, r4
 800524c:	d00b      	beq.n	8005266 <_svfiprintf_r+0x7a>
 800524e:	465b      	mov	r3, fp
 8005250:	4622      	mov	r2, r4
 8005252:	4629      	mov	r1, r5
 8005254:	4638      	mov	r0, r7
 8005256:	f7ff ff6f 	bl	8005138 <__ssputs_r>
 800525a:	3001      	adds	r0, #1
 800525c:	f000 80a9 	beq.w	80053b2 <_svfiprintf_r+0x1c6>
 8005260:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005262:	445a      	add	r2, fp
 8005264:	9209      	str	r2, [sp, #36]	; 0x24
 8005266:	f89a 3000 	ldrb.w	r3, [sl]
 800526a:	2b00      	cmp	r3, #0
 800526c:	f000 80a1 	beq.w	80053b2 <_svfiprintf_r+0x1c6>
 8005270:	2300      	movs	r3, #0
 8005272:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005276:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800527a:	f10a 0a01 	add.w	sl, sl, #1
 800527e:	9304      	str	r3, [sp, #16]
 8005280:	9307      	str	r3, [sp, #28]
 8005282:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005286:	931a      	str	r3, [sp, #104]	; 0x68
 8005288:	4654      	mov	r4, sl
 800528a:	2205      	movs	r2, #5
 800528c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005290:	4850      	ldr	r0, [pc, #320]	; (80053d4 <_svfiprintf_r+0x1e8>)
 8005292:	f7fa ffb5 	bl	8000200 <memchr>
 8005296:	9a04      	ldr	r2, [sp, #16]
 8005298:	b9d8      	cbnz	r0, 80052d2 <_svfiprintf_r+0xe6>
 800529a:	06d0      	lsls	r0, r2, #27
 800529c:	bf44      	itt	mi
 800529e:	2320      	movmi	r3, #32
 80052a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80052a4:	0711      	lsls	r1, r2, #28
 80052a6:	bf44      	itt	mi
 80052a8:	232b      	movmi	r3, #43	; 0x2b
 80052aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80052ae:	f89a 3000 	ldrb.w	r3, [sl]
 80052b2:	2b2a      	cmp	r3, #42	; 0x2a
 80052b4:	d015      	beq.n	80052e2 <_svfiprintf_r+0xf6>
 80052b6:	9a07      	ldr	r2, [sp, #28]
 80052b8:	4654      	mov	r4, sl
 80052ba:	2000      	movs	r0, #0
 80052bc:	f04f 0c0a 	mov.w	ip, #10
 80052c0:	4621      	mov	r1, r4
 80052c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80052c6:	3b30      	subs	r3, #48	; 0x30
 80052c8:	2b09      	cmp	r3, #9
 80052ca:	d94d      	bls.n	8005368 <_svfiprintf_r+0x17c>
 80052cc:	b1b0      	cbz	r0, 80052fc <_svfiprintf_r+0x110>
 80052ce:	9207      	str	r2, [sp, #28]
 80052d0:	e014      	b.n	80052fc <_svfiprintf_r+0x110>
 80052d2:	eba0 0308 	sub.w	r3, r0, r8
 80052d6:	fa09 f303 	lsl.w	r3, r9, r3
 80052da:	4313      	orrs	r3, r2
 80052dc:	9304      	str	r3, [sp, #16]
 80052de:	46a2      	mov	sl, r4
 80052e0:	e7d2      	b.n	8005288 <_svfiprintf_r+0x9c>
 80052e2:	9b03      	ldr	r3, [sp, #12]
 80052e4:	1d19      	adds	r1, r3, #4
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	9103      	str	r1, [sp, #12]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	bfbb      	ittet	lt
 80052ee:	425b      	neglt	r3, r3
 80052f0:	f042 0202 	orrlt.w	r2, r2, #2
 80052f4:	9307      	strge	r3, [sp, #28]
 80052f6:	9307      	strlt	r3, [sp, #28]
 80052f8:	bfb8      	it	lt
 80052fa:	9204      	strlt	r2, [sp, #16]
 80052fc:	7823      	ldrb	r3, [r4, #0]
 80052fe:	2b2e      	cmp	r3, #46	; 0x2e
 8005300:	d10c      	bne.n	800531c <_svfiprintf_r+0x130>
 8005302:	7863      	ldrb	r3, [r4, #1]
 8005304:	2b2a      	cmp	r3, #42	; 0x2a
 8005306:	d134      	bne.n	8005372 <_svfiprintf_r+0x186>
 8005308:	9b03      	ldr	r3, [sp, #12]
 800530a:	1d1a      	adds	r2, r3, #4
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	9203      	str	r2, [sp, #12]
 8005310:	2b00      	cmp	r3, #0
 8005312:	bfb8      	it	lt
 8005314:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005318:	3402      	adds	r4, #2
 800531a:	9305      	str	r3, [sp, #20]
 800531c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80053e4 <_svfiprintf_r+0x1f8>
 8005320:	7821      	ldrb	r1, [r4, #0]
 8005322:	2203      	movs	r2, #3
 8005324:	4650      	mov	r0, sl
 8005326:	f7fa ff6b 	bl	8000200 <memchr>
 800532a:	b138      	cbz	r0, 800533c <_svfiprintf_r+0x150>
 800532c:	9b04      	ldr	r3, [sp, #16]
 800532e:	eba0 000a 	sub.w	r0, r0, sl
 8005332:	2240      	movs	r2, #64	; 0x40
 8005334:	4082      	lsls	r2, r0
 8005336:	4313      	orrs	r3, r2
 8005338:	3401      	adds	r4, #1
 800533a:	9304      	str	r3, [sp, #16]
 800533c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005340:	4825      	ldr	r0, [pc, #148]	; (80053d8 <_svfiprintf_r+0x1ec>)
 8005342:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005346:	2206      	movs	r2, #6
 8005348:	f7fa ff5a 	bl	8000200 <memchr>
 800534c:	2800      	cmp	r0, #0
 800534e:	d038      	beq.n	80053c2 <_svfiprintf_r+0x1d6>
 8005350:	4b22      	ldr	r3, [pc, #136]	; (80053dc <_svfiprintf_r+0x1f0>)
 8005352:	bb1b      	cbnz	r3, 800539c <_svfiprintf_r+0x1b0>
 8005354:	9b03      	ldr	r3, [sp, #12]
 8005356:	3307      	adds	r3, #7
 8005358:	f023 0307 	bic.w	r3, r3, #7
 800535c:	3308      	adds	r3, #8
 800535e:	9303      	str	r3, [sp, #12]
 8005360:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005362:	4433      	add	r3, r6
 8005364:	9309      	str	r3, [sp, #36]	; 0x24
 8005366:	e768      	b.n	800523a <_svfiprintf_r+0x4e>
 8005368:	fb0c 3202 	mla	r2, ip, r2, r3
 800536c:	460c      	mov	r4, r1
 800536e:	2001      	movs	r0, #1
 8005370:	e7a6      	b.n	80052c0 <_svfiprintf_r+0xd4>
 8005372:	2300      	movs	r3, #0
 8005374:	3401      	adds	r4, #1
 8005376:	9305      	str	r3, [sp, #20]
 8005378:	4619      	mov	r1, r3
 800537a:	f04f 0c0a 	mov.w	ip, #10
 800537e:	4620      	mov	r0, r4
 8005380:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005384:	3a30      	subs	r2, #48	; 0x30
 8005386:	2a09      	cmp	r2, #9
 8005388:	d903      	bls.n	8005392 <_svfiprintf_r+0x1a6>
 800538a:	2b00      	cmp	r3, #0
 800538c:	d0c6      	beq.n	800531c <_svfiprintf_r+0x130>
 800538e:	9105      	str	r1, [sp, #20]
 8005390:	e7c4      	b.n	800531c <_svfiprintf_r+0x130>
 8005392:	fb0c 2101 	mla	r1, ip, r1, r2
 8005396:	4604      	mov	r4, r0
 8005398:	2301      	movs	r3, #1
 800539a:	e7f0      	b.n	800537e <_svfiprintf_r+0x192>
 800539c:	ab03      	add	r3, sp, #12
 800539e:	9300      	str	r3, [sp, #0]
 80053a0:	462a      	mov	r2, r5
 80053a2:	4b0f      	ldr	r3, [pc, #60]	; (80053e0 <_svfiprintf_r+0x1f4>)
 80053a4:	a904      	add	r1, sp, #16
 80053a6:	4638      	mov	r0, r7
 80053a8:	f3af 8000 	nop.w
 80053ac:	1c42      	adds	r2, r0, #1
 80053ae:	4606      	mov	r6, r0
 80053b0:	d1d6      	bne.n	8005360 <_svfiprintf_r+0x174>
 80053b2:	89ab      	ldrh	r3, [r5, #12]
 80053b4:	065b      	lsls	r3, r3, #25
 80053b6:	f53f af2d 	bmi.w	8005214 <_svfiprintf_r+0x28>
 80053ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 80053bc:	b01d      	add	sp, #116	; 0x74
 80053be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053c2:	ab03      	add	r3, sp, #12
 80053c4:	9300      	str	r3, [sp, #0]
 80053c6:	462a      	mov	r2, r5
 80053c8:	4b05      	ldr	r3, [pc, #20]	; (80053e0 <_svfiprintf_r+0x1f4>)
 80053ca:	a904      	add	r1, sp, #16
 80053cc:	4638      	mov	r0, r7
 80053ce:	f000 f879 	bl	80054c4 <_printf_i>
 80053d2:	e7eb      	b.n	80053ac <_svfiprintf_r+0x1c0>
 80053d4:	08005830 	.word	0x08005830
 80053d8:	0800583a 	.word	0x0800583a
 80053dc:	00000000 	.word	0x00000000
 80053e0:	08005139 	.word	0x08005139
 80053e4:	08005836 	.word	0x08005836

080053e8 <_printf_common>:
 80053e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053ec:	4616      	mov	r6, r2
 80053ee:	4699      	mov	r9, r3
 80053f0:	688a      	ldr	r2, [r1, #8]
 80053f2:	690b      	ldr	r3, [r1, #16]
 80053f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80053f8:	4293      	cmp	r3, r2
 80053fa:	bfb8      	it	lt
 80053fc:	4613      	movlt	r3, r2
 80053fe:	6033      	str	r3, [r6, #0]
 8005400:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005404:	4607      	mov	r7, r0
 8005406:	460c      	mov	r4, r1
 8005408:	b10a      	cbz	r2, 800540e <_printf_common+0x26>
 800540a:	3301      	adds	r3, #1
 800540c:	6033      	str	r3, [r6, #0]
 800540e:	6823      	ldr	r3, [r4, #0]
 8005410:	0699      	lsls	r1, r3, #26
 8005412:	bf42      	ittt	mi
 8005414:	6833      	ldrmi	r3, [r6, #0]
 8005416:	3302      	addmi	r3, #2
 8005418:	6033      	strmi	r3, [r6, #0]
 800541a:	6825      	ldr	r5, [r4, #0]
 800541c:	f015 0506 	ands.w	r5, r5, #6
 8005420:	d106      	bne.n	8005430 <_printf_common+0x48>
 8005422:	f104 0a19 	add.w	sl, r4, #25
 8005426:	68e3      	ldr	r3, [r4, #12]
 8005428:	6832      	ldr	r2, [r6, #0]
 800542a:	1a9b      	subs	r3, r3, r2
 800542c:	42ab      	cmp	r3, r5
 800542e:	dc26      	bgt.n	800547e <_printf_common+0x96>
 8005430:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005434:	1e13      	subs	r3, r2, #0
 8005436:	6822      	ldr	r2, [r4, #0]
 8005438:	bf18      	it	ne
 800543a:	2301      	movne	r3, #1
 800543c:	0692      	lsls	r2, r2, #26
 800543e:	d42b      	bmi.n	8005498 <_printf_common+0xb0>
 8005440:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005444:	4649      	mov	r1, r9
 8005446:	4638      	mov	r0, r7
 8005448:	47c0      	blx	r8
 800544a:	3001      	adds	r0, #1
 800544c:	d01e      	beq.n	800548c <_printf_common+0xa4>
 800544e:	6823      	ldr	r3, [r4, #0]
 8005450:	6922      	ldr	r2, [r4, #16]
 8005452:	f003 0306 	and.w	r3, r3, #6
 8005456:	2b04      	cmp	r3, #4
 8005458:	bf02      	ittt	eq
 800545a:	68e5      	ldreq	r5, [r4, #12]
 800545c:	6833      	ldreq	r3, [r6, #0]
 800545e:	1aed      	subeq	r5, r5, r3
 8005460:	68a3      	ldr	r3, [r4, #8]
 8005462:	bf0c      	ite	eq
 8005464:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005468:	2500      	movne	r5, #0
 800546a:	4293      	cmp	r3, r2
 800546c:	bfc4      	itt	gt
 800546e:	1a9b      	subgt	r3, r3, r2
 8005470:	18ed      	addgt	r5, r5, r3
 8005472:	2600      	movs	r6, #0
 8005474:	341a      	adds	r4, #26
 8005476:	42b5      	cmp	r5, r6
 8005478:	d11a      	bne.n	80054b0 <_printf_common+0xc8>
 800547a:	2000      	movs	r0, #0
 800547c:	e008      	b.n	8005490 <_printf_common+0xa8>
 800547e:	2301      	movs	r3, #1
 8005480:	4652      	mov	r2, sl
 8005482:	4649      	mov	r1, r9
 8005484:	4638      	mov	r0, r7
 8005486:	47c0      	blx	r8
 8005488:	3001      	adds	r0, #1
 800548a:	d103      	bne.n	8005494 <_printf_common+0xac>
 800548c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005490:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005494:	3501      	adds	r5, #1
 8005496:	e7c6      	b.n	8005426 <_printf_common+0x3e>
 8005498:	18e1      	adds	r1, r4, r3
 800549a:	1c5a      	adds	r2, r3, #1
 800549c:	2030      	movs	r0, #48	; 0x30
 800549e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80054a2:	4422      	add	r2, r4
 80054a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80054a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80054ac:	3302      	adds	r3, #2
 80054ae:	e7c7      	b.n	8005440 <_printf_common+0x58>
 80054b0:	2301      	movs	r3, #1
 80054b2:	4622      	mov	r2, r4
 80054b4:	4649      	mov	r1, r9
 80054b6:	4638      	mov	r0, r7
 80054b8:	47c0      	blx	r8
 80054ba:	3001      	adds	r0, #1
 80054bc:	d0e6      	beq.n	800548c <_printf_common+0xa4>
 80054be:	3601      	adds	r6, #1
 80054c0:	e7d9      	b.n	8005476 <_printf_common+0x8e>
	...

080054c4 <_printf_i>:
 80054c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80054c8:	7e0f      	ldrb	r7, [r1, #24]
 80054ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80054cc:	2f78      	cmp	r7, #120	; 0x78
 80054ce:	4691      	mov	r9, r2
 80054d0:	4680      	mov	r8, r0
 80054d2:	460c      	mov	r4, r1
 80054d4:	469a      	mov	sl, r3
 80054d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80054da:	d807      	bhi.n	80054ec <_printf_i+0x28>
 80054dc:	2f62      	cmp	r7, #98	; 0x62
 80054de:	d80a      	bhi.n	80054f6 <_printf_i+0x32>
 80054e0:	2f00      	cmp	r7, #0
 80054e2:	f000 80d4 	beq.w	800568e <_printf_i+0x1ca>
 80054e6:	2f58      	cmp	r7, #88	; 0x58
 80054e8:	f000 80c0 	beq.w	800566c <_printf_i+0x1a8>
 80054ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80054f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80054f4:	e03a      	b.n	800556c <_printf_i+0xa8>
 80054f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80054fa:	2b15      	cmp	r3, #21
 80054fc:	d8f6      	bhi.n	80054ec <_printf_i+0x28>
 80054fe:	a101      	add	r1, pc, #4	; (adr r1, 8005504 <_printf_i+0x40>)
 8005500:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005504:	0800555d 	.word	0x0800555d
 8005508:	08005571 	.word	0x08005571
 800550c:	080054ed 	.word	0x080054ed
 8005510:	080054ed 	.word	0x080054ed
 8005514:	080054ed 	.word	0x080054ed
 8005518:	080054ed 	.word	0x080054ed
 800551c:	08005571 	.word	0x08005571
 8005520:	080054ed 	.word	0x080054ed
 8005524:	080054ed 	.word	0x080054ed
 8005528:	080054ed 	.word	0x080054ed
 800552c:	080054ed 	.word	0x080054ed
 8005530:	08005675 	.word	0x08005675
 8005534:	0800559d 	.word	0x0800559d
 8005538:	0800562f 	.word	0x0800562f
 800553c:	080054ed 	.word	0x080054ed
 8005540:	080054ed 	.word	0x080054ed
 8005544:	08005697 	.word	0x08005697
 8005548:	080054ed 	.word	0x080054ed
 800554c:	0800559d 	.word	0x0800559d
 8005550:	080054ed 	.word	0x080054ed
 8005554:	080054ed 	.word	0x080054ed
 8005558:	08005637 	.word	0x08005637
 800555c:	682b      	ldr	r3, [r5, #0]
 800555e:	1d1a      	adds	r2, r3, #4
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	602a      	str	r2, [r5, #0]
 8005564:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005568:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800556c:	2301      	movs	r3, #1
 800556e:	e09f      	b.n	80056b0 <_printf_i+0x1ec>
 8005570:	6820      	ldr	r0, [r4, #0]
 8005572:	682b      	ldr	r3, [r5, #0]
 8005574:	0607      	lsls	r7, r0, #24
 8005576:	f103 0104 	add.w	r1, r3, #4
 800557a:	6029      	str	r1, [r5, #0]
 800557c:	d501      	bpl.n	8005582 <_printf_i+0xbe>
 800557e:	681e      	ldr	r6, [r3, #0]
 8005580:	e003      	b.n	800558a <_printf_i+0xc6>
 8005582:	0646      	lsls	r6, r0, #25
 8005584:	d5fb      	bpl.n	800557e <_printf_i+0xba>
 8005586:	f9b3 6000 	ldrsh.w	r6, [r3]
 800558a:	2e00      	cmp	r6, #0
 800558c:	da03      	bge.n	8005596 <_printf_i+0xd2>
 800558e:	232d      	movs	r3, #45	; 0x2d
 8005590:	4276      	negs	r6, r6
 8005592:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005596:	485a      	ldr	r0, [pc, #360]	; (8005700 <_printf_i+0x23c>)
 8005598:	230a      	movs	r3, #10
 800559a:	e012      	b.n	80055c2 <_printf_i+0xfe>
 800559c:	682b      	ldr	r3, [r5, #0]
 800559e:	6820      	ldr	r0, [r4, #0]
 80055a0:	1d19      	adds	r1, r3, #4
 80055a2:	6029      	str	r1, [r5, #0]
 80055a4:	0605      	lsls	r5, r0, #24
 80055a6:	d501      	bpl.n	80055ac <_printf_i+0xe8>
 80055a8:	681e      	ldr	r6, [r3, #0]
 80055aa:	e002      	b.n	80055b2 <_printf_i+0xee>
 80055ac:	0641      	lsls	r1, r0, #25
 80055ae:	d5fb      	bpl.n	80055a8 <_printf_i+0xe4>
 80055b0:	881e      	ldrh	r6, [r3, #0]
 80055b2:	4853      	ldr	r0, [pc, #332]	; (8005700 <_printf_i+0x23c>)
 80055b4:	2f6f      	cmp	r7, #111	; 0x6f
 80055b6:	bf0c      	ite	eq
 80055b8:	2308      	moveq	r3, #8
 80055ba:	230a      	movne	r3, #10
 80055bc:	2100      	movs	r1, #0
 80055be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80055c2:	6865      	ldr	r5, [r4, #4]
 80055c4:	60a5      	str	r5, [r4, #8]
 80055c6:	2d00      	cmp	r5, #0
 80055c8:	bfa2      	ittt	ge
 80055ca:	6821      	ldrge	r1, [r4, #0]
 80055cc:	f021 0104 	bicge.w	r1, r1, #4
 80055d0:	6021      	strge	r1, [r4, #0]
 80055d2:	b90e      	cbnz	r6, 80055d8 <_printf_i+0x114>
 80055d4:	2d00      	cmp	r5, #0
 80055d6:	d04b      	beq.n	8005670 <_printf_i+0x1ac>
 80055d8:	4615      	mov	r5, r2
 80055da:	fbb6 f1f3 	udiv	r1, r6, r3
 80055de:	fb03 6711 	mls	r7, r3, r1, r6
 80055e2:	5dc7      	ldrb	r7, [r0, r7]
 80055e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80055e8:	4637      	mov	r7, r6
 80055ea:	42bb      	cmp	r3, r7
 80055ec:	460e      	mov	r6, r1
 80055ee:	d9f4      	bls.n	80055da <_printf_i+0x116>
 80055f0:	2b08      	cmp	r3, #8
 80055f2:	d10b      	bne.n	800560c <_printf_i+0x148>
 80055f4:	6823      	ldr	r3, [r4, #0]
 80055f6:	07de      	lsls	r6, r3, #31
 80055f8:	d508      	bpl.n	800560c <_printf_i+0x148>
 80055fa:	6923      	ldr	r3, [r4, #16]
 80055fc:	6861      	ldr	r1, [r4, #4]
 80055fe:	4299      	cmp	r1, r3
 8005600:	bfde      	ittt	le
 8005602:	2330      	movle	r3, #48	; 0x30
 8005604:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005608:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800560c:	1b52      	subs	r2, r2, r5
 800560e:	6122      	str	r2, [r4, #16]
 8005610:	f8cd a000 	str.w	sl, [sp]
 8005614:	464b      	mov	r3, r9
 8005616:	aa03      	add	r2, sp, #12
 8005618:	4621      	mov	r1, r4
 800561a:	4640      	mov	r0, r8
 800561c:	f7ff fee4 	bl	80053e8 <_printf_common>
 8005620:	3001      	adds	r0, #1
 8005622:	d14a      	bne.n	80056ba <_printf_i+0x1f6>
 8005624:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005628:	b004      	add	sp, #16
 800562a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800562e:	6823      	ldr	r3, [r4, #0]
 8005630:	f043 0320 	orr.w	r3, r3, #32
 8005634:	6023      	str	r3, [r4, #0]
 8005636:	4833      	ldr	r0, [pc, #204]	; (8005704 <_printf_i+0x240>)
 8005638:	2778      	movs	r7, #120	; 0x78
 800563a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800563e:	6823      	ldr	r3, [r4, #0]
 8005640:	6829      	ldr	r1, [r5, #0]
 8005642:	061f      	lsls	r7, r3, #24
 8005644:	f851 6b04 	ldr.w	r6, [r1], #4
 8005648:	d402      	bmi.n	8005650 <_printf_i+0x18c>
 800564a:	065f      	lsls	r7, r3, #25
 800564c:	bf48      	it	mi
 800564e:	b2b6      	uxthmi	r6, r6
 8005650:	07df      	lsls	r7, r3, #31
 8005652:	bf48      	it	mi
 8005654:	f043 0320 	orrmi.w	r3, r3, #32
 8005658:	6029      	str	r1, [r5, #0]
 800565a:	bf48      	it	mi
 800565c:	6023      	strmi	r3, [r4, #0]
 800565e:	b91e      	cbnz	r6, 8005668 <_printf_i+0x1a4>
 8005660:	6823      	ldr	r3, [r4, #0]
 8005662:	f023 0320 	bic.w	r3, r3, #32
 8005666:	6023      	str	r3, [r4, #0]
 8005668:	2310      	movs	r3, #16
 800566a:	e7a7      	b.n	80055bc <_printf_i+0xf8>
 800566c:	4824      	ldr	r0, [pc, #144]	; (8005700 <_printf_i+0x23c>)
 800566e:	e7e4      	b.n	800563a <_printf_i+0x176>
 8005670:	4615      	mov	r5, r2
 8005672:	e7bd      	b.n	80055f0 <_printf_i+0x12c>
 8005674:	682b      	ldr	r3, [r5, #0]
 8005676:	6826      	ldr	r6, [r4, #0]
 8005678:	6961      	ldr	r1, [r4, #20]
 800567a:	1d18      	adds	r0, r3, #4
 800567c:	6028      	str	r0, [r5, #0]
 800567e:	0635      	lsls	r5, r6, #24
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	d501      	bpl.n	8005688 <_printf_i+0x1c4>
 8005684:	6019      	str	r1, [r3, #0]
 8005686:	e002      	b.n	800568e <_printf_i+0x1ca>
 8005688:	0670      	lsls	r0, r6, #25
 800568a:	d5fb      	bpl.n	8005684 <_printf_i+0x1c0>
 800568c:	8019      	strh	r1, [r3, #0]
 800568e:	2300      	movs	r3, #0
 8005690:	6123      	str	r3, [r4, #16]
 8005692:	4615      	mov	r5, r2
 8005694:	e7bc      	b.n	8005610 <_printf_i+0x14c>
 8005696:	682b      	ldr	r3, [r5, #0]
 8005698:	1d1a      	adds	r2, r3, #4
 800569a:	602a      	str	r2, [r5, #0]
 800569c:	681d      	ldr	r5, [r3, #0]
 800569e:	6862      	ldr	r2, [r4, #4]
 80056a0:	2100      	movs	r1, #0
 80056a2:	4628      	mov	r0, r5
 80056a4:	f7fa fdac 	bl	8000200 <memchr>
 80056a8:	b108      	cbz	r0, 80056ae <_printf_i+0x1ea>
 80056aa:	1b40      	subs	r0, r0, r5
 80056ac:	6060      	str	r0, [r4, #4]
 80056ae:	6863      	ldr	r3, [r4, #4]
 80056b0:	6123      	str	r3, [r4, #16]
 80056b2:	2300      	movs	r3, #0
 80056b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056b8:	e7aa      	b.n	8005610 <_printf_i+0x14c>
 80056ba:	6923      	ldr	r3, [r4, #16]
 80056bc:	462a      	mov	r2, r5
 80056be:	4649      	mov	r1, r9
 80056c0:	4640      	mov	r0, r8
 80056c2:	47d0      	blx	sl
 80056c4:	3001      	adds	r0, #1
 80056c6:	d0ad      	beq.n	8005624 <_printf_i+0x160>
 80056c8:	6823      	ldr	r3, [r4, #0]
 80056ca:	079b      	lsls	r3, r3, #30
 80056cc:	d413      	bmi.n	80056f6 <_printf_i+0x232>
 80056ce:	68e0      	ldr	r0, [r4, #12]
 80056d0:	9b03      	ldr	r3, [sp, #12]
 80056d2:	4298      	cmp	r0, r3
 80056d4:	bfb8      	it	lt
 80056d6:	4618      	movlt	r0, r3
 80056d8:	e7a6      	b.n	8005628 <_printf_i+0x164>
 80056da:	2301      	movs	r3, #1
 80056dc:	4632      	mov	r2, r6
 80056de:	4649      	mov	r1, r9
 80056e0:	4640      	mov	r0, r8
 80056e2:	47d0      	blx	sl
 80056e4:	3001      	adds	r0, #1
 80056e6:	d09d      	beq.n	8005624 <_printf_i+0x160>
 80056e8:	3501      	adds	r5, #1
 80056ea:	68e3      	ldr	r3, [r4, #12]
 80056ec:	9903      	ldr	r1, [sp, #12]
 80056ee:	1a5b      	subs	r3, r3, r1
 80056f0:	42ab      	cmp	r3, r5
 80056f2:	dcf2      	bgt.n	80056da <_printf_i+0x216>
 80056f4:	e7eb      	b.n	80056ce <_printf_i+0x20a>
 80056f6:	2500      	movs	r5, #0
 80056f8:	f104 0619 	add.w	r6, r4, #25
 80056fc:	e7f5      	b.n	80056ea <_printf_i+0x226>
 80056fe:	bf00      	nop
 8005700:	08005841 	.word	0x08005841
 8005704:	08005852 	.word	0x08005852

08005708 <memmove>:
 8005708:	4288      	cmp	r0, r1
 800570a:	b510      	push	{r4, lr}
 800570c:	eb01 0402 	add.w	r4, r1, r2
 8005710:	d902      	bls.n	8005718 <memmove+0x10>
 8005712:	4284      	cmp	r4, r0
 8005714:	4623      	mov	r3, r4
 8005716:	d807      	bhi.n	8005728 <memmove+0x20>
 8005718:	1e43      	subs	r3, r0, #1
 800571a:	42a1      	cmp	r1, r4
 800571c:	d008      	beq.n	8005730 <memmove+0x28>
 800571e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005722:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005726:	e7f8      	b.n	800571a <memmove+0x12>
 8005728:	4402      	add	r2, r0
 800572a:	4601      	mov	r1, r0
 800572c:	428a      	cmp	r2, r1
 800572e:	d100      	bne.n	8005732 <memmove+0x2a>
 8005730:	bd10      	pop	{r4, pc}
 8005732:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005736:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800573a:	e7f7      	b.n	800572c <memmove+0x24>

0800573c <_sbrk_r>:
 800573c:	b538      	push	{r3, r4, r5, lr}
 800573e:	4d06      	ldr	r5, [pc, #24]	; (8005758 <_sbrk_r+0x1c>)
 8005740:	2300      	movs	r3, #0
 8005742:	4604      	mov	r4, r0
 8005744:	4608      	mov	r0, r1
 8005746:	602b      	str	r3, [r5, #0]
 8005748:	f7fb fd86 	bl	8001258 <_sbrk>
 800574c:	1c43      	adds	r3, r0, #1
 800574e:	d102      	bne.n	8005756 <_sbrk_r+0x1a>
 8005750:	682b      	ldr	r3, [r5, #0]
 8005752:	b103      	cbz	r3, 8005756 <_sbrk_r+0x1a>
 8005754:	6023      	str	r3, [r4, #0]
 8005756:	bd38      	pop	{r3, r4, r5, pc}
 8005758:	200009ec 	.word	0x200009ec

0800575c <memcpy>:
 800575c:	440a      	add	r2, r1
 800575e:	4291      	cmp	r1, r2
 8005760:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005764:	d100      	bne.n	8005768 <memcpy+0xc>
 8005766:	4770      	bx	lr
 8005768:	b510      	push	{r4, lr}
 800576a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800576e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005772:	4291      	cmp	r1, r2
 8005774:	d1f9      	bne.n	800576a <memcpy+0xe>
 8005776:	bd10      	pop	{r4, pc}

08005778 <_realloc_r>:
 8005778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800577c:	4680      	mov	r8, r0
 800577e:	4614      	mov	r4, r2
 8005780:	460e      	mov	r6, r1
 8005782:	b921      	cbnz	r1, 800578e <_realloc_r+0x16>
 8005784:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005788:	4611      	mov	r1, r2
 800578a:	f7ff bc49 	b.w	8005020 <_malloc_r>
 800578e:	b92a      	cbnz	r2, 800579c <_realloc_r+0x24>
 8005790:	f7ff fbda 	bl	8004f48 <_free_r>
 8005794:	4625      	mov	r5, r4
 8005796:	4628      	mov	r0, r5
 8005798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800579c:	f000 f81b 	bl	80057d6 <_malloc_usable_size_r>
 80057a0:	4284      	cmp	r4, r0
 80057a2:	4607      	mov	r7, r0
 80057a4:	d802      	bhi.n	80057ac <_realloc_r+0x34>
 80057a6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80057aa:	d812      	bhi.n	80057d2 <_realloc_r+0x5a>
 80057ac:	4621      	mov	r1, r4
 80057ae:	4640      	mov	r0, r8
 80057b0:	f7ff fc36 	bl	8005020 <_malloc_r>
 80057b4:	4605      	mov	r5, r0
 80057b6:	2800      	cmp	r0, #0
 80057b8:	d0ed      	beq.n	8005796 <_realloc_r+0x1e>
 80057ba:	42bc      	cmp	r4, r7
 80057bc:	4622      	mov	r2, r4
 80057be:	4631      	mov	r1, r6
 80057c0:	bf28      	it	cs
 80057c2:	463a      	movcs	r2, r7
 80057c4:	f7ff ffca 	bl	800575c <memcpy>
 80057c8:	4631      	mov	r1, r6
 80057ca:	4640      	mov	r0, r8
 80057cc:	f7ff fbbc 	bl	8004f48 <_free_r>
 80057d0:	e7e1      	b.n	8005796 <_realloc_r+0x1e>
 80057d2:	4635      	mov	r5, r6
 80057d4:	e7df      	b.n	8005796 <_realloc_r+0x1e>

080057d6 <_malloc_usable_size_r>:
 80057d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057da:	1f18      	subs	r0, r3, #4
 80057dc:	2b00      	cmp	r3, #0
 80057de:	bfbc      	itt	lt
 80057e0:	580b      	ldrlt	r3, [r1, r0]
 80057e2:	18c0      	addlt	r0, r0, r3
 80057e4:	4770      	bx	lr
	...

080057e8 <_init>:
 80057e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057ea:	bf00      	nop
 80057ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057ee:	bc08      	pop	{r3}
 80057f0:	469e      	mov	lr, r3
 80057f2:	4770      	bx	lr

080057f4 <_fini>:
 80057f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057f6:	bf00      	nop
 80057f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057fa:	bc08      	pop	{r3}
 80057fc:	469e      	mov	lr, r3
 80057fe:	4770      	bx	lr
